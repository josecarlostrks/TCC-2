<?xml version="1.0" encoding="UTF-8"?>
<java-project id="default" name="webmail-0.7.10" revision="webmail-0.7.10">
	<pkg name="/:net.wastl.webmail.config">
		<class name="/:net.wastl.webmail.config.ConfigScheme" intfc="n" abs="n" inn="n" sloc="145" jdoc="This class contains a scheme for WebMail configuration data. It is mainly a container for the ConfigParameter objects and a wrapper to access the main functions in them to ease access to the scheme. Created: 31.08.99 @author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<field name="config_scheme" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.ConfigScheme()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.isValid(String, Object)" access="pub" jdoc="Check whether a key value pair is valid in this configuration scheme @param key Name of the parameter @param value value to check for">
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.filter(String, String)" access="pub" jdoc="">
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.configRegisterStringKey(String, String, String)" access="pub" jdoc="Register a configuration key that can take String values @param key Name of the configuration key @param default Default value for this key @param desc Description for this key">
				<param name="key"/>
				<param name="def"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.configRegisterStringKey(ConfigurationListener, String, String, String)" access="pub" jdoc="">
				<param name="l"/>
				<param name="key"/>
				<param name="def"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.configRegisterIntegerKey(String, String, String)" access="pub" jdoc="Register a configuration key that can take String values @param key Name of the configuration key @param default Default value for this key @param desc Description for this key">
				<param name="key"/>
				<param name="def"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.configRegisterIntegerKey(ConfigurationListener, String, String, String)" access="pub" jdoc="">
				<param name="l"/>
				<param name="key"/>
				<param name="def"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.configRegisterCryptedStringKey(String, String, String)" access="pub" jdoc="Register a configuration key that can take String values and crypts them @param key Name of the configuration key @param default Default value for this key @param desc Description for this key">
				<param name="key"/>
				<param name="def"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.configRegisterCryptedStringKey(ConfigurationListener, String, String, String)" access="pub" jdoc="">
				<param name="l"/>
				<param name="key"/>
				<param name="def"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.configRegisterChoiceKey(String, String)" access="pub" jdoc="Register a configuration key that can take one of a choice of possible values @param key Name of the configuration key @param desc Description for this key @see configAddChoice">
				<param name="key"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.configRegisterChoiceKey(ConfigurationListener, String, String)" access="pub" jdoc="">
				<param name="l"/>
				<param name="key"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.configRegisterYesNoKey(String, String)" access="pub" jdoc="">
				<param name="key"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.configRegisterYesNoKey(ConfigurationListener, String, String)" access="pub" jdoc="">
				<param name="l"/>
				<param name="key"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.configAddChoice(String, String, String)" access="pub" jdoc="Add a choice to an already-existing Choice-key @param key Name of the configuration key where a choice is to be added @param choice Name of the new choice @param desc Description for this choice">
				<param name="key"/>
				<param name="choice"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.addConfigurationListener(String, ConfigurationListener)" access="pub" jdoc="Add a configuration listener for a key. There may be any amount of Listeners for a parameter.">
				<param name="key"/>
				<param name="l"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.getConfigParameter(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.getConfigParameterType(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.getConfigParameterGroup(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.getDefaultValue(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.setDefaultValue(String, Object)" access="pub" jdoc="">
				<param name="key"/>
				<param name="default_value"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.getDescription(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.getPossibleKeys()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.notifyConfigurationChange(String)" access="pub" jdoc="">
				<comm cntt="System.err.println(&amp;quot;NOTIFY: &amp;quot;+key);"/>
				<comm cntt="System.err.println(l);"/>
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigScheme.registerConfig(ConfigParameter)" access="pub" jdoc="">
				<param name="parm"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.config.ChoiceConfigParameter" intfc="n" abs="n" inn="n" sloc="37" jdoc="Scheme of a parameter that can take one of several choices as value">
			<field name="possible_values" access="pub" jdoc=""/>
			<mth name="/:net.wastl.webmail.config.ChoiceConfigParameter.ChoiceConfigParameter(String, String)" access="pub" jdoc="">
				<param name="name"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ChoiceConfigParameter.addChoice(Object, String)" access="pub" jdoc="">
				<comm cntt="First is default"/>
				<param name="choice"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ChoiceConfigParameter.removeChoice(Object)" access="pub" jdoc="">
				<param name="choice"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ChoiceConfigParameter.choices()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.config.ChoiceConfigParameter.getDescription(String)" access="pub" jdoc="">
				<param name="choice"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ChoiceConfigParameter.isPossibleValue(Object)" access="pub" jdoc="">
				<comm cntt="System.err.println((String)value + &amp;quot; &amp;lt;&amp;gt; &amp;quot; + (String)o);"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ChoiceConfigParameter.getType()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.config.ConfigStore" intfc="n" abs="y" inn="n" sloc="46" jdoc="This class is a generic storage for configuration parameters. Subclasses must implement setConfigRaw and getConfigRaw. @author Sebastian Schaffert @version">
			<field name="scheme" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.config.ConfigStore.ConfigStore(ConfigScheme)" access="pub" jdoc="">
				<param name="cs"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigStore.ConfigStore()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigStore.getConfigScheme()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigStore.getConfigKeys()" access="pub" jdoc="Fetch all keys of the current configuration.">
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigStore.getConfig(String)" access="pub" jdoc="Fetch the configuration associated with the specified key. @param key Identifier for the configuration">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigStore.getConfigRaw(String)" access="prot" jdoc="Access a configuration on a low level, e.g. access a file, make a SQL query, ... Will be called by getConfig. return null if undefined">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigStore.isConfigSet(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigStore.setConfig(String, String)" access="pub" jdoc="">
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigStore.setConfig(String, String, boolean, boolean)" access="pub" jdoc="Set a configuration &amp;quot;key&amp;quot; to the specified value. @param key Identifier for the configuration @paran value value to set">
				<comm cntt="System.err.println(&amp;quot;Key: &amp;quot;+key);"/>
				<comm cntt="System.err.println(&amp;quot;Value old: |&amp;quot;+getConfigRaw(key)+&amp;quot;|&amp;quot;);"/>
				<comm cntt="System.err.println(&amp;quot;Value new: |&amp;quot;+value+&amp;quot;|&amp;quot;);"/>
				<param name="key"/>
				<param name="value"/>
				<param name="filter"/>
				<param name="notify"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigStore.setConfigRaw(String, String, String, String)" access="pub" jdoc="Access a configuration on a low level, e.g. access a file, make a SQL query, ... Will be called by setConfig. return null if undefined">
				<param name="group"/>
				<param name="key"/>
				<param name="value"/>
				<param name="type"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigStore.addConfigurationListener(String, ConfigurationListener)" access="pub" jdoc="">
				<param name="key"/>
				<param name="l"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.config.CryptedStringConfigParameter" intfc="n" abs="n" inn="n" sloc="11" jdoc="@author Sebastian Schaffert @version">
			<mth name="/:net.wastl.webmail.config.CryptedStringConfigParameter.CryptedStringConfigParameter(String, String, String)" access="pub" jdoc="">
				<param name="name"/>
				<param name="def"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.CryptedStringConfigParameter.filter(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.CryptedStringConfigParameter.getType()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.config.ConfigYesNoParameter" intfc="n" abs="n" inn="n" sloc="10" jdoc="@author Sebastian Schaffert @version">
			<mth name="/:net.wastl.webmail.config.ConfigYesNoParameter.ConfigYesNoParameter(String, String)" access="pub" jdoc="">
				<param name="name"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigYesNoParameter.getType()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.config.ConfigParameter" intfc="n" abs="y" inn="n" sloc="45" jdoc="An abstraction for a configuration parameter. Subclasses must implement a method that checks whether a specific value is correct for this parameter. ConfigParameters may have ConfigurationListeners that work much like the Listeners in the Java AWT. All listeners get informed if the value of the parameter has changed. Each ConfigParameter has a corresponding (unique) key, a default value (if not yet changed by the user) and a short description for the administrator about what the parameter means. This is a scheme only, however, ConfigParameters just describe the behaviour of certain keys in the WebMail configuration, they don&amp;apos;t actually store the value itself.">
			<field name="key" access="prot" jdoc=""/>
			<field name="def_value" access="prot" jdoc=""/>
			<field name="desc" access="prot" jdoc=""/>
			<field name="listeners" access="prot" jdoc=""/>
			<field name="group" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.config.ConfigParameter.ConfigParameter(String, Object, String)" access="pub" jdoc="Create a new parameter. @param name Unique key of this parameter @param def Default value for this parameter @param desc Description for this parameter">
				<param name="name"/>
				<param name="def"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigParameter.setGroup(String)" access="pub" jdoc="">
				<param name="g"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigParameter.getKey()" access="pub" jdoc="Return the key of this parameter.">
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigParameter.getDefault()" access="pub" jdoc="Return the default value of this parameter.">
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigParameter.setDefault(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigParameter.getDescription()" access="pub" jdoc="Return the description for this parameter.">
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigParameter.addConfigurationListener(ConfigurationListener)" access="pub" jdoc="Add a ConfigurationListener for this object that will be informed if the parameter&amp;apos;s value changes.">
				<param name="l"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigParameter.getConfigurationListeners()" access="pub" jdoc="Get a list of all configuration listeners.">
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigParameter.filter(String)" access="pub" jdoc="Put through some sort of filter. This method is called when a String value for this parameter is set. Subclasses should implement this, if they want to change the behaviour @see CryptedStringConfigParameter">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigParameter.isPossibleValue(Object)" access="pub" jdoc="Check whether the value that is passed as the parameter is a valid value for this ConfigParameter @see ChoiceConfigParameter">
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigParameter.getType()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.config.ConfigParameter.getGroup()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.config.StringConfigParameter" intfc="n" abs="n" inn="n" sloc="15" jdoc="Scheme of a parameter that can take String values">
			<mth name="/:net.wastl.webmail.config.StringConfigParameter.StringConfigParameter(String, String, String)" access="pub" jdoc="">
				<param name="name"/>
				<param name="def"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.StringConfigParameter.isPossibleValue(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.StringConfigParameter.getType()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.config.UnchangeableStringConfigParameter" intfc="n" abs="n" inn="n" sloc="11" jdoc="This is a parameter that cannot be changed. Created: Tue Oct 19 16:16:18 1999 @author Sebastian Schaffert @version">
			<mth name="/:net.wastl.webmail.config.UnchangeableStringConfigParameter.UnchangeableStringConfigParameter(String, String, String)" access="pub" jdoc="">
				<param name="name"/>
				<param name="def"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.UnchangeableStringConfigParameter.isPossibleValue(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.UnchangeableStringConfigParameter.getType()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.config.IntegerConfigParameter" intfc="n" abs="n" inn="n" sloc="16" jdoc="@author Sebastian Schaffert @version">
			<mth name="/:net.wastl.webmail.config.IntegerConfigParameter.IntegerConfigParameter(String, String, String)" access="pub" jdoc="">
				<param name="name"/>
				<param name="def"/>
				<param name="desc"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.IntegerConfigParameter.isPossibleValue(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.config.IntegerConfigParameter.getType()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.config.ConfigurationListener" intfc="y" abs="n" inn="n" sloc="3" jdoc="Objects that register configuration parameters should implement this. They will then be notified whenever their configuration changes.">
			<mth name="/:net.wastl.webmail.config.ConfigurationListener.notifyConfigurationChange(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/:net.wastl.webmail.debug">
		<class name="/:net.wastl.webmail.debug.ErrorHandler" intfc="n" abs="n" inn="n" sloc="5" jdoc="ErrorHandler.java Created: Tue Feb 2 12:24:40 1999 @author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<mth name="/:net.wastl.webmail.debug.ErrorHandler.ErrorHandler(Exception)" access="pub" jdoc="">
				<comm cntt="System.err.println(ex.getMessage());;"/>
				<param name="ex"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/:net.wastl.webmail.exceptions">
		<class name="/:net.wastl.webmail.exceptions.BinaryNotFoundException" intfc="n" abs="n" inn="n" sloc="8" jdoc="BinaryNotFoundException.java Created: Thu May 4 15:38:04 2000 @author Sebastian Schaffert @version">
			<mth name="/:net.wastl.webmail.exceptions.BinaryNotFoundException.BinaryNotFoundException()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.exceptions.BinaryNotFoundException.BinaryNotFoundException(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.exceptions.CreateUserDataException" intfc="n" abs="n" inn="n" sloc="8" jdoc="An error occured while creating the userdata for a user. @author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<mth name="/:net.wastl.webmail.exceptions.CreateUserDataException.CreateUserDataException()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.exceptions.CreateUserDataException.CreateUserDataException(String, String, String)" access="pub" jdoc="">
				<param name="s"/>
				<param name="user"/>
				<param name="domain"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.exceptions.TimeoutException" intfc="n" abs="n" inn="n" sloc="5" jdoc="@author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<mth name="/:net.wastl.webmail.exceptions.TimeoutException.TimeoutException()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.exceptions.WebMailException" intfc="n" abs="n" inn="n" sloc="31" jdoc="This is a generic WebMail Exception. @author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<field name="nested" access="pub" jdoc=""/>
			<mth name="/:net.wastl.webmail.exceptions.WebMailException.WebMailException()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.exceptions.WebMailException.WebMailException(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.exceptions.WebMailException.WebMailException(Exception)" access="pub" jdoc="">
				<param name="ex"/>
			</mth>
			<mth name="/:net.wastl.webmail.exceptions.WebMailException.printStackTrace(PrintStream)" access="pub" jdoc="">
				<param name="ps"/>
			</mth>
			<mth name="/:net.wastl.webmail.exceptions.WebMailException.printStackTrace(PrintWriter)" access="pub" jdoc="">
				<param name="ps"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.exceptions.NoSuchFolderException" intfc="n" abs="n" inn="n" sloc="8" jdoc="@author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<mth name="/:net.wastl.webmail.exceptions.NoSuchFolderException.NoSuchFolderException()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.exceptions.NoSuchFolderException.NoSuchFolderException(String)" access="pub" jdoc="">
				<param name="msg"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.exceptions.InvalidDataException" intfc="n" abs="n" inn="n" sloc="8" jdoc="@author Sebastian Schaffert @version">
			<mth name="/:net.wastl.webmail.exceptions.InvalidDataException.InvalidDataException()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.exceptions.InvalidDataException.InvalidDataException(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.exceptions.DocumentNotFoundException" intfc="n" abs="n" inn="n" sloc="8" jdoc="DocumentNotFoundException.java Created: Sun Feb 7 12:53:14 1999 @author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<mth name="/:net.wastl.webmail.exceptions.DocumentNotFoundException.DocumentNotFoundException()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.exceptions.DocumentNotFoundException.DocumentNotFoundException(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.exceptions.StylesheetNotFoundException" intfc="n" abs="n" inn="n" sloc="8" jdoc="StylesheetNotFoundException.java Created: Thu May 4 15:37:15 2000 @author Sebastian Schaffert @version">
			<mth name="/:net.wastl.webmail.exceptions.StylesheetNotFoundException.StylesheetNotFoundException()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.exceptions.StylesheetNotFoundException.StylesheetNotFoundException(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.exceptions.InvalidPasswordException" intfc="n" abs="n" inn="n" sloc="8" jdoc="@author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<mth name="/:net.wastl.webmail.exceptions.InvalidPasswordException.InvalidPasswordException()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.exceptions.InvalidPasswordException.InvalidPasswordException(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.exceptions.UserDataException" intfc="n" abs="n" inn="n" sloc="18" jdoc="An error corresponding to some user&amp;apos;s data @author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<field name="user" access="pub" jdoc=""/>
			<field name="domain" access="pub" jdoc=""/>
			<mth name="/:net.wastl.webmail.exceptions.UserDataException.UserDataException()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.exceptions.UserDataException.UserDataException(String, String, String)" access="pub" jdoc="">
				<param name="s"/>
				<param name="user"/>
				<param name="domain"/>
			</mth>
			<mth name="/:net.wastl.webmail.exceptions.UserDataException.getUser()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.exceptions.UserDataException.getDomain()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/:net.wastl.webmail.logger">
		<class name="/:net.wastl.webmail.logger.ServletLogger" intfc="n" abs="n" inn="n" sloc="53" jdoc="This logger implementation logs all WebMail logfile entries using the Servlet Container&amp;apos;s log facility. @author Sebastian Schaffert @version">
			<field name="parent" access="prot" jdoc=""/>
			<field name="store" access="prot" jdoc=""/>
			<field name="loglevel" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.logger.ServletLogger.ServletLogger(WebMailServer, Storage)" access="pub" jdoc="">
				<param name="parent"/>
				<param name="st"/>
			</mth>
			<mth name="/:net.wastl.webmail.logger.ServletLogger.initLog()" access="prot" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.logger.ServletLogger.notifyConfigurationChange(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.logger.ServletLogger.log(int, String)" access="pub" jdoc="">
				<param name="level"/>
				<param name="message"/>
			</mth>
			<mth name="/:net.wastl.webmail.logger.ServletLogger.log(int, Exception)" access="pub" jdoc="">
				<param name="level"/>
				<param name="ex"/>
			</mth>
			<mth name="/:net.wastl.webmail.logger.ServletLogger.shutdown()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.logger.FileLogger" intfc="n" abs="n" inn="n" sloc="122" jdoc="This is an asynchronous Logger thread that accepts log messages to a Queue and writes them to the logfile from time to time (all 5 seconds). @author Sebastian Schaffert @version">
			<field name="df" access="priv" jdoc=""/>
			<field name="logout" access="prot" jdoc=""/>
			<field name="loglevel" access="prot" jdoc=""/>
			<field name="queue" access="prot" jdoc=""/>
			<field name="time_queue" access="prot" jdoc=""/>
			<field name="do_shutdown" access="prot" jdoc=""/>
			<field name="parent" access="prot" jdoc=""/>
			<field name="store" access="prot" jdoc=""/>
			<field name="interval" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.logger.FileLogger.FileLogger(WebMailServer, Storage)" access="pub" jdoc="">
				<param name="parent"/>
				<param name="st"/>
			</mth>
			<mth name="/:net.wastl.webmail.logger.FileLogger.initLog()" access="prot" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.logger.FileLogger.formatDate(long)" access="prot" jdoc="">
				<param name="date"/>
			</mth>
			<mth name="/:net.wastl.webmail.logger.FileLogger.writeMessage(long, String)" access="prot" jdoc="">
				<param name="time"/>
				<param name="message"/>
			</mth>
			<mth name="/:net.wastl.webmail.logger.FileLogger.log(int, String)" access="pub" jdoc="">
				<param name="level"/>
				<param name="message"/>
			</mth>
			<mth name="/:net.wastl.webmail.logger.FileLogger.log(int, Exception)" access="pub" jdoc="">
				<param name="level"/>
				<param name="ex"/>
			</mth>
			<mth name="/:net.wastl.webmail.logger.FileLogger.flush()" access="prot" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.logger.FileLogger.queue(long, String)" access="pub" jdoc="">
				<param name="time"/>
				<param name="message"/>
			</mth>
			<mth name="/:net.wastl.webmail.logger.FileLogger.notifyConfigurationChange(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.logger.FileLogger.shutdown()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.logger.FileLogger.run()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/:net.wastl.webmail.misc">
		<class name="/:net.wastl.webmail.misc.TEA" intfc="n" abs="n" inn="n" sloc="196" jdoc="Tiny Encryption Algorithm. &amp;lt;P&amp;gt; (The following description is from the web page for the C and Assembler source code at &amp;lt;A HREF=&amp;quot;http: vader.brad.ac.uk tea tea.shtml&amp;quot;&amp;gt; University of Bradford Yorkshire, England - The Cryptography &amp; Computer Communications Security Group&amp;lt; A&amp;gt;) The description is used with the permission of the authors, Dr S J Shepherd and D A G Gillies. &amp;lt;P&amp;gt; The Tiny Encryption Algorithm is one of the fastest and most efficient cryptographic algorithms in existence. It was developed by David Wheeler and Roger Needham at the Computer Laboratory of Cambridge University. It is a Feistel cipher which uses operations from mixed (orthogonal) algebraic groups - XORs and additions in this case. It encrypts 64 data bits at a time using a 128-bit key. It seems highly resistant to differential cryptanalysis, and achieves complete diffusion (where a one bit difference in the plaintext will cause approximately 32 bit differences in the ciphertext) after only six rounds. Performance on a modern desktop computer or workstation is very impressive. &amp;lt;P&amp;gt; TEA takes 64 bits of data in v[0] and v[1], and 128 bits of key in k[0] - k[3]. The result is returned in w[0] and w[1]. Returning the result separately makes implementation of cipher modes other than Electronic Code Book a little bit easier. &amp;lt;P&amp;gt; TEA can be operated in any of the modes of DES. &amp;lt;P&amp;gt; n is the number of iterations. 32 is ample, 16 is sufficient, as few as eight should be OK for most applications, especially ones where the data age quickly (real-time video, for example). The algorithm achieves good dispersion after six iterations. The iteration count can be made variable if required. &amp;lt;P&amp;gt; Note this algorithm is optimised for 32-bit CPUs with fast shift capabilities. It can very easily be ported to assembly language on most CPUs. &amp;lt;P&amp;gt; delta is chosen to be the Golden ratio ((5 4)1 2 - 1 2 ~ 0.618034) multiplied by 232. On entry to decipher(), sum is set to be delta n. Which way round you call the functions is arbitrary: DK(EK(P)) = EK(DK(P)) where EK and DK are encryption and decryption under key K respectively. &amp;lt;P&amp;gt; Translator&amp;apos;s notes: &amp;lt;UL&amp;gt; &amp;lt;LI&amp;gt; Although the &amp;lt;I&amp;gt;this algorithm is optimised for 32-bit CPUs with fast shift capabilities&amp;lt; I&amp;gt; Java manages to throw it all away by not providing unsigned values resulting in the excessive use of AND&amp;apos;s to prevent sign extension on promotion of a byte to an integer. &amp;lt; LI&amp;gt; &amp;lt;P&amp;gt; &amp;lt;LI&amp;gt; The following description is taken from the Mach5 Software cryptography archives at &amp;lt;A HREF=&amp;quot;http: www.mach5.com crypto &amp;quot;&amp;gt;www.mach5.com crypto&amp;lt; A&amp;gt;. &amp;lt;p&amp;gt;&amp;lt;font face=&amp;quot;Arial&amp;quot; size=&amp;quot;4&amp;quot;&amp;gt;Tiny Encryption Algorithm (TEA)&amp;lt; font&amp;gt;&amp;lt;br&amp;gt; &amp;lt;font size=&amp;quot;3&amp;quot; face=&amp;quot;Arial&amp;quot;&amp;gt;TEA is a cryptographic algorithm designed to minimize memory footprint, and maximize speed. However, the cryptographers from &amp;lt;a href=&amp;quot;http: www.counterpane.com&amp;quot;&amp;gt;Counterpane Systems&amp;lt; a&amp;gt; have &amp;lt;a href=&amp;quot;http: www.cs.berkeley.edu ~daw keysched-crypto96.ps&amp;quot;&amp;gt;discovered three related-key attacks &amp;lt; a&amp;gt;on TEA, the best of which requires only 223 chosen plaintexts and one related key query. The problems arise from the overly simple key schedule. Each TEA key can be found to have three other equivalent keys, as described in &amp;lt;a href=&amp;quot;http: www.cs.berkeley.edu ~daw keysched-icics97.ps&amp;quot;&amp;gt;a paper&amp;lt; a&amp;gt; by &amp;lt;a href=&amp;quot;http: www.cs.berkeley.edu ~daw &amp;quot;&amp;gt;David Wagner&amp;lt; a&amp;gt;, John Kelsey, and &amp;lt;a href=&amp;quot;http: www.counterpane.com schneier.html&amp;quot;&amp;gt;Bruce Schneier&amp;lt; a&amp;gt;. This precludes the possibility of using TEA as a hash function. Roger Needham and David Wheeler have proposed &amp;lt;a href=&amp;quot;http: www.cl.cam.ac.uk ftp users djw3 xtea.ps&amp;quot;&amp;gt;extensions to TEA&amp;lt; a&amp;gt; that counters the above attacks.&amp;lt; font&amp;gt;&amp;lt; p&amp;gt; &amp;lt; LI&amp;gt; &amp;lt; UL&amp;gt; &amp;lt;P&amp;gt; Example of use: &amp;lt;PRE&amp;gt; byte key[] = new BigInteger(&amp;quot;39e858f86df9b909a8c87cb8d9ad599&amp;quot;, 16).toByteArray(); TEA t = new TEA(key); &amp;lt;BR&amp;gt; String src = &amp;quot;hello world!&amp;quot;; System.out.println(&amp;quot;input = &amp;quot; + src); byte plainSource[] = src.getBytes(); int enc[] = t.encode(plainSource, plainSource.length); System.out.println(t.padding() + &amp;quot; bytes added as padding.&amp;quot;); byte dec[] = t.decode(enc); System.out.println(&amp;quot;output = &amp;quot; + new String(dec)); &amp;lt; PRE&amp;gt; @author Translated by Michael Lecuyer (mjl@theorem.com) from the C Language. @version 1.0 Sep 8, 1998 @since JDK1.1">
			<comm cntt="The 128 bit key."/>
			<comm cntt="original key as found"/>
			<comm cntt="amount of padding added in byte --&amp;gt; integer conversion."/>
			<comm cntt="Display some bytes in HEX."/>
			<comm cntt=""/>
			<field name="_key" access="priv" jdoc=""/>
			<field name="_keyBytes" access="priv" jdoc=""/>
			<field name="_padding" access="priv" jdoc=""/>
			<mth name="/:net.wastl.webmail.misc.TEA.main(String)" access="pub" jdoc="Encodes and decodes &amp;quot;Hello world!&amp;quot; for your personal pleasure.">
				<comm cntt="A simple test of TEA."/>
				<param name="args"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.TEA.TEA(byte)" access="pub" jdoc="Accepts key for enciphering deciphering. @throws ArrayIndexOutOfBoundsException if the key isn&amp;apos;t the correct length. @param key 128 bit (16 byte) key.">
				<comm cntt="Incorrect key length throws exception."/>
				<comm cntt="save for toString."/>
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.TEA.toString()" access="pub" jdoc="Representation of TEA class">
			</mth>
			<mth name="/:net.wastl.webmail.misc.TEA.encipher(int)" access="pub" jdoc="Encipher two &amp;lt;code&amp;gt;int&amp;lt; code&amp;gt;s. Replaces the original contents of the parameters with the results. The integers are usually created from 8 bytes. The usual way to collect bytes to the int array is: &amp;lt;PRE&amp;gt; byte ba[] = { .... }; int v[] = new int[2]; v[0] = (ba[j] &amp;lt;&amp;lt; 24 ) | (((ba[j+1])&amp;0xff) &amp;lt;&amp;lt; 16) | (((ba[j+2])&amp;0xff) &amp;lt;&amp;lt; 8) | ((ba[j+3])&amp;0xff); v[1] = (ba[j+4] &amp;lt;&amp;lt; 24 ) | (((ba[j+5])&amp;0xff) &amp;lt;&amp;lt; 16) | (((ba[j+6])&amp;0xff) &amp;lt;&amp;lt; 8) | ((ba[j+7])&amp;0xff); v = encipher(v); &amp;lt; PRE&amp;gt; @param v two &amp;lt;code&amp;gt;int&amp;lt; code&amp;gt; array as input. @return array of two &amp;lt;code&amp;gt;int&amp;lt; code&amp;gt;s, enciphered.">
				<param name="v"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.TEA.decipher(int)" access="pub" jdoc="Decipher two &amp;lt;code&amp;gt;int&amp;lt; code&amp;gt;s. Replaces the original contents of the parameters with the results. The integers are usually decocted to 8 bytes. The decoction of the &amp;lt;code&amp;gt;int&amp;lt; code&amp;gt;s to bytes can be done this way. &amp;lt;PRE&amp;gt; int x[] = decipher(ins); outb[j] = (byte)(x[0] &amp;gt;&amp;gt;&amp;gt; 24); outb[j+1] = (byte)(x[0] &amp;gt;&amp;gt;&amp;gt; 16); outb[j+2] = (byte)(x[0] &amp;gt;&amp;gt;&amp;gt; 8); outb[j+3] = (byte)(x[0]); outb[j+4] = (byte)(x[1] &amp;gt;&amp;gt;&amp;gt; 24); outb[j+5] = (byte)(x[1] &amp;gt;&amp;gt;&amp;gt; 16); outb[j+6] = (byte)(x[1] &amp;gt;&amp;gt;&amp;gt; 8); outb[j+7] = (byte)(x[1]); &amp;lt; PRE&amp;gt; @param v &amp;lt;code&amp;gt;int&amp;lt; code&amp;gt; array of 2 @return deciphered &amp;lt;code&amp;gt;int&amp;lt; code&amp;gt; array of 2">
				<comm cntt="sum = delta&amp;lt;&amp;lt;5, in general sum = delta n"/>
				<param name="v"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.TEA.encipher(byte)" access="pub" jdoc="Encipher two &amp;lt;code&amp;gt;bytes&amp;lt; code&amp;gt;s. @param v &amp;lt;code&amp;gt;byte&amp;lt; code&amp;gt; array of 2 @return enciphered &amp;lt;code&amp;gt;byte&amp;lt; code&amp;gt; array of 2">
				<param name="v"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.TEA.decipher(byte)" access="pub" jdoc="Decipher two &amp;lt;code&amp;gt;bytes&amp;lt; code&amp;gt;s. @param v &amp;lt;code&amp;gt;byte&amp;lt; code&amp;gt; array of 2 @return decipherd &amp;lt;code&amp;gt;byte&amp;lt; code&amp;gt; array of 2">
				<comm cntt="sum = delta&amp;lt;&amp;lt;5, in general sum = delta n"/>
				<param name="v"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.TEA.encode(byte, int)" access="pub" jdoc="Byte wrapper for encoding. Converts bytes to ints. Padding will be added if required. @param b incoming &amp;lt;code&amp;gt;byte&amp;lt; code&amp;gt; array @param byte count @return integer conversion array, possibly with padding. @see #padding">
				<comm cntt="Add some padding, if necessary."/>
				<comm cntt="Java&amp;apos;s unforgivable lack of unsigneds causes more bit"/>
				<comm cntt="twiddling than this language really needs."/>
				<param name="b"/>
				<param name="count"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.TEA.padding()" access="pub" jdoc="Report how much padding was done in the last encode. @return bytes of padding added @see #encode">
			</mth>
			<mth name="/:net.wastl.webmail.misc.TEA.decode(byte, int)" access="pub" jdoc="Convert a byte array to ints and then decode. There may be some padding at the end of the byte array from the previous encode operation. @param b bytes to decode @param count number of bytes in the array to decode @return &amp;lt;code&amp;gt;byte&amp;lt; code&amp;gt; array of decoded bytes.">
				<param name="b"/>
				<param name="count"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.TEA.decode(int)" access="pub" jdoc="Decode an integer array. There may be some padding at the end of the byte array from the previous encode operation. @param b bytes to decode @param count number of bytes in the array to decode @return &amp;lt;code&amp;gt;byte&amp;lt; code&amp;gt; array of decoded bytes.">
				<comm cntt="create the large number and start stripping ints out, two at a time."/>
				<comm cntt="decipher all the ints."/>
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.TEA.dumpBytes(byte)" access="priv" jdoc="">
				<param name="b"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.misc.JavaScriptCleaner" intfc="n" abs="n" inn="n" sloc="39" jdoc="JavaScriptCleaner.java This class removes hopefully all of the possible malicious code from HTML messages like &amp;lt;SCRIPT&amp;gt; tags, javascript: hrefs and onMouseOver, ...; Furthermore, we should consider removing all IMG tags as they might be used to call CGIs Created: Mon Jan 1 15:20:54 2001 @author Sebastian Schaffert @version">
			<field name="d" access="pub" jdoc=""/>
			<mth name="/:net.wastl.webmail.misc.JavaScriptCleaner.JavaScriptCleaner(Document)" access="pub" jdoc="">
				<param name="d"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.JavaScriptCleaner.walkTree(Node)" access="prot" jdoc="">
				<comm cntt="First we check for element types that shouldn&amp;apos;t be sent to the user. For that, we add an attribute &amp;quot;malicious&amp;quot; that can be handled by the XSLT stylesheets that display the message."/>
				<comm cntt="What we also really don&amp;apos;t like in HTML messages are FORMs!"/>
				<comm cntt="Now we search the attribute list for attributes that may potentially be used maliciously. These will be: - href: check for a String containing &amp;quot;javascript&amp;quot; - onXXX events: if they exist, the link will be marked &amp;quot;malicious&amp;quot;."/>
				<comm cntt="First case: look for hrefs containing &amp;quot;javascript&amp;quot;"/>
				<comm cntt="All elements containing &amp;quot;onXXX&amp;quot; tags get the malicious attribute immediately"/>
				<comm cntt="Do that recursively"/>
				<param name="node"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.misc.StreamConnector" intfc="n" abs="n" inn="n" sloc="28" jdoc="Used to write to a OutputStream in a separate Thread to avoid blocking. @author Sebastian Schaffert @version">
			<field name="in" access="pub" jdoc=""/>
			<field name="b" access="pub" jdoc=""/>
			<field name="size" access="pub" jdoc=""/>
			<field name="ready" access="pub" jdoc=""/>
			<mth name="/:net.wastl.webmail.misc.StreamConnector.StreamConnector(InputStream, int)" access="pub" jdoc="">
				<param name="sin"/>
				<param name="size"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.StreamConnector.run()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.StreamConnector.getResult()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.misc.MD5State" intfc="n" abs="n" inn="n" sloc="25" jdoc="Contains internal state of the MD5 class">
			<field name="state" access="pub" jdoc="128-byte state"/>
			<field name="count" access="pub" jdoc="64-bit character count (could be true Java long?)"/>
			<field name="buffer" access="pub" jdoc="64-byte buffer (512 bits) for storing to-be-hashed characters"/>
			<mth name="/:net.wastl.webmail.misc.MD5State.MD5State()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5State.MD5State(MD5State)" access="pub" jdoc="Create this State as a copy of another state">
				<param name="from"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.misc.MD5" intfc="n" abs="n" inn="n" sloc="234" jdoc="Implementation of RSA&amp;apos;s MD5 hash generator @version $Revision: 1.1.1.1 $ @author Santeri Paavolainen &amp;lt;sjpaavol@cc.helsinki.fi&amp;gt;">
			<comm cntt="I wonder how many loops and hoops you&amp;apos;ll have to go through to get unsigned add for longs in java"/>
			<comm cntt="Update()s for other datatypes than byte[] also. Update(byte[], int) is only the main driver."/>
			<field name="state" access="pub" jdoc="MD5 state"/>
			<field name="finals" access="pub" jdoc="If Final() has been called, finals is set to the current finals state. Any Update() causes this to be set to null."/>
			<field name="padding" access="pub" jdoc="Padding for Final()"/>
			<mth name="/:net.wastl.webmail.misc.MD5.Init()" access="pub" jdoc="Initialize MD5 internal state (object can be reused just by calling Init() after every Final()">
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.MD5()" access="pub" jdoc="Class constructor">
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.MD5(Object)" access="pub" jdoc="Initialize class, and update hash with ob.toString() @param ob Object, ob.toString() is used to update hash after initialization">
				<param name="ob"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.rotate_left(int, int)" access="priv" jdoc="">
				<param name="x"/>
				<param name="n"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.uadd(int, int)" access="priv" jdoc="">
				<param name="a"/>
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.uadd(int, int, int)" access="priv" jdoc="">
				<param name="a"/>
				<param name="b"/>
				<param name="c"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.uadd(int, int, int, int)" access="priv" jdoc="">
				<param name="a"/>
				<param name="b"/>
				<param name="c"/>
				<param name="d"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.FF(int, int, int, int, int, int, int)" access="priv" jdoc="">
				<param name="a"/>
				<param name="b"/>
				<param name="c"/>
				<param name="d"/>
				<param name="x"/>
				<param name="s"/>
				<param name="ac"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.GG(int, int, int, int, int, int, int)" access="priv" jdoc="">
				<param name="a"/>
				<param name="b"/>
				<param name="c"/>
				<param name="d"/>
				<param name="x"/>
				<param name="s"/>
				<param name="ac"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.HH(int, int, int, int, int, int, int)" access="priv" jdoc="">
				<param name="a"/>
				<param name="b"/>
				<param name="c"/>
				<param name="d"/>
				<param name="x"/>
				<param name="s"/>
				<param name="ac"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.II(int, int, int, int, int, int, int)" access="priv" jdoc="">
				<param name="a"/>
				<param name="b"/>
				<param name="c"/>
				<param name="d"/>
				<param name="x"/>
				<param name="s"/>
				<param name="ac"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.Decode(byte, int, int)" access="priv" jdoc="">
				<comm cntt="System.out.println(&amp;quot;out[&amp;quot; + i + &amp;quot;] = \t&amp;quot; + ((int) buffer[j + 0 + shift] &amp; 0xff) + &amp;quot;\t|\t&amp;quot; + ((int) buffer[j + 1 + shift] &amp; 0xff) + &amp;quot;\t|\t&amp;quot; + ((int) buffer[j + 2 + shift] &amp; 0xff) + &amp;quot;\t|\t&amp;quot; + ((int) buffer[j + 3 + shift] &amp; 0xff));"/>
				<param name="buffer"/>
				<param name="len"/>
				<param name="shift"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.Transform(MD5State, byte, int)" access="priv" jdoc="">
				<comm cntt="Round 1"/>
				<comm cntt="1"/>
				<comm cntt="2"/>
				<comm cntt="3"/>
				<comm cntt="4"/>
				<comm cntt="5"/>
				<comm cntt="6"/>
				<comm cntt="7"/>
				<comm cntt="8"/>
				<comm cntt="9"/>
				<comm cntt="10"/>
				<comm cntt="11"/>
				<comm cntt="12"/>
				<comm cntt="13"/>
				<comm cntt="14"/>
				<comm cntt="15"/>
				<comm cntt="16"/>
				<comm cntt="Round 2"/>
				<comm cntt="17"/>
				<comm cntt="18"/>
				<comm cntt="19"/>
				<comm cntt="20"/>
				<comm cntt="21"/>
				<comm cntt="22"/>
				<comm cntt="23"/>
				<comm cntt="24"/>
				<comm cntt="25"/>
				<comm cntt="26"/>
				<comm cntt="27"/>
				<comm cntt="28"/>
				<comm cntt="29"/>
				<comm cntt="30"/>
				<comm cntt="31"/>
				<comm cntt="32"/>
				<comm cntt="Round 3"/>
				<comm cntt="33"/>
				<comm cntt="34"/>
				<comm cntt="35"/>
				<comm cntt="36"/>
				<comm cntt="37"/>
				<comm cntt="38"/>
				<comm cntt="39"/>
				<comm cntt="40"/>
				<comm cntt="41"/>
				<comm cntt="42"/>
				<comm cntt="43"/>
				<comm cntt="44"/>
				<comm cntt="45"/>
				<comm cntt="46"/>
				<comm cntt="47"/>
				<comm cntt="48"/>
				<comm cntt="Round 4"/>
				<comm cntt="49"/>
				<comm cntt="50"/>
				<comm cntt="51"/>
				<comm cntt="52"/>
				<comm cntt="53"/>
				<comm cntt="54"/>
				<comm cntt="55"/>
				<comm cntt="56"/>
				<comm cntt="57"/>
				<comm cntt="58"/>
				<comm cntt="59"/>
				<comm cntt="60"/>
				<comm cntt="61"/>
				<comm cntt="62"/>
				<comm cntt="63"/>
				<comm cntt="64"/>
				<param name="state"/>
				<param name="buffer"/>
				<param name="shift"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.Update(MD5State, byte, int, int)" access="pub" jdoc="Updates hash with the bytebuffer given (using at maximum length bytes from that buffer) @param state Which state is updated @param buffer Array of bytes to be hashed @param offset Offset to buffer array @param length Use at maximum `length&amp;apos; bytes (absolute maximum is buffer.length)">
				<comm cntt="System.out.print(&amp;quot;Offset = &amp;quot; + offset + &amp;quot;\tLength = &amp;quot; + length + &amp;quot;\t&amp;quot;); System.out.print(&amp;quot;Buffer = &amp;quot;); for (i = 0; i &amp;lt; buffer.length; i++) System.out.print((int) (buffer[i] &amp; 0xff) + &amp;quot; &amp;quot;); System.out.print(&amp;quot;\n&amp;quot;);"/>
				<comm cntt="Length can be told to be shorter, but not inter"/>
				<comm cntt="compute number of bytes mod 64"/>
				<comm cntt="buffer remaining input"/>
				<param name="stat"/>
				<param name="buffer"/>
				<param name="offset"/>
				<param name="length"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.Update(byte, int, int)" access="pub" jdoc="Plain update, updates this object">
				<param name="buffer"/>
				<param name="offset"/>
				<param name="length"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.Update(byte, int)" access="pub" jdoc="">
				<param name="buffer"/>
				<param name="length"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.Update(byte)" access="pub" jdoc="Updates hash with given array of bytes @param buffer Array of bytes to use for updating the hash">
				<param name="buffer"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.Update(byte)" access="pub" jdoc="Updates hash with a single byte @param b Single byte to update the hash">
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.Update(String)" access="pub" jdoc="Update buffer with given string. @param s String to be update to hash (is used as s.getBytes())">
				<comm cntt="chars = new byte[s.length()];"/>
				<comm cntt="s.getBytes(0, s.length(), chars, 0);"/>
				<comm cntt="Should never happen"/>
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.Update(int)" access="pub" jdoc="Update buffer with a single integer (only &amp; 0xff part is used, as a byte) @param i Integer value, which is then converted to byte as i &amp; 0xff">
				<param name="i"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.Encode(int, int)" access="priv" jdoc="">
				<param name="input"/>
				<param name="len"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.Final()" access="pub" jdoc="Returns array of bytes (16 bytes) representing hash as of the current state of this object. Note: getting a hash does not invalidate the hash object, it only creates a copy of the real state which is finalized. @return Array of 16 bytes, the hash of all updated bytes">
				<comm cntt=""/>
				<comm cntt="Update() sets finalds to null"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.asHex(byte)" access="pub" jdoc="Turns array of bytes into string representing each byte as unsigned hex number. @param hash Array of bytes to convert to hex-string @return Generated hex string">
				<param name="hash"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.MD5.asHex()" access="pub" jdoc="Returns 32-character hex representation of this objects hash @return String of this object&amp;apos;s hash">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.misc.ByteStore" intfc="n" abs="n" inn="n" sloc="75" jdoc="@author Sebastian Schaffert @version">
			<field name="bytes" access="pub" jdoc=""/>
			<field name="content_type" access="pub" jdoc=""/>
			<field name="content_encoding" access="pub" jdoc=""/>
			<field name="name" access="pub" jdoc=""/>
			<field name="description" access="pub" jdoc=""/>
			<mth name="/:net.wastl.webmail.misc.ByteStore.ByteStore(byte[])" access="pub" jdoc="">
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.ByteStore.setDescription(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.ByteStore.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.ByteStore.setContentType(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.ByteStore.getContentType()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.ByteStore.setContentEncoding(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.ByteStore.getContentEncoding()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.ByteStore.getBytes()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.ByteStore.setName(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.ByteStore.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.ByteStore.getSize()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.ByteStore.getBinaryFromIS(InputStream, int)" access="pub" jdoc="Create a ByteStore out of an InputStream">
				<comm cntt="System.err.print(&amp;quot;Reading ... &amp;quot;);"/>
				<comm cntt="System.err.print(lastread+&amp;quot; &amp;quot;);"/>
				<comm cntt="System.err.println();"/>
				<comm cntt="System.err.println(&amp;quot;new byte-array, size &amp;quot;+s2.length);"/>
				<param name="in"/>
				<param name="nr_bytes_to_read"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.misc.StringHeap" intfc="n" abs="n" inn="n" sloc="53" jdoc="This class is a simple heap structure for sorting Strings lexicographically. It is mainly used in WebMail for generating a sorted output of Hashkeys. @author Sebastian Schaffert @version">
			<field name="num_entries" access="pub" jdoc=""/>
			<field name="keys" access="pub" jdoc=""/>
			<mth name="/:net.wastl.webmail.misc.StringHeap.StringHeap(int)" access="pub" jdoc="">
				<param name="capacity"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.StringHeap.insert(String)" access="pub" jdoc="Insert a key value pair Reorganize Heap afterwards">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.StringHeap.next()" access="pub" jdoc="Return and delete the key with the lowest long value. Reorganize Heap.">
			</mth>
			<mth name="/:net.wastl.webmail.misc.StringHeap.isEmpty()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.StringHeap.remove(String)" access="pub" jdoc="Remove an Object from the Heap. Unfortunately not (yet) of very good complexity since we are doing a simple linear search here. @param key The key to remove from the heap">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.StringHeap.increase(int)" access="prot" jdoc="Lift an element in the heap structure Note that the cur_pos is actually one larger than the position in the array!">
				<param name="cur_pos"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.StringHeap.decrease(int)" access="prot" jdoc="Lower an element in the heap structure Note that the cur_pos is actually one larger than the position in the array!">
				<param name="cur_pos"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.misc.ExpireableCache" intfc="n" abs="n" inn="n" sloc="79" jdoc="This class represents a cache that automatically expires objects when a certain fillness factor is reached. @author Sebastian Schaffert @version">
			<comm cntt="Insert an element into the cache"/>
			<field name="cache" access="prot" jdoc=""/>
			<field name="timestamps" access="prot" jdoc=""/>
			<field name="capacity" access="prot" jdoc=""/>
			<field name="expire_factor" access="prot" jdoc=""/>
			<field name="hits" access="prot" jdoc=""/>
			<field name="misses" access="prot" jdoc=""/>
			<field name="shutdown" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache.ExpireableCache(int, float)" access="pub" jdoc="">
				<param name="capacity"/>
				<param name="expire_factor"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache.ExpireableCache(int)" access="pub" jdoc="">
				<param name="capacity"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache.put(Object, Object)" access="pub" jdoc="">
				<comm cntt="When the absolute capacity is exceeded, we must clean up"/>
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache.get(Object)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache.remove(Object)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache.expireOver()" access="prot" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache.setCapacity(int)" access="pub" jdoc="">
				<param name="size"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache.getCapacity()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache.getUsage()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache.getHits()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache.getMisses()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache.hit()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache.miss()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache.shutdown()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache.run()" access="pub" jdoc="">
			</mth>
		<class name="/:net.wastl.webmail.misc.ExpireableCache$MyHeap" intfc="n" abs="n" inn="y" sloc="56" jdoc="Implement a simple heap that just returns the smallest long variable Object key pair.">
			<field name="num_entries" access="pub" jdoc=""/>
			<field name="values" access="pub" jdoc=""/>
			<field name="keys" access="pub" jdoc=""/>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache$MyHeap.MyHeap(int)" access="pub" jdoc="">
				<param name="capacity"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache$MyHeap.insert(Object, long)" access="pub" jdoc="Insert a key value pair Reorganize Heap afterwards">
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache$MyHeap.next()" access="pub" jdoc="Return and delete the key with the lowest long value. Reorganize Heap.">
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache$MyHeap.remove(Object)" access="pub" jdoc="Remove an Object from the Heap. Unfortunately not (yet) of very good complexity since we are doing a simple linear search here. @param key The key to remove from the heap">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache$MyHeap.increase(int)" access="prot" jdoc="Lift an element in the heap structure Note that the cur_pos is actually one larger than the position in the array!">
				<param name="cur_pos"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.ExpireableCache$MyHeap.decrease(int)" access="prot" jdoc="Lower an element in the heap structure Note that the cur_pos is actually one larger than the position in the array!">
				<param name="cur_pos"/>
			</mth>
		</class>
		</class>
		<class name="/:net.wastl.webmail.misc.Queue" intfc="n" abs="n" inn="n" sloc="17" jdoc="@author Sebastian Schaffert @version">
			<field name="contents" access="pub" jdoc=""/>
			<mth name="/:net.wastl.webmail.misc.Queue.Queue()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.Queue.queue(Object)" access="pub" jdoc="">
				<param name="o"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.Queue.isEmpty()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.Queue.next()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.misc.AttributedExpireableCache" intfc="n" abs="n" inn="n" sloc="22" jdoc="AttributedExpireableCache.java Created: Tue Apr 25 14:57:22 2000 @author Sebastian Schaffert @version">
			<field name="attributes" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.misc.AttributedExpireableCache.AttributedExpireableCache(int, float)" access="pub" jdoc="">
				<param name="capacity"/>
				<param name="expire_factor"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.AttributedExpireableCache.AttributedExpireableCache(int)" access="pub" jdoc="">
				<param name="capacity"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.AttributedExpireableCache.put(Object, Object, Object)" access="pub" jdoc="">
				<param name="id"/>
				<param name="object"/>
				<param name="attribs"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.AttributedExpireableCache.getAttributes(Object)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.AttributedExpireableCache.remove(Object)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.misc.Helper" intfc="n" abs="n" inn="n" sloc="651" jdoc="Miscellaneous helper routines. Created: Tue Sep 7 13:03:44 1999 @author Sebastian Schaffert @version">
			<comm cntt="for C bits (numbered as per FIPS 46) 1 2 3 4 5 6"/>
			<comm cntt="for C bits (numbered as per FIPS 46) 7 8 10 11 12 13"/>
			<comm cntt="for C bits (numbered as per FIPS 46) 14 15 16 17 19 20"/>
			<comm cntt="for C bits (numbered as per FIPS 46) 21 23 24 26 27 28"/>
			<comm cntt="for D bits (numbered as per FIPS 46) 1 2 3 4 5 6"/>
			<comm cntt="for D bits (numbered as per FIPS 46) 8 9 11 12 13 14"/>
			<comm cntt="for D bits (numbered as per FIPS 46) 16 17 18 19 20 21"/>
			<comm cntt="for D bits (numbered as per FIPS 46) 22 23 24 25 27 28"/>
			<comm cntt="nibble 0"/>
			<comm cntt="nibble 1"/>
			<comm cntt="nibble 2"/>
			<comm cntt="nibble 3"/>
			<comm cntt="nibble 4"/>
			<comm cntt="nibble 5"/>
			<comm cntt="nibble 6"/>
			<comm cntt="nibble 7"/>
			<const name="ITERATIONS" access="priv" jdoc=""/>
			<const name="con_salt" access="priv" jdoc=""/>
			<const name="shifts2" access="priv" jdoc=""/>
			<const name="skb" access="priv" jdoc=""/>
			<const name="SPtrans" access="priv" jdoc=""/>
			<const name="cov_2char" access="priv" jdoc=""/>
			<field name="str_key" access="priv" jdoc=""/>
			<mth name="/:net.wastl.webmail.misc.Helper.Helper()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.misc.Helper.byteToUnsigned(byte)" access="priv" jdoc="">
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.Helper.fourBytesToInt(byte, int)" access="priv" jdoc="">
				<param name="b"/>
				<param name="offset"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.Helper.intToFourBytes(int, byte, int)" access="priv" jdoc="">
				<param name="iValue"/>
				<param name="b"/>
				<param name="offset"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.Helper.PERM_OP(int, int, int, int, int)" access="priv" jdoc="">
				<param name="a"/>
				<param name="b"/>
				<param name="n"/>
				<param name="m"/>
				<param name="results"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.Helper.HPERM_OP(int, int, int)" access="priv" jdoc="">
				<param name="a"/>
				<param name="n"/>
				<param name="m"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.Helper.des_set_key(byte)" access="priv" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.Helper.D_ENCRYPT(int, int, int, int, int, int)" access="priv" jdoc="">
				<param name="L"/>
				<param name="R"/>
				<param name="S"/>
				<param name="E0"/>
				<param name="E1"/>
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.Helper.body(int, int, int)" access="priv" jdoc="">
				<param name="schedule"/>
				<param name="Eswap0"/>
				<param name="Eswap1"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.Helper.crypt(String, String)" access="pub" jdoc="Perform a Unix crypt() operation">
				<param name="salt"/>
				<param name="original"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.Helper.joinAddress(Address[])" access="pub" jdoc="">
				<param name="a"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.Helper.calcSessionCode(InetAddress, HTTPRequestHeader)" access="pub" jdoc="Calculate session-ID for a session. @param a Adress of the remote host @param h Requestheader of the remote user agent @returns Session-ID">
				<param name="a"/>
				<param name="h"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.Helper.main(String[])" access="pub" jdoc="">
				<param name="args"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.Helper.encryptTEA(String)" access="pub" jdoc="">
				<comm cntt="System.err.println(&amp;quot;encryptTEA: Returning &amp;quot;+s);"/>
				<param name="src"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.Helper.decryptTEA(String)" access="pub" jdoc="">
				<comm cntt="System.err.println(&amp;quot;encryptTEA: Returning &amp;quot;+s);"/>
				<param name="src"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.Helper.getQuoteLevel(String)" access="pub" jdoc="Here we figure out which quote level this line has, simply by counting how many &amp;quot;&amp;gt;&amp;quot; are in front of the line, ignoring all whitespaces.">
				<param name="token"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.Helper.findFittingBreakPos(String, int)" access="prot" jdoc="">
				<param name="line"/>
				<param name="linesize"/>
			</mth>
			<mth name="/:net.wastl.webmail.misc.Helper.breakLine(String, int, int)" access="pub" jdoc="">
				<param name="line"/>
				<param name="linesize"/>
				<param name="quotelevel"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/:net.wastl.webmail.server">
		<class name="/:net.wastl.webmail.server.TimeableConnection" intfc="y" abs="n" inn="n" sloc="5" jdoc="@author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<mth name="/:net.wastl.webmail.server.TimeableConnection.getLastAccess()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.TimeableConnection.timeoutOccured()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.TimeableConnection.getTimeout()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.SystemCheck" intfc="n" abs="n" inn="n" sloc="75" jdoc="@author Sebastian Schaffert @version">
			<mth name="/:net.wastl.webmail.server.SystemCheck.SystemCheck(WebMailServer)" access="pub" jdoc="">
				<comm cntt="Test if the Java version might cause trouble"/>
				<comm cntt="System.exit(1);"/>
				<comm cntt="Test if the operating system is supported"/>
				<comm cntt="Check if we are running as root and issue a warning"/>
				<comm cntt="Security restriction prohibit reading the username, then we do not need to"/>
				<comm cntt="check for root anyway"/>
				<comm cntt="Check whether all WebMail system properties are defined"/>
				<comm cntt="checkPathProperty(parent,&amp;quot;webmail.plugin.path&amp;quot;);"/>
				<comm cntt="checkPathProperty(parent,&amp;quot;webmail.auth.path&amp;quot;);"/>
				<comm cntt="String s=regexp.substituteAll(line,&amp;quot;&amp;lt;!DOCTYPE SYSDATA SYSTEM \&amp;quot;file: &amp;quot;+"/>
				<comm cntt="parent.getProperty(&amp;quot;webmail.xml.path&amp;quot;)+"/>
				<comm cntt="System.getProperty(&amp;quot;file.separator&amp;quot;)+"/>
				<comm cntt="&amp;quot;sysdata.dtd&amp;quot;+&amp;quot;\&amp;quot;&amp;gt;&amp;quot;);"/>
				<comm cntt="System.err.println(s);"/>
				<comm cntt="ex.printStackTrace();"/>
				<comm cntt="throw new WebMailException(&amp;quot;Error parsing webmail.xml!&amp;quot;);"/>
				<param name="parent"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.SystemCheck.checkPathProperty(WebMailServer, String)" access="prot" jdoc="">
				<param name="parent"/>
				<param name="property"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.WebMailServlet" intfc="n" abs="n" inn="n" sloc="301" jdoc="This is WebMails main server. From here most parts will be administered. This is the servlet implementation of WebMail (introduced in 0.6.1) Created: Tue Feb 2 12:07:25 1999 @author Sebastian Schaffert @version $Revision: 1.2 $">
			<comm cntt="devink 7 15 2000 - service() now handles a TwoPassAuthenticationException, as does newSession() devink 9 24 2000 - remove TwoPassAuthenticationException stuff"/>
			<field name="srvlt_config" access="pub" jdoc=""/>
			<const name="chunk_size" access="priv" jdoc="Size of the chunks that are sent. Must not be greater than 65536"/>
			<field name="basepath" access="prot" jdoc=""/>
			<field name="imgbase" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.WebMailServlet()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.init(ServletConfig)" access="pub" jdoc="">
				<comm cntt="Issue a warning if webmail.basepath and or webmail.imagebase are not set."/>
				<comm cntt="Try to get the pathnames from the URL&amp;apos;s if no path was given in the initargs."/>
				<comm cntt="Call the WebMailServer&amp;apos;s initialization method and forward all Exceptions to the ServletServer"/>
				<param name="config"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.debugOut(String, Exception)" access="pub" jdoc="">
				<param name="msg"/>
				<param name="ex"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.getServletConfig()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.getServletContext()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.getServletInfo()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.destroy()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.service(ServletRequest, ServletResponse)" access="pub" jdoc="Handle a request to the WebMail servlet. This is the central method of the WebMailServlet. It first gathers all of the necessary information from the client, then either creates or gets a Session and executes the URL handler for the given path.">
				<comm cntt="Here we try to parse the MIME content that the Client sent in his POST since the JServ doesn&amp;apos;t do that for us:-( At least we can use the functionality provided by the standalone server where we need to parse the content ourself anyway."/>
				<comm cntt="First we try to use the Servlet API&amp;apos;s methods to parse the parameters. Unfortunately, it doesn&amp;apos;t know how to handle MIME multipart POSTs, so we will have to handle that ourselves"/>
				<comm cntt="First get all the parameters and set their values into http_header"/>
				<comm cntt="Then we set all the headers in http_header"/>
				<comm cntt="In Servlet API 2.2 we might want to fetch the attributes also, but this doesn&amp;apos;t work in API 2.0, so we leave it commented out"/>
				<comm cntt="enum2=req.getAttributeNames();"/>
				<comm cntt="while(enum2.hasMoreElements()) {"/>
				<comm cntt="String s=(String)enum2.nextElement();"/>
				<comm cntt="getStorage().log(Storage.LOG_INFO,&amp;quot;Attribute &amp;quot;+s);"/>
				<comm cntt="}"/>
				<comm cntt="Now let&amp;apos;s try to handle multipart form-data posts"/>
				<comm cntt="Find out about the session id"/>
				<comm cntt="If the user was logging on, he doesn&amp;apos;t have a session id, so generate one. If he already had one, all the better, we will take the old one"/>
				<comm cntt="Ensure that the session state is up-to-date"/>
				<comm cntt="Let the URLHandler determine the result of the query"/>
				<comm cntt="content=new HTMLErrorMessage(getStorage(),e.getMessage());"/>
				<comm cntt="Set some HTTP headers: Date is now, the document should expire in 5 minutes, proxies and clients shouldn&amp;apos;t cache it and all WebMail documents must be revalidated when they think they don&amp;apos;t have to follow the &amp;quot;no-cache&amp;quot;."/>
				<comm cntt="What we will send is an image or some other sort of binary"/>
				<comm cntt="the HTMLImage class provides us with most of the necessary information that we want to send"/>
				<comm cntt="Send 8k junks"/>
				<comm cntt="We are sending HTML text. Set the encoding to UTF-8 for Unicode messages"/>
				<comm cntt="res.setStatus(err_code);"/>
				<comm cntt="res.setHeader(&amp;quot;Content-type&amp;quot;,&amp;quot;text html&amp;quot;);"/>
				<comm cntt="res.setHeader(&amp;quot;Connection&amp;quot;,&amp;quot;close&amp;quot;);"/>
				<comm cntt="content=new HTMLErrorMessage(getStorage(),e.getMessage());"/>
				<comm cntt="out.write((content+&amp;quot;\r\n&amp;quot;).getBytes(&amp;quot;UTF-8&amp;quot;));"/>
				<comm cntt="out.write(&amp;quot;&amp;lt; HTML&amp;gt;\r\n&amp;quot;.getBytes());"/>
				<comm cntt="out.flush();"/>
				<comm cntt="out.close();"/>
				<param name="req1"/>
				<param name="res1"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.initServers()" access="prot" jdoc="Init possible servers of this main class">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.shutdownServers()" access="prot" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.getBasePath()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.getImageBasePath()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.newSession(HttpServletRequest, HTTPRequestHeader)" access="pub" jdoc="">
				<comm cntt="If we have an admin session, get rid of it and create a new session"/>
				<param name="req"/>
				<param name="h"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.newAdminSession(HttpServletRequest, HTTPRequestHeader)" access="pub" jdoc="">
				<param name="req"/>
				<param name="h"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.newSession(InetAddress, HTTPRequestHeader)" access="pub" jdoc="Overwrite the old session handling methods">
				<param name="a"/>
				<param name="h"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.newAdminSession(InetAddress, HTTPRequestHeader)" access="pub" jdoc="">
				<param name="a"/>
				<param name="h"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.getSession(String, InetAddress, HTTPRequestHeader)" access="pub" jdoc="">
				<param name="sessionid"/>
				<param name="a"/>
				<param name="h"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.getServers()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.getServer(String)" access="pub" jdoc="">
				<param name="ID"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.reinitServer(String)" access="pub" jdoc="">
				<param name="ID"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServlet.getVersion()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.WebMailServer" intfc="n" abs="y" inn="n" sloc="297" jdoc="This is WebMails main server. From here most parts will be administered. @author Sebastian Schaffert @version $Revision: 1.2 $">
			<comm cntt="9 24 2000 devink - Updated for new challenge response auth"/>
			<comm cntt="Modified by exce, start."/>
			<comm cntt="Modified by exce, end."/>
			<comm cntt="Modified by exce, start"/>
			<comm cntt="Modified by exce, end"/>
			<field name="timer" access="prot" jdoc=""/>
			<field name="ahandler" access="prot" jdoc=""/>
			<field name="phandler" access="prot" jdoc=""/>
			<field name="uhandler" access="prot" jdoc=""/>
			<field name="sessions" access="prot" jdoc=""/>
			<field name="debug" access="prot" jdoc=""/>
			<const name="VERSION" access="pub" jdoc=""/>
			<field name="possible_providers" access="prot" jdoc=""/>
			<field name="store_providers" access="prot" jdoc=""/>
			<field name="transport_providers" access="prot" jdoc=""/>
			<field name="start_time" access="priv" jdoc=""/>
			<field name="storage" access="prot" jdoc=""/>
			<field name="config_scheme" access="prot" jdoc=""/>
			<field name="server" access="prot" jdoc=""/>
			<field name="config" access="prot" jdoc=""/>
			<field name="defaultLocale" access="prot" jdoc="Webmail default locale setting."/>
			<field name="defaultTheme" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.server.WebMailServer.WebMailServer()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.debugOut(String)" access="pub" jdoc="If debugging is enabled, send the given message to STDERR. @param msg The message">
				<param name="msg"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.debugOut(String, Exception)" access="pub" jdoc="If debugging is enabled, send the given exception together with an explanatory message to STDERR. @param msg The explanatory message @param ex The exception">
				<param name="msg"/>
				<param name="ex"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getDebug()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.setDebug(boolean)" access="pub" jdoc="">
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.doInit()" access="prot" jdoc="">
				<comm cntt="Modified by exce, start"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="Set the default theme to the parameter given in webmail.default.theme or to &amp;quot;bibop&amp;quot; if unset."/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.initStorage()" access="prot" jdoc="">
				<comm cntt="Storage API"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.initConfig()" access="prot" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.initProviders()" access="prot" jdoc="">
				<comm cntt="We want to use IMAP as default, since this is the most useful protocol for WebMail"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.initServers()" access="prot" jdoc="Init possible servers of this main class">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.shutdownServers()" access="prot" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getServer(String)" access="pub" jdoc="">
				<param name="ID"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getServers()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getBasePath()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getImageBasePath()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.reinitServer(String)" access="pub" jdoc="">
				<param name="ID"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getBaseURI(HTTPRequestHeader)" access="pub" jdoc="">
				<param name="header"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getStoreProviders()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getTransportProviders()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getConnectionTimer()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getStorage()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getPluginHandler()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getAuthenticatorHandler()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getURLHandler()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getConfigScheme()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getProperty(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getDefaultTheme()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getDefaultLocale()" access="pub" jdoc="Return default locale. Related code: 1. login screen: server TopLevelHandler.java line #110. 2. webmail.css: plugins PassThroughPlugin.java line #77. 3. user&amp;apos;s default locale setting: xml XMLUserData.java line #82. @return default locale.">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.setProperty(String, String)" access="pub" jdoc="">
				<param name="name"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getConfig(String)" access="pub" jdoc="@deprecated Use StorageAPI instead">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.restart()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.shutdown()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getUptime()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getCopyright()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getServer()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.generateMessageID(String)" access="pub" jdoc="">
				<param name="user"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.removeSession(HTTPSession)" access="pub" jdoc="">
				<param name="w"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getSession(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailServer.getSessions()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.URLHandlerTree" intfc="n" abs="n" inn="n" sloc="53" jdoc="A tree structure to improve (speed up) access to URLs @author Sebastian Schaffert @version">
			<field name="handler" access="pub" jdoc=""/>
			<field name="url" access="pub" jdoc=""/>
			<field name="nodes" access="pub" jdoc=""/>
			<field name="t" access="pub" jdoc=""/>
			<mth name="/:net.wastl.webmail.server.URLHandlerTree.URLHandlerTree(String)" access="pub" jdoc="">
				<param name="url"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.URLHandlerTree.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.URLHandlerTree.addHandler(String, URLHandler)" access="pub" jdoc="">
				<param name="url"/>
				<param name="h"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.URLHandlerTree.getHandler(String)" access="pub" jdoc="">
				<comm cntt="We are the handler"/>
				<comm cntt="If there is no subtree, we are the handler!"/>
				<comm cntt="Else there is a subtree"/>
				<comm cntt="It has a handler"/>
				<comm cntt="It has no handler, we are handler"/>
				<param name="url"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.URLHandlerTree.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.StatusServer" intfc="y" abs="n" inn="n" sloc="3" jdoc="StatusServer.java A Server object that can return a status message. Created: Sun Dec 31 16:07:04 2000 @author Sebastian Schaffert @version">
			<mth name="/:net.wastl.webmail.server.StatusServer.getStatus()" access="pub" jdoc="Return a status message.">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.PluginHandler" intfc="n" abs="n" inn="n" sloc="56" jdoc="@author Sebastian Schaffert @version">
			<field name="parent" access="pub" jdoc=""/>
			<field name="plugin_list" access="pub" jdoc=""/>
			<field name="plugins" access="pub" jdoc=""/>
			<mth name="/:net.wastl.webmail.server.PluginHandler.PluginHandler(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.PluginHandler.registerPlugins()" access="pub" jdoc="Initialize and register WebMail Plugins.">
				<comm cntt="System.setProperty(&amp;quot;java.class.path&amp;quot;,System.getProperty(&amp;quot;java.class.path&amp;quot;)+System.getProperty(&amp;quot;path.separator&amp;quot;)+pluginpath);"/>
				<comm cntt="System.err.print(p.getName()+&amp;quot; &amp;quot;);"/>
				<comm cntt="System.err.flush();"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.PluginHandler.getPlugins()" access="pub" jdoc="">
			</mth>
		<class name="/:net.wastl.webmail.server.PluginHandler$FFilter" intfc="n" abs="n" inn="y" sloc="11" jdoc="A filter to find WebMail Plugins.">
			<mth name="/:net.wastl.webmail.server.PluginHandler$FFilter.FFilter()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.PluginHandler$FFilter.accept(File, String)" access="pub" jdoc="">
				<param name="f"/>
				<param name="s"/>
			</mth>
		</class>
		</class>
		<class name="/:net.wastl.webmail.server.Storage" intfc="n" abs="y" inn="n" sloc="205" jdoc="This provides a generic interface for getting and setting stored data in WebMail. @see net.wastl.webmail.storage.simple.SimpleStorage @author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<comm cntt="9 24 2000 devink - updated for new challenge response authentication"/>
			<const name="LOG_DEBUG" access="pub" jdoc=""/>
			<const name="LOG_INFO" access="pub" jdoc=""/>
			<const name="LOG_WARN" access="pub" jdoc=""/>
			<const name="LOG_ERR" access="pub" jdoc=""/>
			<const name="LOG_CRIT" access="pub" jdoc=""/>
			<field name="debug" access="prot" jdoc=""/>
			<field name="parent" access="prot" jdoc=""/>
			<field name="cs" access="prot" jdoc=""/>
			<field name="sysdata" access="prot" jdoc=""/>
			<field name="generic_model" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.server.Storage.Storage(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.initConfigKeys()" access="pub" jdoc="">
				<comm cntt="Initialize the configuration file with the default or set parameters"/>
				<comm cntt="needed to complete the XML file"/>
				<comm cntt="We must use the raw method so the input doesn&amp;apos;t get filtered."/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.setDebug(boolean)" access="pub" jdoc="">
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.getDebug()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.getConfigKeys()" access="pub" jdoc="Fetch all keys of the current configuration.">
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.getConfig(String)" access="pub" jdoc="Fetch the configuration associated with the specified key. @param key Identifier for the configuration">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.setConfig(String, String)" access="pub" jdoc="Set a configuration &amp;quot;key&amp;quot; to the specified value. @param key Identifier for the configuration @param value value to set">
				<comm cntt="Modified by exce, start"/>
				<comm cntt="Modified by exce, end"/>
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.getStringResource(String, Locale)" access="pub" jdoc="Get the String for key and the specified locale. @param key Identifier for the String @param locale locale of the String to fetch">
				<param name="key"/>
				<param name="locale"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.getStylesheet(String, Locale, String)" access="pub" jdoc="Get a xsl stylesheet for the specified locale and theme. @param key Identifier for the String @param locale locale of the String to fetch @param theme theme where to look for the file">
				<param name="name"/>
				<param name="locale"/>
				<param name="theme"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.getBinaryFile(String, Locale, String)" access="pub" jdoc="Get a binary file (most likely an image) for the specified locale and theme. @param key Identifier for the String @param locale locale of the String to fetch @param theme theme where to look for the file">
				<param name="name"/>
				<param name="locale"/>
				<param name="theme"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.getBasePath(Locale, String)" access="pub" jdoc="Calculate the document base path for a given locale and theme">
				<param name="locale"/>
				<param name="theme"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.getSystemData()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.createXMLUserModel(XMLUserData)" access="pub" jdoc="">
				<param name="data"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.createXMLAdminModel()" access="pub" jdoc="Return a XML model that contains state and system information for administrator use">
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.createXMLGenericModel()" access="pub" jdoc="Return a generic XML model that only contains some state and system information. This cannot be changed by a single session.">
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.getUsers(String)" access="pub" jdoc="Return userlist for a given domain.">
				<param name="domain"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.getUsers()" access="pub" jdoc="@deprecated Use getUsers(String domain) instead">
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.getUserData(String, String, String)" access="pub" jdoc="Get the userdata for the specified user. @param user Name of the user @param domain Virtual Domain name of the user @param passwd Password that the user provided devink 7 15 2000 - deprecated, but left in for backwards compat. devink 9 24 2000 - not deprecated any more XXX should passwd be a parameter?">
				<param name="user"/>
				<param name="domain"/>
				<param name="passwd"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.getUserData(String, String, String, boolean)" access="pub" jdoc="get the userdata for the specified user. Should do some sort of authentication if authentication is set. See Authenticator class for example. devink 7 15 2000 - depreciated, and is no longer abstract, so there is no requirement to implement it. devink 9 24 2000 - not depreciated, and is now abstract">
				<param name="user"/>
				<param name="domain"/>
				<param name="password"/>
				<param name="authenticate"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.createUserData(String, String, String)" access="pub" jdoc="Create a userdata for the specified user">
				<param name="user"/>
				<param name="domain"/>
				<param name="password"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.saveUserData(String, String)" access="pub" jdoc="Save the userdata for the given user. @param user Username of this user @param domain Domain of this user">
				<param name="user"/>
				<param name="domain"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.setUserData(String, UserData)" access="pub" jdoc="Set the userdata for the specified user. @param user Name of the user @param userdata Data to store @deprecated use saveUserData instead.">
				<comm cntt="Call saveUserData, do nothing with &amp;quot;userdata&amp;quot;"/>
				<param name="user"/>
				<param name="userdata"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.deleteUserData(String, String)" access="pub" jdoc="Delete a WebMail user @param user Name of the user to delete @param domain Domain of that user">
				<param name="user"/>
				<param name="domain"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.deleteUserData(String)" access="pub" jdoc="Delete a WebMail user @param user Name of the user to delete @deprecated use deleteUserData(String user, String domain) instead.">
				<param name="user"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.setVirtualDomain(String, WebMailVirtualDomain)" access="pub" jdoc="Set add a WebMail virtual domain">
				<param name="name"/>
				<param name="v"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.getVirtualDomain(String)" access="pub" jdoc="Get a WebMail virtual domain">
				<param name="name"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.createVirtualDomain(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.deleteVirtualDomain(String)" access="pub" jdoc="Delete a WebMail virtual domain">
				<param name="name"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.getVirtualDomains()" access="pub" jdoc="Return a list of virtual domains">
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.getAuthenticator()" access="pub" jdoc="Return this Storage&amp;apos;s Authenticator. This is necessary for changing passwords or re-checking authentication.">
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.log(int, String)" access="pub" jdoc="Send a message to the logging facility. @param level severity level of the message @param message the message">
				<param name="level"/>
				<param name="message"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.log(int, Exception)" access="pub" jdoc="Send an exception to the logging facility. @param level severity level of the message @param message the message">
				<param name="level"/>
				<param name="ex"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.shutdown()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.save()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.loadXMLSysData()" access="prot" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.saveXMLSysData()" access="prot" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.Storage.getMimeType(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.MailHostData" intfc="y" abs="n" inn="n" sloc="11" jdoc="@author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<mth name="/:net.wastl.webmail.server.MailHostData.getPassword()" access="pub" jdoc="The password for this mailbox @return Value of password.">
			</mth>
			<mth name="/:net.wastl.webmail.server.MailHostData.setPassword(String)" access="pub" jdoc="Set the value of password. @param v Value to assign to password.">
				<param name="v"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.MailHostData.getName()" access="pub" jdoc="The name of this mailbox @return Value of name.">
			</mth>
			<mth name="/:net.wastl.webmail.server.MailHostData.setName(String)" access="pub" jdoc="Set the value of name. @param v Value to assign to name.">
				<param name="v"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.MailHostData.getLogin()" access="pub" jdoc="The login for this mailbox">
			</mth>
			<mth name="/:net.wastl.webmail.server.MailHostData.setLogin(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.MailHostData.getHostURL()" access="pub" jdoc="The Hostname for this mailbox @return Value of host.">
			</mth>
			<mth name="/:net.wastl.webmail.server.MailHostData.setHostURL(String)" access="pub" jdoc="Set the value of host. @param v Value to assign to host.">
				<param name="v"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.MailHostData.getID()" access="pub" jdoc="The unique ID of this mailbox">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.Authenticator" intfc="n" abs="y" inn="n" sloc="29" jdoc="Generic class for user authentication. This class actually doesn&amp;apos;t do anything. @author Sebastian Schaffert @version 1.0 @see AuthenticatorHandler @see net.wastl.webmail.storage.simple.SimpleStorage">
			<comm cntt="9 24 2000 devink -- changed for challenge response authentication"/>
			<field name="key" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.server.Authenticator.Authenticator()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.Authenticator.getKey()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.Authenticator.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.Authenticator.getAuthDisplayMngr()" access="pub" jdoc="Get a displamanager object for this class. @see org.webengruven.webamil.auth.AuthDisplayMngr @return the AuthDisplayMngr apropriate for this class.">
			</mth>
			<mth name="/:net.wastl.webmail.server.Authenticator.init(Storage)" access="pub" jdoc="(Re-)Initialize this authenticator. Needed as we can&amp;apos;t use the Constructor properly with the Plugin-style. @param parent Give the Storage to allow the authenticator to check certain things.">
				<param name="store"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Authenticator.register(ConfigScheme)" access="pub" jdoc="Register this authenticator with WebMail.">
				<param name="store"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Authenticator.authenticatePreUserData(String, String, String)" access="pub" jdoc="Authentication to be done before UserData is available. You may use a Unix login() for example to check whether a user is allowed to use WebMail in general Subclasses should override this. It simply does nothing in this implementation. @param login Login-name for the user @param domain Domain name the user used to log on @param passwd Password to verify">
				<param name="login"/>
				<param name="domain"/>
				<param name="passwd"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Authenticator.authenticatePostUserData(UserData, String, String)" access="pub" jdoc="Authentication with available UserData. This usually should just check the password saved by the user, but may also be empty if you trust the pre-authentication (perhaps that was done against the Unix-login(), you can really trust in in that case. Subclasses should override this. It simply does nothing in this implementation. @param udata UserData for this user @param domain Domain name the user used to log on @param passwd Password to verify">
				<param name="udata"/>
				<param name="domain"/>
				<param name="password"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Authenticator.canChangePassword()" access="pub" jdoc="Tell WebMail whether this authentication method allows users to change their passwords. A Password-change option is then shown in the Options-Dialog.">
			</mth>
			<mth name="/:net.wastl.webmail.server.Authenticator.changePassword(UserData, String, String)" access="pub" jdoc="">
				<param name="udata"/>
				<param name="newpassword"/>
				<param name="verify"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.WebMailVirtualDomain" intfc="y" abs="n" inn="n" sloc="13" jdoc="Represents a virtual domain in WebMail. A virtual domain in WebMail allows the following things - users can belong to a certain domain - each domain has it&amp;apos;s own default host, authentication host, and default email suffix - each domain can have specific security features, i.e. IMAP POP hosts users of that domain are allowed to connect to. @author Sebastian Schaffert @version">
			<mth name="/:net.wastl.webmail.server.WebMailVirtualDomain.getDomainName()" access="pub" jdoc="Return the name of this domain. This will be appended to a new users email address and will be used in the login screen">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailVirtualDomain.setDomainName(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailVirtualDomain.getDefaultServer()" access="pub" jdoc="This returns the name of the default server that will be used. The default server is where a user gets his first folder (the one named &amp;quot;Default&amp;quot;).">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailVirtualDomain.setDefaultServer(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailVirtualDomain.getAuthenticationHost()" access="pub" jdoc="If the authentication type for this domain is IMAP or POP, this host will be used to authenticate users.">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailVirtualDomain.setAuthenticationHost(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailVirtualDomain.isAllowedHost(String)" access="pub" jdoc="Check if a hostname a user tried to connect to is within the allowed range of hosts. Depending on implementation, this could simply check the name or do an DNS lookup to check for IP ranges. The default behaviour should be to only allow connections to the default host and reject all others. This behaviour should be configurable by the administrator, however.">
				<param name="host"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailVirtualDomain.setAllowedHosts(String)" access="pub" jdoc="Set the hosts a user may connect to if host restriction is enabled. Excpects a comma-separated list of hostnames. The default host will be added to this list in any case">
				<param name="hosts"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailVirtualDomain.getAllowedHosts()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailVirtualDomain.setHostsRestricted(boolean)" access="pub" jdoc="Enable Disable restriction on the hosts that a user may connect to. If &amp;quot;disabled&amp;quot;, a user may connect to any host on the internet If &amp;quot;enabled&amp;quot;, a user may only connect to hosts in the configured list @see isAllowedHost">
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailVirtualDomain.getHostsRestricted()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.Logger" intfc="y" abs="n" inn="n" sloc="5" jdoc="This is an asynchronous Logger thread that accepts log messages to a Queue and writes them to the logfile from time to time (all 5 seconds). @author Sebastian Schaffert @version">
			<mth name="/:net.wastl.webmail.server.Logger.log(int, String)" access="pub" jdoc="">
				<param name="level"/>
				<param name="message"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Logger.log(int, Exception)" access="pub" jdoc="">
				<param name="level"/>
				<param name="ex"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Logger.shutdown()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.ConnectionTimer" intfc="n" abs="n" inn="n" sloc="46" jdoc="@author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<field name="connections" access="priv" jdoc=""/>
			<const name="sleep_interval" access="priv" jdoc=""/>
			<mth name="/:net.wastl.webmail.server.ConnectionTimer.ConnectionTimer()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.ConnectionTimer.printStatus()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.ConnectionTimer.addTimeableConnection(TimeableConnection)" access="pub" jdoc="">
				<param name="c"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.ConnectionTimer.removeTimeableConnection(TimeableConnection)" access="pub" jdoc="">
				<param name="c"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.ConnectionTimer.removeAll()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.ConnectionTimer.run()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.ToplevelURLHandler" intfc="n" abs="n" inn="n" sloc="68" jdoc="Handle URLs. Give them to the appropriate Plugins Program parts Created: Tue Aug 31 17:20:29 1999 @author Sebastian Schaffert @version">
			<comm cntt="9 24 2000 devink -- changed for challenge response authentication"/>
			<comm cntt="Hashtable urlhandlers;"/>
			<field name="parent" access="pub" jdoc=""/>
			<field name="urlhandlers" access="pub" jdoc=""/>
			<mth name="/:net.wastl.webmail.server.ToplevelURLHandler.ToplevelURLHandler(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.ToplevelURLHandler.registerHandler(String, URLHandler)" access="pub" jdoc="">
				<comm cntt="urlhandlers.put(url,handler);"/>
				<comm cntt="System.err.println(&amp;quot;Tree changed: &amp;quot;+urlhandlers.toString());"/>
				<param name="url"/>
				<param name="handler"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.ToplevelURLHandler.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.ToplevelURLHandler.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.ToplevelURLHandler.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.ToplevelURLHandler.handleException(Exception, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<param name="ex"/>
				<param name="session"/>
				<param name="header"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.ToplevelURLHandler.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<comm cntt="content=new HTMLLoginScreen(parent,parent.getStorage(),false);"/>
				<comm cntt="Let the authenticator setup the loginscreen"/>
				<comm cntt="Modified by exce, start."/>
				<comm cntt="content = new XHTMLDocument(model.getRoot(), parent.getStorage().getStylesheet(adm.getLoginScreenFile(), Locale.getDefault(),&amp;quot;default&amp;quot;));"/>
				<comm cntt="Modified by exce, end."/>
				<comm cntt="Let the plugins handle it"/>
				<comm cntt="System.err.println(&amp;quot;Handler: &amp;quot;+uh.getName()+&amp;quot; (&amp;quot;+uh.getURL()+&amp;quot;)&amp;quot;);"/>
				<param name="url"/>
				<param name="session"/>
				<param name="header"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.UserData" intfc="y" abs="n" inn="n" sloc="45" jdoc="@author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<comm cntt="9 25 2000 devink -- changed for new challenge response authentication"/>
			<mth name="/:net.wastl.webmail.server.UserData.login()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.logout()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.addMailHost(String, String, String, String)" access="pub" jdoc="Add a mailbox to this user&amp;apos;s data. The new mailbox will be stored in the user configuration and used for connection. @param name Name used to represent the mailhost in WebMail @param host This will usually be the URL to the mailhost, constructed from the protocol and the hostname @param login The login name used for the host @param password The corresponding password">
				<param name="name"/>
				<param name="host"/>
				<param name="login"/>
				<param name="password"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.removeMailHost(String)" access="pub" jdoc="Remove the mailhost with the given name. @param name The WebMail internal name of this mailbox">
				<param name="name"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.getMailHost(String)" access="pub" jdoc="Return the mailhost data for the mailbox with the given name. @param name The WebMail internal name of this mailbox @returns the MailHostData representation of the mailbox @see MailHostData">
				<param name="name"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.mailHosts()" access="pub" jdoc="Return the list of mailbox names of the mailboxes this user has. @returns list of mailbox names for this user">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.getMaxShowMessages()" access="pub" jdoc="Return the value that the user configured as maximum number of messages to display on one page of the message list.">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.setMaxShowMessages(int)" access="pub" jdoc="Set the number of maximum messages to display on one page of the messagelist. @param i maximum number of messages on one page">
				<param name="i"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.getMaxLineLength()" access="pub" jdoc="Break lines at this maximum length.Only applicable if the user configured to break lines. @see wantsBreakLines()">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.setMaxLineLength(int)" access="pub" jdoc="Set the maximum column count for messages. Only applicable if the user configured to break lines. @param i maximum column count @see wantsBreakLines()">
				<param name="i"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.wantsBreakLines()" access="pub" jdoc="Check whether the user wants to force line breaks. If this is set to true, lines in composed and shown messages are smartly broken at the configured positions. @see getMaxLineLength()">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.setBreakLines(boolean)" access="pub" jdoc="Set whether the user wants to force line breaks or not. @param b true if the user wants linebreaks">
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.getLogin()" access="pub" jdoc="Returns the username concatenated with &amp;apos;@&amp;apos; and the virtual domain. As of WebMail 0.7.0 this is different from the username, because it consists of the username and the domain. @see getUserName()">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.getFullName()" access="pub" jdoc="Return the full name (christian and last name) of the user.">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.setFullName(String)" access="pub" jdoc="Set the full name (christian and last name) of the user. @param s the String containing the full name of the user">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.getSignature()" access="pub" jdoc="Return the signature of this user that should be appended to composed messages.">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.setSignature(String)" access="pub" jdoc="Set the signature that should be appended to composed messages. @param s String containing the signature">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.getEmail()" access="pub" jdoc="Get the email address of the user. This will be used for outgoing mail.">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.setEmail(String)" access="pub" jdoc="Set the email address of the user. This will be used for outgoing mail. @param s String containing the Email address">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.getPreferredLocale()" access="pub" jdoc="Return the locale that this user configured. @returns a Locale object constructed from the locale string">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.setPreferredLocale(String)" access="pub" jdoc="Set the preferred locale for this user @param newloc name of the new locale (e.g. de_DE)">
				<param name="newloc"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.getTheme()" access="pub" jdoc="Return the theme that the user configured. (Reserved for future use, just returns &amp;quot;default&amp;quot;).">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.setTheme(String)" access="pub" jdoc="Change the theme for this user. @param theme name of the theme">
				<param name="theme"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.getFirstLogin()" access="pub" jdoc="Get a localized string containing the date when the user first logged in.">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.getLastLogin()" access="pub" jdoc="Get a localized string containing the date when the user logged in the last time.">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.getLoginCount()" access="pub" jdoc="Get a string containing the total count of logins for the user.">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.checkPassword(String)" access="pub" jdoc="Check the given password against the user&amp;apos;s password. @param s String with the password that is to be checked @see SimpleAuthenticator">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.setPassword(String, String)" access="pub" jdoc="Change the users password. @param newpasswd new password @param verify new password again to verify that it was not misspelled">
				<param name="newpasswd"/>
				<param name="verify"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.setPasswordData(String)" access="pub" jdoc="Set the password data for a user. This can contain any string which will then become password data for a user. It can be encoded however the authenticator chooses. Note that when switching authenticators, this password data will most likely not be valid anymore, and the user will be locked out of their account. @param data The new data to use">
				<param name="data"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.getPasswordData()" access="pub" jdoc="Get the password data for this user. @return The saved password data">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.wantsShowImages()" access="pub" jdoc="Check whether the user wants attached images to be shown inlined in the messages or not. @return true, if the user wants images to be shown inline">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.setShowImages(boolean)" access="pub" jdoc="Set whether the user wants attached images to be shown inlined in the messages. @param b true if images are to be shown inline">
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.wantsShowFancy()" access="pub" jdoc="Check whether the user wants some graphical enhancements (image smileys, etc). @returns true if the user wants graphical enhancements.">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.setShowFancy(boolean)" access="pub" jdoc="Set whether the user wants some graphical enhancements (image smileys, etc). @param b true if the user wants graphical enhancements.">
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.wantsSetFlags()" access="pub" jdoc="Check whether write mode is enabled on mailboxes. This influences many things like setting message flags, copying moving messages, deleting messages and the like. @see net.wastl.webmail.server.WebMailSession.getMessage() @see net.wastl.webmail.server.WebMailSession.copyMoveMessage() @see net.wastl.webmail.server.WebMailSession.setFlags()">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.setSetFlags(boolean)" access="pub" jdoc="Enable disable write mode on mailboxes. This influences many things like setting message flags, copying moving messages, deleting messages and the like. @param b true: enable write mode @see net.wastl.webmail.server.WebMailSession.getMessage() @see net.wastl.webmail.server.WebMailSession.copyMoveMessage() @see net.wastl.webmail.server.WebMailSession.setFlags()">
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.setSaveSent(boolean)" access="pub" jdoc="Set whether the user wants to save sent messages or not. The folder where sent messages will be stored has to be configured also. @param b true if the user wants to save sent messages @see getSentFolder() @see setSentFolder()">
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.wantsSaveSent()" access="pub" jdoc="Check whether the user wants to save sent messages or not. The folder where sent messages will be stored has to be configured also. @returns true if the user wants to save sent messages @see getSentFolder() @see setSentFolder()">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.getSentFolder()" access="pub" jdoc="Return the id of the folder that should be used to store sent messages. This is only applicable if the user enabled the storage of sent messages. @see net.wastl.webmail.server.WebMailSession.generateFolderHash() @see wantsSaveSent() @see setSaveSent()">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.setSentFolder(String)" access="pub" jdoc="Set the id of the folder that should be used to store sent messages. This is only applicable if the user enabled the storage of sent messages. @see net.wastl.webmail.server.WebMailSession.generateFolderHash() @see wantsSaveSent() @see setSaveSent()">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.getDomain()" access="pub" jdoc="Return the name of the virtual domain this user is in.">
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.setDomain(String)" access="pub" jdoc="Set the name of the virtual domain this user is in. @param s name of the virtual domain">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.UserData.getUserName()" access="pub" jdoc="Return the username without the domain (in contrast to getLogin()). @see getLogin()">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.AuthenticatorHandler" intfc="n" abs="n" inn="n" sloc="36" jdoc="@author Sebastian Schaffert @version">
			<field name="parent" access="pub" jdoc=""/>
			<field name="authenticators" access="pub" jdoc=""/>
			<field name="authenticator_list" access="pub" jdoc=""/>
			<mth name="/:net.wastl.webmail.server.AuthenticatorHandler.AuthenticatorHandler(WebMailServer)" access="pub" jdoc="">
				<comm cntt="parent.getConfigScheme().configRegisterStringKey(&amp;quot;AUTHHOST&amp;quot;,&amp;quot;localhost&amp;quot;,&amp;quot;Host used for remote authentication (e.g. for IMAP,POP3)&amp;quot;);"/>
				<param name="parent"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.AuthenticatorHandler.registerAuthenticators()" access="pub" jdoc="Initialize and register WebMail Authenticators.">
				<comm cntt="ex.printStackTrace();"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.AuthenticatorHandler.getAuthenticator(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.AdminSession" intfc="n" abs="n" inn="n" sloc="251" jdoc="@author Sebastian Schaffert @version">
			<comm cntt="9 24 2000 devink -- updated for new challenge response authentication"/>
			<comm cntt="10 22 2000 devink -- added to suport new authentication changes."/>
			<field name="last_access" access="priv" jdoc="When has the session been last accessed?"/>
			<field name="session_code" access="priv" jdoc="The session-ID for this session"/>
			<field name="parent" access="prot" jdoc="Parent WebMailServer"/>
			<field name="remote" access="prot" jdoc=""/>
			<field name="remote_agent" access="priv" jdoc=""/>
			<field name="remote_accepts" access="priv" jdoc=""/>
			<field name="model" access="prot" jdoc=""/>
			<field name="sess" access="prot" jdoc=""/>
			<field name="running_as_servlet" access="prot" jdoc=""/>
			<field name="selected_domain" access="prot" jdoc=""/>
			<field name="selected_user" access="prot" jdoc=""/>
			<field name="is_logged_out" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.server.AdminSession.AdminSession(WebMailServer, Object, HTTPRequestHeader)" access="pub" jdoc="">
				<param name="parent"/>
				<param name="parm"/>
				<param name="h"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.doInit(WebMailServer, HTTPRequestHeader)" access="prot" jdoc="">
				<comm cntt="env=new Hashtable();"/>
				<param name="parent"/>
				<param name="h"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.login(HTTPRequestHeader)" access="pub" jdoc="">
				<param name="h"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.login()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.logout()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.isLoggedOut()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.getSessionCode()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.getLocale()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.getLastAccess()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.setLastAccess()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.getEnv(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.selectUser(String)" access="pub" jdoc="">
				<param name="user"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.clearUser()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.deleteUser(String)" access="pub" jdoc="">
				<comm cntt="Refresh information"/>
				<param name="user"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.setupUserEdit()" access="pub" jdoc="This does all the necessary setup to edit the currently selected user.">
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.setException(Exception)" access="pub" jdoc="">
				<param name="ex"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.changeUser(HTTPRequestHeader)" access="pub" jdoc="Change the settings for a specific user. This method will check for changes to a user&amp;apos;s configuration and save the new user configuration. Note that this should not be done when a user session is still active! @param h Header parsed from AdministratorPlugin">
				<comm cntt="XXX Not sure this is the right exception"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="Modified by exce, end"/>
				<param name="head"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.selectDomain(String)" access="pub" jdoc="">
				<param name="domain"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.setEnv(String, String)" access="pub" jdoc="">
				<comm cntt="env.put(key,value);"/>
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.setEnv()" access="pub" jdoc="">
				<comm cntt="Here we must initialize which choices are available for ChoiceConfigParameters!"/>
				<comm cntt="Generate a list of active sessions with some additional information (idle time, session code, active mail connections, ...)"/>
				<comm cntt="If the remote is admin and we are not the remote!"/>
				<comm cntt="&amp;&amp; !h.getSessionCode().equals(session_code)"/>
				<comm cntt="Add all languages to the state"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.getRemoteAddress()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.getTimeout()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.timeoutOccured()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.saveData()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.AdminSession.getModel()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.HTTPSession" intfc="y" abs="n" inn="n" sloc="17" jdoc="@author Sebastian Schaffert @version">
			<mth name="/:net.wastl.webmail.server.HTTPSession.login(HTTPRequestHeader)" access="pub" jdoc="">
				<param name="h"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.HTTPSession.login()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.HTTPSession.logout()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.HTTPSession.getSessionCode()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.HTTPSession.getLocale()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.HTTPSession.getLastAccess()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.HTTPSession.setLastAccess()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.HTTPSession.getEnv(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.HTTPSession.setEnv(String, String)" access="pub" jdoc="">
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.HTTPSession.setEnv()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.HTTPSession.getRemoteAddress()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.HTTPSession.saveData()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.HTTPSession.getModel()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.HTTPSession.isLoggedOut()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.HTTPSession.setException(Exception)" access="pub" jdoc="">
				<param name="ex"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.PluginDependencyTree" intfc="n" abs="n" inn="n" sloc="51" jdoc="@author Sebastian Schaffert @version">
			<field name="node" access="prot" jdoc=""/>
			<field name="meprovides" access="prot" jdoc=""/>
			<field name="children" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.server.PluginDependencyTree.PluginDependencyTree(Plugin)" access="pub" jdoc="">
				<param name="p"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.PluginDependencyTree.PluginDependencyTree(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.PluginDependencyTree.provides(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.PluginDependencyTree.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.PluginDependencyTree.addPlugin(Plugin)" access="pub" jdoc="">
				<param name="p"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.PluginDependencyTree.register(WebMailServer)" access="pub" jdoc="">
				<comm cntt="System.err.print(node.getName()+&amp;quot; &amp;quot;);"/>
				<comm cntt="System.err.flush();"/>
				<comm cntt="Perform depth-first registraion. Breadth-first would be better, but it will work anyway"/>
				<param name="parent"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.WebMailSession" intfc="n" abs="n" inn="n" sloc="1380" jdoc="A user session for WebMail. Contains the state of the actual user (loads it from disk). Has a unique session-ID. @author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<comm cntt="9 24 2000 devink - updated for challenge response auth"/>
			<comm cntt="Files attached to messages will be stored here. We will have to take care of possible memory problems!"/>
			<field name="last_access" access="priv" jdoc="When has the session been last accessed?"/>
			<field name="session_code" access="priv" jdoc="The session-ID for this session"/>
			<field name="parent" access="priv" jdoc="Parent WebMailServer"/>
			<field name="user" access="priv" jdoc="State of the current users configuration"/>
			<field name="model" access="priv" jdoc=""/>
			<field name="connections" access="priv" jdoc="Connections to Mailboxes"/>
			<field name="stores" access="priv" jdoc="Connections to hosts"/>
			<field name="mailsession" access="priv" jdoc="javax.mail Mailsession"/>
			<field name="remote" access="priv" jdoc=""/>
			<field name="mime_parts_decoded" access="priv" jdoc=""/>
			<field name="sent" access="priv" jdoc=""/>
			<field name="remote_agent" access="priv" jdoc=""/>
			<field name="remote_accepts" access="priv" jdoc=""/>
			<field name="attachments_size" access="priv" jdoc=""/>
			<field name="last_login" access="priv" jdoc=""/>
			<field name="login_password" access="priv" jdoc="Save the login password. It will be used for the second try password if opening a folder fails."/>
			<field name="sess" access="priv" jdoc=""/>
			<field name="folders" access="priv" jdoc=""/>
			<field name="need_expunge_folders" access="prot" jdoc=""/>
			<field name="is_logged_out" access="prot" jdoc=""/>
			<const name="GETMESSAGE_MODE_STANDARD" access="pub" jdoc="This indicates standard getMessage behaviour: Fetch the message from the IMAP server and store it in the current UserModel. @see getMessage(String,int,int)"/>
			<const name="GETMESSAGE_MODE_REPLY" access="pub" jdoc="Set this mode in getMessage to indicate that the message is requested to generate a reply message and should therefore be set as the current &amp;quot;work&amp;quot; message. @see getMessage(String,int,int)"/>
			<const name="GETMESSAGE_MODE_FORWARD" access="pub" jdoc="Set this mode in getMessage to indicate that the message is to be forwarded to someone else and a &amp;quot;work&amp;quot; message should be generated. @see getMessage(String,int,int)"/>
			<mth name="/:net.wastl.webmail.server.WebMailSession.WebMailSession(WebMailServer, Object, HTTPRequestHeader)" access="pub" jdoc="">
				<param name="parent"/>
				<param name="parm"/>
				<param name="h"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.doInit(WebMailServer, HTTPRequestHeader)" access="prot" jdoc="This method does the actual initialisation devink 7 15 2000 - added TwoPassAuthenticationException - updated call to getUserData(), to use my new one. devink 9 24 2000 - reverted back to old getUserData call">
				<comm cntt="If the user logs in for the first time we want all folders subscribed"/>
				<param name="parent"/>
				<param name="h"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getUserModel()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getModel()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.calcCode(InetAddress, HTTPRequestHeader)" access="pub" jdoc="Calculate session-ID for a session. @param a Adress of the remote host @param h Requestheader of the remote user agent @returns Session-ID">
				<param name="a"/>
				<param name="h"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.login(HTTPRequestHeader)" access="pub" jdoc="Login to this session. Establishes connections to a user�s Mailhosts @param h RequestHeader with content from Login-POST operation. @deprecated Use login() instead, no need for parameters and exception handling">
				<comm cntt="user.login(h.getContent(&amp;quot;password&amp;quot;));"/>
				<param name="h"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.login()" access="pub" jdoc="Login this session. Updates access time, sets initial environment and connects all configured mailboxes.">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getStringResource(String)" access="pub" jdoc="Return a locale-specific string resource">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.createMessageList(String, int)" access="pub" jdoc="Create a Message List. Fetches a list of headers in folder foldername for part list_part. The messagelist will be stored in the &amp;quot;MESSAGES&amp;quot; environment. @param foldername folder for which a message list should be built @param list_part part of list to display (1 = last xx messages, 2 = total-2 xx - total-xx messages)">
				<comm cntt="Calculate first and last message to show"/>
				<comm cntt="System.err.println(&amp;quot;Total: &amp;quot;+total_messages);"/>
				<comm cntt="Handle small messagelists correctly"/>
				<comm cntt="Don&amp;apos;t accept list-parts smaller than 1"/>
				<comm cntt="Handle beginning of message list"/>
				<comm cntt="Set environment variable"/>
				<comm cntt="Fetch headers"/>
				<comm cntt="System.err.println(&amp;quot;Last: &amp;quot;+last+&amp;quot;, first: &amp;quot;+first);"/>
				<comm cntt="System.err.println(msgs.length + &amp;quot; messages fetching...&amp;quot;);"/>
				<comm cntt="if(((MimeMessage)msgs[i]).getMessageID() == null) {"/>
				<comm cntt="folder.close(false);"/>
				<comm cntt="folder.open(Folder.READ_WRITE);"/>
				<comm cntt="((MimeMessage)msgs[i]).setHeader(&amp;quot;Message-ID&amp;quot;,&amp;quot;&amp;lt;&amp;quot;+user.getLogin()+&amp;quot;.&amp;quot;+System.currentTimeMillis()+&amp;quot;.jwebmail@&amp;quot;+user.getDomain()+&amp;quot;&amp;gt;&amp;quot;);"/>
				<comm cntt="((MimeMessage)msgs[i]).saveChanges();"/>
				<comm cntt="folder.close(false);"/>
				<comm cntt="folder.open(Folder.READ_ONLY);"/>
				<comm cntt="}"/>
				<comm cntt="For mail servers that don&amp;apos;t generate a Message-ID (Outlook et al)"/>
				<comm cntt="Addresses"/>
				<comm cntt="Flags"/>
				<comm cntt="Subject"/>
				<comm cntt="Set all of what we found into the DOM"/>
				<comm cntt="Modified by exce, start."/>
				<comm cntt="hmm, why decode subject twice? Though it doesn&amp;apos;t matter.."/>
				<comm cntt="Modified by exce, end."/>
				<comm cntt="Date"/>
				<comm cntt="try {"/>
				<comm cntt="XMLCommon.writeXML(model.getRoot(),new FileOutputStream(&amp;quot; tmp wmdebug&amp;quot;),&amp;quot;&amp;quot;);"/>
				<comm cntt="} catch(IOException ex) {}"/>
				<param name="folderhash"/>
				<param name="list_part"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getMessage(String, int)" access="pub" jdoc="This is a wrapper to call getMessage with standard mode. @see getMessage(String,int,int)">
				<param name="folderhash"/>
				<param name="msgnum"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getMessage(String, int, int)" access="pub" jdoc="Fetch a message from a folder. Will put the messages parameters in the sessions environment @param foldername Name of the folder were the message should be fetched from @param msgnum Number of the message to fetch @param mode there are three different modes: standard, reply and forward. reply and forward will enter the message into the current work element of the user and set some additional flags on the message if the user has enabled this option. @see net.wastl.webmail.server.WebMailSession.GETMESSAGE_MODE_STANDARD @see net.wastl.webmail.server.WebMailSession.GETMESSAGE_MODE_REPLY @see net.wastl.webmail.server.WebMailSession.GETMESSAGE_MODE_FORWARD">
				<comm cntt="security reasons:"/>
				<comm cntt="attachments=null;"/>
				<comm cntt="For mail servers that don&amp;apos;t generate a Message-ID (Outlook et al)"/>
				<comm cntt="Check whether we already cached this message (not only headers but complete)"/>
				<comm cntt="If we cached the message, we don&amp;apos;t need to fetch it again"/>
				<comm cntt="Element xml_header=model.getHeader(xml_message);"/>
				<comm cntt="Set all of what we found into the DOM"/>
				<comm cntt="Decode MIME contents recursively"/>
				<comm cntt="Set seen flag (Maybe make that threaded to improve performance)"/>
				<comm cntt="In this part we determine whether the message was requested so that it may be used for further editing (replying or forwarding). In this case we set the current &amp;quot;work&amp;quot; message to the message we just fetched and then modifiy it a little (quote, add a &amp;quot;Re&amp;quot; to the subject, etc)."/>
				<comm cntt="System.err.println(&amp;quot;Setting work message!&amp;quot;);"/>
				<comm cntt="Copy all references to MIME parts to the new message id"/>
				<comm cntt="Clear the msgnr and msgid fields at last"/>
				<param name="folderhash"/>
				<param name="msgnum"/>
				<param name="mode"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.parseMIMEContent(Part, XMLMessagePart, String)" access="prot" jdoc="Use depth-first search to go through MIME-Parts recursively. @param p Part to begin with">
				<comm cntt="The part is a text in HTML format. We will try to use &amp;quot;Tidy&amp;quot; to create a well-formated XHTML DOM from it and then remove JavaScript and other &amp;quot;evil&amp;quot; stuff. For replying to such a message, it will be useful to just remove all of the tags and display only the text."/>
				<comm cntt="Here we create a DOM tree."/>
				<comm cntt="Tidy tidy=new Tidy();"/>
				<comm cntt="tidy.setUpperCaseTags(true);"/>
				<comm cntt="Document htmldoc=tidy.parseDOM(p.getInputStream(),null);"/>
				<comm cntt="XMLCommon.debugXML(htmldoc);"/>
				<comm cntt="Now let&amp;apos;s look for all the malicious JavaScript and other &amp;lt;SCRIPT&amp;gt; tags, URLS containing the &amp;quot;javascript:&amp;quot; and tags containing &amp;quot;onMouseOver&amp;quot; and such stuff."/>
				<comm cntt="if(user.getBoolVar(&amp;quot;filter javascript&amp;quot;)) new JavaScriptCleaner(htmldoc);"/>
				<comm cntt="XMLCommon.debugXML(htmldoc);"/>
				<comm cntt="HTML doesn&amp;apos;t allow us to do such fancy stuff like different quote colors, perhaps this will be implemented in the future"/>
				<comm cntt="So we just add this HTML document to the message part, which will deal with removing headers and tags that we don&amp;apos;t need"/>
				<comm cntt="The part is a standard message part in some incarnation of text (html or plain). We should decode it and take care of some extra issues like recognize quoted parts, filter JavaScript parts and replace smileys with smiley-icons if the user has set wantsFancy()"/>
				<comm cntt="TODO:"/>
				<comm cntt="Workaround for Java or Javamail Bug"/>
				<comm cntt="End of workaround"/>
				<comm cntt="System.err.println(&amp;quot;Content-Type: &amp;quot;+p.getContentType());"/>
				<comm cntt="Read in the message part line by line"/>
				<comm cntt="First decode all language and MIME dependant stuff"/>
				<comm cntt="Default to ISO-8859-1 (Western Latin 1)"/>
				<comm cntt="Check whether the part contained a charset in the content-type header"/>
				<comm cntt="Here we figure out which quote level this line has, simply by counting how many &amp;quot;&amp;gt;&amp;quot; are in front of the line, ignoring all whitespaces."/>
				<comm cntt="When we are in a different quote level than the last line, we append all we got so far to the part with the old quotelevel and begin with a clean String buffer"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="Why the following code???"/>
				<comm cntt="Modified by exce, end."/>
				<comm cntt="This is a multipart alternative part. That means that we should pick one of the formats and display it for this part. Our current precedence list is to choose HTML first and then to choose plain text."/>
				<comm cntt="Walk though our preferred list of encodings. If we have found a fitting part,"/>
				<comm cntt="decode it and replace it for the parent (this is what we really want with an"/>
				<comm cntt="alternative!)"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="If type==&amp;quot;TEXT&amp;quot;, add a hidden attribute."/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="If we didn&amp;apos;t find one of our preferred encodings, choose the first one"/>
				<comm cntt="simply pass the parent part because replacement is what we really want with"/>
				<comm cntt="an alternative."/>
				<comm cntt="This is a standard multipart message. We should recursively walk thorugh all of the parts and decode them, appending as children to the current part"/>
				<comm cntt="Else treat the part as a binary part that the user should either download or get displayed immediately in case of an image"/>
				<comm cntt="Workaround for Java or Javamail Bug"/>
				<comm cntt="End of workaround"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="Eliminate space characters. Should do some more things in the future"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="Transcode name into UTF-8 bytes then make a new ISO8859_1 string to encode URL."/>
				<comm cntt="Modified by exce, end"/>
				<param name="p"/>
				<param name="parent_part"/>
				<param name="msgid"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getMIMEPart(String, String)" access="pub" jdoc="">
				<param name="msgid"/>
				<param name="name"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getMimeParts(String)" access="pub" jdoc="">
				<param name="msgid"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.clearWork()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.prepareCompose()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.clearAttachments()" access="pub" jdoc="This method removes all of the attachments of the current &amp;quot;work&amp;quot; message">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getAttachments()" access="pub" jdoc="This method returns a table of attachments for the current &amp;quot;work&amp;quot; message">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getAttachment(String)" access="pub" jdoc="This method returns the attachment with the given name of the current &amp;quot;work&amp;quot; message">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.addWorkAttachment(String, ByteStore, String)" access="pub" jdoc="Add an attachment to the current work message. @param name Name of the attachment (e.g. filename) @param bs The contents of the attachment, as a ByteStore object @param description A short description of the contents (will be used as the &amp;quot;Description:&amp;quot; header">
				<comm cntt="XMLCommon.debugXML(model.getRoot());"/>
				<param name="name"/>
				<param name="bs"/>
				<param name="description"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.removeWorkAttachment(String)" access="pub" jdoc="Remove the attachment with the given name from the current work message.">
				<comm cntt="XMLCommon.debugXML(model.getRoot());"/>
				<param name="name"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.storeMessage(HTTPRequestHeader)" access="pub" jdoc="Store a message in the environment for further processing.">
				<comm cntt="Store the already typed message if necessary possible"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="If the user enabled &amp;quot;break line&amp;quot;, then do it!"/>
				<comm cntt="StringTokenizer tok=new StringTokenizer(head.getContent(&amp;quot;BODY&amp;quot;),&amp;quot;\n&amp;quot;);"/>
				<comm cntt="content.append(head.getContent(&amp;quot;BODY&amp;quot;));"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="xml_message.setHeader(&amp;quot;TO&amp;quot;,head.getContent(&amp;quot;TO&amp;quot;));"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="xml_message.setHeader(&amp;quot;CC&amp;quot;,head.getContent(&amp;quot;CC&amp;quot;));"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="xml_message.setHeader(&amp;quot;BCC&amp;quot;,head.getContent(&amp;quot;BCC&amp;quot;));"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="xml_message.setHeader(&amp;quot;REPLY-TO&amp;quot;,head.getContent(&amp;quot;REPLY-TO&amp;quot;));"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="xml_message.setHeader(&amp;quot;SUBJECT&amp;quot;,head.getContent(&amp;quot;SUBJECT&amp;quot;));"/>
				<comm cntt="Modified by exce, end"/>
				<param name="head"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.connectAll()" access="pub" jdoc="Connect to all Mailhosts @deprecated Should use refreshFolderInformation now.">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getChildFolder(Folder, String)" access="pub" jdoc="Get a childfolder of a rootfolder for a specified hash value">
				<param name="root"/>
				<param name="folderhash"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getFolder(String)" access="pub" jdoc="Get the folder with the given hashvalue. @returns Folder with the given hashvalue">
				<param name="folderhash"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.generateFolderHash(Folder)" access="prot" jdoc="This method tries to generate a unique folder identifier for the given folder. This method generates an MD5 sum over the complete folder URL, if possible. @see getFolderTree @see net.wastl.webmail.misc.MD5">
				<comm cntt="If possible, use the MD5-Sum for the folder ID because it is persistant over sessions"/>
				<param name="folder"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getFolderTree(Folder, Element, boolean)" access="prot" jdoc="Construct the folder subtree for the given folder and append it to xml_parent. @param folder the folder where we begin @param xml_parent the XML Element where the gathered information will be appended @param subscribed_only Only list subscribed folders @returns maximum depth of the folder tree (needed to calculate the necessary columns in a table)">
				<comm cntt="This folder can contain messages"/>
				<comm cntt="There are subfolders, get them!"/>
				<comm cntt="If the user only wanted to see subscribed folders, call listSubscribed otherwise call list()"/>
				<comm cntt="Recursiveley add subfolders to the XML model"/>
				<param name="folder"/>
				<param name="xml_parent"/>
				<param name="subscribed_only"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.refreshFolderInformation()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.refreshFolderInformation(boolean)" access="pub" jdoc="Refresh Information about folders. Tries to connect folders that are not yet connected.">
				<comm cntt="Cannot unsubscribe root folder!"/>
				<comm cntt="Only IMAP supports subscription"/>
				<comm cntt="Here we try to determine the remote IMAP or POP host. There is no problem if this fails (it will most likely for POP3), so the exception is caught and not handled"/>
				<comm cntt="Washington University"/>
				<comm cntt="Washington University stores user mailboxes as ~user mail ..."/>
				<comm cntt="Cyrus, Courier &amp; Co have their folders beneath the INBOX"/>
				<comm cntt="If it didn&amp;apos;t work it failed in the &amp;quot;if&amp;quot; statement, since &amp;quot;getFolderTree&amp;quot; doesn&amp;apos;t throw exceptions so what we want to do is to simply construct the folder tree for INBOX"/>
				<comm cntt="Here a more serious exception has been caught (Connection failed)"/>
				<param name="subscribed_only"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.refreshFolderInformation(String)" access="pub" jdoc="">
				<param name="folderhash"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.subscribeFolder(String)" access="pub" jdoc="Try to subscribe to a folder (i.e. unhide it)">
				<comm cntt="Only IMAP supports subscription..."/>
				<comm cntt="System.err.println(&amp;quot;Folder subscription not supported&amp;quot;);"/>
				<param name="folderhash"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.unsubscribeFolder(String)" access="pub" jdoc="Try to unsubscribe from a folder (i.e. hide it)">
				<comm cntt="Only IMAP supports subscription..."/>
				<comm cntt="System.err.println(&amp;quot;Folder subscription not supported&amp;quot;);"/>
				<param name="folderhash"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.setSubscribedAll(String, boolean)" access="pub" jdoc="Subscribe all folders for a Mailhost Do it the non-recursive way: Uses a simple Queue :-)">
				<comm cntt="Only IMAP supports subscription..."/>
				<param name="id"/>
				<param name="subscribed"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.disconnectAll()" access="pub" jdoc="Disconnect from all Mailhosts">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getRootFolder(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.connectStore(String, String, String, String)" access="prot" jdoc="">
				<comm cntt="Check whether the domain of this user allows to connect to the host"/>
				<comm cntt="Check if this host is already connected. Use connection if true, create a new one if false."/>
				<comm cntt="Maybe this is a new store or this store has been disconnected. Reconnect if this is the case."/>
				<comm cntt="If login fails, try the login_password"/>
				<param name="host"/>
				<param name="protocol"/>
				<param name="login"/>
				<param name="password"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.connect(String)" access="pub" jdoc="Connect to mailhost &amp;quot;name&amp;quot;">
				<comm cntt="System.err.println(&amp;quot;Default folder: &amp;quot;+st.getDefaultFolder().toString());"/>
				<param name="name"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.disconnect(String)" access="pub" jdoc="Disconnect from mailhost &amp;quot;name&amp;quot;">
				<comm cntt="st.close();"/>
				<comm cntt="Should not happen"/>
				<comm cntt="This happens when deleting a folder with an error"/>
				<param name="name"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.logout()" access="pub" jdoc="Terminate this session. This will expunge deleted messages, close all mailbox connections, save the user data and then remove this session from the session list, effectively destroying this session.">
				<comm cntt="Make sure the session is invalidated"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.isLoggedOut()" access="pub" jdoc="Check whether this session is already logged out. Useful to avoid loops.">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getSessionCode()" access="pub" jdoc="Return the session id that was generated for this session.">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getLastAccess()" access="pub" jdoc="Return the last access time of this session @see TimeableConnection">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.setLastAccess()" access="pub" jdoc="Update the last access time. Sets the last access time to the current time. @see TimeableConnection">
				<comm cntt="System.err.println(&amp;quot;Setting last access to session: &amp;quot;+last_access);"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.timeoutOccured()" access="pub" jdoc="Handle a timeout for this session. This calls the logout method, effectively terminating this session. @see TimeableConnection @see logout()">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getTimeout()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getLocale()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.saveData()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getSelectedMessages(HTTPRequestHeader, int)" access="prot" jdoc="">
				<comm cntt="System.err.print(&amp;quot; - select messages...&amp;quot;);"/>
				<comm cntt="System.err.print(_msgs[j]+&amp;quot; &amp;quot;);"/>
				<comm cntt="System.err.println();"/>
				<param name="head"/>
				<param name="max"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.expungeFolders()" access="pub" jdoc="Expunge all folders that have messages waiting to be deleted">
				<comm cntt="POP3 doesn&amp;apos;t support expunge!"/>
				<comm cntt="XXXX"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.setFlags(String, HTTPRequestHeader)" access="pub" jdoc="Change the Flags of the messages the user selected.">
				<comm cntt="System.err.println(&amp;quot;Processing Request Header...&amp;quot;);"/>
				<comm cntt="Get selected messages"/>
				<comm cntt="System.err.println(&amp;quot; - get flags...&amp;quot;);"/>
				<comm cntt="Get selected flags"/>
				<comm cntt="System.err.println(&amp;quot;Done!&amp;quot;);"/>
				<comm cntt="System.err.println(&amp;quot;Setting flags...&amp;quot;);"/>
				<param name="folderhash"/>
				<param name="head"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.copyMoveMessage(String, String, HTTPRequestHeader, boolean)" access="pub" jdoc="Copy or move the selected messages from folder fromfolder to folder tofolder.">
				<param name="fromfolder"/>
				<param name="tofolder"/>
				<param name="head"/>
				<param name="move"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.changeSetup(HTTPRequestHeader)" access="pub" jdoc="Change a user&amp;apos;s configuration. Header fields given in the requestheader are parsed and turned into user options (probably should not be in WebMailSession but in a plugin or something; this is very hacky).">
				<comm cntt="Modified by exce, start"/>
				<comm cntt="user.setSignature(head.getContent(&amp;quot;SIGNATURE&amp;quot;));"/>
				<comm cntt="user.setFullName(head.getContent(&amp;quot;FULLNAME&amp;quot;));"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="Not sure if this is really necessary:"/>
				<comm cntt="refreshFolderInformation(true);"/>
				<param name="head"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.addMailbox(String, String, String, String, String)" access="pub" jdoc="Add the mailbox with the given parameters to this user&amp;apos;s configuration. Subscribe all folders on startup (the user can later unsubscribe them) and update the model. @param name Name for the mailbox (used for identification within the session) @param protocol The protocol used for this mailbox (most likely IMAP or POP3) @param host The hostname of the host this mailbox lives on @param login Login name the user provided for the host @param password Password the user provided to the given login">
				<param name="name"/>
				<param name="protocol"/>
				<param name="host"/>
				<param name="login"/>
				<param name="password"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.removeMailbox(String)" access="pub" jdoc="Remove the mailbox with the given name. Will first disconnect all mailboxes, remove the given mailbox and then update the model. @param name Name of the mailbox that is to be removed.">
				<comm cntt="Should be called from FolderSetup Plugin"/>
				<comm cntt="refreshFolderInformation(true);"/>
				<param name="name"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.setAddToFolder(String)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.addFolder(String, String, boolean, boolean)" access="pub" jdoc="">
				<comm cntt="Should be called from FolderSetup Plugin"/>
				<comm cntt="refreshFolderInformation();"/>
				<param name="toid"/>
				<param name="name"/>
				<param name="holds_messages"/>
				<param name="holds_folders"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.removeFolder(String, boolean)" access="pub" jdoc="">
				<comm cntt="Should be called from FolderSetup Plugin"/>
				<comm cntt="refreshFolderInformation();"/>
				<param name="id"/>
				<param name="recurse"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getEnv(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.setEnv(String, String)" access="pub" jdoc="">
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.setException(Exception)" access="pub" jdoc="">
				<param name="ex"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.setEnv()" access="pub" jdoc="">
				<comm cntt="This will soon replace &amp;quot;ENV&amp;quot;:"/>
				<comm cntt="Add all languages to the state"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getUser()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getUserName()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getRemoteAddress()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.getActiveConnections()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.setSent(boolean)" access="pub" jdoc="">
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.isSent()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.formatDate(long)" access="priv" jdoc="">
				<param name="date"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.WebMailSession.handleTransportException(SendFailedException)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.URLHandler" intfc="y" abs="n" inn="n" sloc="5" jdoc="Classes that want to register for handling URLs must implement this. @author Sebastian Schaffert @versin $Revision: 1.1.1.1 $">
			<mth name="/:net.wastl.webmail.server.URLHandler.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.URLHandler.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.URLHandler.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<param name="suburl"/>
				<param name="session"/>
				<param name="header"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.Plugin" intfc="y" abs="n" inn="n" sloc="8" jdoc="This provides a generic interface for WebMail Plugins @author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<mth name="/:net.wastl.webmail.server.Plugin.register(WebMailServer)" access="pub" jdoc="Register this plugin with a WebMailServer The plugin thus has access to most WebMail objects.">
				<param name="parent"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.Plugin.getName()" access="pub" jdoc="Return the name for this plugin.">
			</mth>
			<mth name="/:net.wastl.webmail.server.Plugin.getDescription()" access="pub" jdoc="Return a short description for this plugin to be shown in the plugin list and perhaps in configuration">
			</mth>
			<mth name="/:net.wastl.webmail.server.Plugin.getVersion()" access="pub" jdoc="Get a version information for this plugin. This is used for informational purposes only.">
			</mth>
			<mth name="/:net.wastl.webmail.server.Plugin.provides()" access="pub" jdoc="Return a stringlist (comma seperated) of features this plugin provides. @see requires">
			</mth>
			<mth name="/:net.wastl.webmail.server.Plugin.requires()" access="pub" jdoc="Return a stringlist (comma seperated) of features this plugin requires. @see provides">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.URLHandlerTreeNode" intfc="y" abs="n" inn="n" sloc="3" jdoc="This is an interface just to ensure that the URLHandlerTree gets correct data.">
			<mth name="/:net.wastl.webmail.server.URLHandlerTreeNode.getURL()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/:net.wastl.webmail.server.http">
		<class name="/:net.wastl.webmail.server.http.HTTPResponseHeader" intfc="n" abs="n" inn="n" sloc="50" jdoc="HTTPHeader.java Created: Tue Feb 2 15:25:48 1999 @author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<field name="status" access="priv" jdoc=""/>
			<field name="response_code" access="priv" jdoc=""/>
			<field name="http_version" access="priv" jdoc=""/>
			<field name="response_line" access="priv" jdoc=""/>
			<field name="headers" access="priv" jdoc=""/>
			<mth name="/:net.wastl.webmail.server.http.HTTPResponseHeader.HTTPResponseHeader(int, String)" access="pub" jdoc="">
				<param name="response_code"/>
				<param name="status"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPResponseHeader.getResponseLine()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPResponseHeader.putHeader(String, String)" access="pub" jdoc="">
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPResponseHeader.getHeader(String)" access="pub" jdoc="">
				<param name="t"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPResponseHeader.removeHeader(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPResponseHeader.getHeaderKeys()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPResponseHeader.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.server.http.HTTPRequestHeader" intfc="n" abs="n" inn="n" sloc="92" jdoc="HTTPHeader.java Created: Tue Feb 2 15:25:48 1999 @author Sebastian Schaffert @version">
			<field name="content" access="priv" jdoc=""/>
			<field name="headers" access="priv" jdoc=""/>
			<mth name="/:net.wastl.webmail.server.http.HTTPRequestHeader.HTTPRequestHeader()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPRequestHeader.getMethod()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPRequestHeader.getPath()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPRequestHeader.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPRequestHeader.setPath(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPRequestHeader.setMethod(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPRequestHeader.setVersion(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPRequestHeader.setHeader(String, String)" access="pub" jdoc="">
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPRequestHeader.getHeader(String)" access="pub" jdoc="">
				<param name="t"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPRequestHeader.getContent()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPRequestHeader.getObjContent(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPRequestHeader.getContent(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPRequestHeader.isContentSet(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPRequestHeader.setContent(String, Object)" access="pub" jdoc="">
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPRequestHeader.getHeaderKeys()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPRequestHeader.getContentKeys()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.server.http.HTTPRequestHeader.toString()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/:net.wastl.webmail.storage">
		<class name="/:net.wastl.webmail.storage.FileStorage" intfc="n" abs="y" inn="n" sloc="350" jdoc="This is the FileStorage class is common to all other storage classes in WebMail It provides means of getting and storing data in ZIPFiles and ResourceBundles, for example HTML-templates, binary files and MIME-types @see Storage @author Sebastian Schaffert @versin $Revision: 1.1.1.1 $">
			<comm cntt="protected Hashtable file_cache;;"/>
			<field name="resources" access="prot" jdoc=""/>
			<field name="file_resources" access="prot" jdoc=""/>
			<field name="stylesheet_cache" access="prot" jdoc=""/>
			<field name="binary_cache" access="prot" jdoc=""/>
			<field name="auth" access="prot" jdoc="Stores Locale ExpireableCache pairs"/>
			<field name="mime_types" access="prot" jdoc=""/>
			<field name="logger" access="prot" jdoc=""/>
			<field name="df" access="prot" jdoc=""/>
			<field name="init_complete" access="priv" jdoc=""/>
			<field name="file_cache_size" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.storage.FileStorage.FileStorage(WebMailServer)" access="pub" jdoc="Initialize SimpleStorage. Fetch Configuration Information etc.">
				<comm cntt="Now included in configuration:"/>
				<comm cntt="initVirtualDomains();"/>
				<param name="parent"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.FileStorage.initConfig()" access="prot" jdoc="initialize XMLSystemData sysdata">
			</mth>
			<mth name="/:net.wastl.webmail.storage.FileStorage.initCache()" access="prot" jdoc="">
				<comm cntt="Initialize the file cache"/>
				<comm cntt="Now the same for the stylesheet cache"/>
				<comm cntt="And for binary files"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.FileStorage.initLog()" access="prot" jdoc="">
				<comm cntt="Print a warning!"/>
				<comm cntt="Print a warning!"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.FileStorage.initAuth()" access="prot" jdoc="">
				<comm cntt="IMAP level authentication"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.FileStorage.initMIME()" access="prot" jdoc="">
				<comm cntt="System.err.println(key+&amp;quot; -&amp;gt; &amp;quot;+type);"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.FileStorage.initLanguages()" access="prot" jdoc="">
				<comm cntt="Now we try to cache the Locale list since it takes really long to gather it!"/>
				<comm cntt="We should cache this on disk since it is so slow!"/>
				<comm cntt="Do this manually, as it is not JDK 1.1 compatible ..."/>
				<comm cntt="Vector available=new Vector(Arrays.asList(available1));"/>
				<comm cntt="Setup list of themes for each language"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.FileStorage.getStringResource(String, Locale)" access="pub" jdoc="Get the String for key and the specified locale. @param key Identifier for the String @param locale locale of the String to fetch">
				<comm cntt="Modified by exce, start."/>
				<comm cntt="ResourceBundle rc=XMLResourceBundle.getBundle(&amp;quot;resources&amp;quot;,locale,null);"/>
				<comm cntt="Modified by exce, end."/>
				<param name="key"/>
				<param name="locale"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.FileStorage.getStylesheet(String, Locale, String)" access="pub" jdoc="Return the requested Stylesheet, precompiled and fitting to the locale and theme">
				<comm cntt="Keep statistics :-)"/>
				<comm cntt="System.err.println(&amp;quot;Error while compiling stylesheet &amp;quot;+name+&amp;quot;, language=&amp;quot;+locale.getLanguage()+&amp;quot;, theme=&amp;quot;+theme+&amp;quot;.&amp;quot;);"/>
				<param name="name"/>
				<param name="locale"/>
				<param name="theme"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.FileStorage.getBinaryFile(String, Locale, String)" access="pub" jdoc="Get a binary file for the specified locale. @param key Identifier for the String @param locale locale of the String to fetch">
				<comm cntt="Keep statistics :-)"/>
				<param name="name"/>
				<param name="locale"/>
				<param name="theme"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.FileStorage.getAuthenticator()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.storage.FileStorage.log(int, String)" access="pub" jdoc="Send a message to the logging facility. @param level severity level of the message @param message the message">
				<param name="level"/>
				<param name="message"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.FileStorage.log(int, Exception)" access="pub" jdoc="Send a message to the logging facility. @param level severity level of the message @param message the message">
				<param name="level"/>
				<param name="ex"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.FileStorage.formatDate(long)" access="prot" jdoc="">
				<param name="date"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.FileStorage.shutdown()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.storage.FileStorage.getMimeType(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.FileStorage.notifyConfigurationChange(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.FileStorage.toString()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/:net.wastl.webmail.storage.simple">
		<class name="/:net.wastl.webmail.storage.simple.SimpleStorage" intfc="n" abs="n" inn="n" sloc="247" jdoc="This is the SimpleStorage class for the non-enterprise edition of WebMail. It provides means of getting and storing data in ZIPFiles and ResourceBundles. @see net.wastl.webmail.server.Storage @author Sebastian Schaffert @versin $Revision: 1.1.1.1 $">
			<const name="user_domain_separator" access="pub" jdoc=""/>
			<field name="resources" access="prot" jdoc=""/>
			<field name="vdoms" access="prot" jdoc=""/>
			<field name="user_cache" access="prot" jdoc=""/>
			<field name="user_cache_size" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.storage.simple.SimpleStorage.SimpleStorage(WebMailServer)" access="pub" jdoc="Initialize SimpleStorage. Fetch Configuration Information etc.">
				<param name="parent"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.simple.SimpleStorage.initConfig()" access="prot" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.storage.simple.SimpleStorage.loadXMLSysData()" access="prot" jdoc="">
				<comm cntt="String file=datapath+System.getProperty(&amp;quot;file.separator&amp;quot;)+&amp;quot;webmail.xml&amp;quot;;"/>
				<comm cntt="bug fixed by Christian Senet"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.simple.SimpleStorage.saveXMLSysData()" access="prot" jdoc="">
				<comm cntt="XMLCommon.writeXML(d,cfg_out,parent.getProperty(&amp;quot;webmail.xml.path&amp;quot;)+"/>
				<comm cntt="System.getProperty(&amp;quot;file.separator&amp;quot;)+&amp;quot;sysdata.dtd&amp;quot;);"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.simple.SimpleStorage.initCache()" access="prot" jdoc="">
				<comm cntt="Initialize the file cache from FileStorage"/>
				<comm cntt="Now initialize the user cache"/>
				<comm cntt="Default value 100, if parsing fails."/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.simple.SimpleStorage.getUsers(String)" access="pub" jdoc="">
				<param name="domain"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.simple.SimpleStorage.createUserData(String, String, String)" access="pub" jdoc="">
				<param name="user"/>
				<param name="domain"/>
				<param name="password"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.simple.SimpleStorage.getUserData(String, String, String, boolean)" access="pub" jdoc="@see net.wastl.webmail.server.Storage.getUserData() devink 7 15 2000 - Added TwoPassAuthenticationException - changed to doAuth UserData() - Added challenged arg. 9 24 2000 - reverted to old getUserData for new cr auth">
				<comm cntt="Document root = parser.parse(new InputSource(new InputStreamReader(new FileInputStream(f.getAbsolutePath()), &amp;quot;UTF-8&amp;quot;)));"/>
				<param name="user"/>
				<param name="domain"/>
				<param name="password"/>
				<param name="authenticate"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.simple.SimpleStorage.saveUserData(String, String)" access="pub" jdoc="">
				<comm cntt="XMLCommon.writeXML(d,out,parent.getProperty(&amp;quot;webmail.xml.path&amp;quot;)+"/>
				<comm cntt="System.getProperty(&amp;quot;file.separator&amp;quot;)+&amp;quot;userdata.dtd&amp;quot;);"/>
				<param name="user"/>
				<param name="domain"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.simple.SimpleStorage.deleteUserData(String, String)" access="pub" jdoc="Delete a WebMail user @param user Name of the user to delete">
				<param name="user"/>
				<param name="domain"/>
			</mth>
			<mth name="/:net.wastl.webmail.storage.simple.SimpleStorage.toString()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/:net.wastl.webmail.ui.html">
		<class name="/:net.wastl.webmail.ui.html.HTMLDocument" intfc="n" abs="n" inn="n" sloc="47" jdoc="WebMail&amp;apos;s class for representing HTML Documents. @author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<comm cntt="public HTMLDocument(String title,Storage loader, String docname) {"/>
			<comm cntt="this(title,loader.getTextFile(loader.getStringResource(docname,Locale.getDefault()),Locale.getDefault()));"/>
			<comm cntt="}"/>
			<comm cntt="public HTMLDocument(String title,Storage loader, String docname, String basepath) {"/>
			<comm cntt="this(title,loader.getTextFile(loader.getStringResource(docname,Locale.getDefault()),Locale.getDefault()),basepath);"/>
			<comm cntt="}"/>
			<field name="content" access="prot" jdoc=""/>
			<field name="header" access="prot" jdoc=""/>
			<field name="httpheaders" access="prot" jdoc=""/>
			<field name="returncode" access="prot" jdoc=""/>
			<field name="returnstatus" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.ui.html.HTMLDocument.HTMLDocument()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.HTMLDocument.HTMLDocument(String, String)" access="pub" jdoc="">
				<param name="title"/>
				<param name="content"/>
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.HTMLDocument.HTMLDocument(String, String, String)" access="pub" jdoc="">
				<comm cntt="try {"/>
				<comm cntt="RE regexp2=new RE(&amp;quot;&amp;lt;&amp;lt;BASE&amp;gt;&amp;gt;&amp;quot;,RE.REG_ICASE &amp; RE.REG_MULTILINE);"/>
				<comm cntt="content=regexp2.substituteAll(content,basepath);"/>
				<comm cntt="} catch(Exception e) {"/>
				<comm cntt="e.printStackTrace();"/>
				<comm cntt="}"/>
				<param name="title"/>
				<param name="cont"/>
				<param name="basepath"/>
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.HTMLDocument.addHTTPHeader(String, String)" access="pub" jdoc="">
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.HTMLDocument.getHTTPHeaderKeys()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.HTMLDocument.getHTTPHeader(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.HTMLDocument.hasHTTPHeader()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.HTMLDocument.getReturnCode()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.HTMLDocument.getReturnStatus()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.HTMLDocument.setStatus(int, String)" access="pub" jdoc="">
				<param name="code"/>
				<param name="status"/>
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.HTMLDocument.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.HTMLDocument.length()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.ui.html.HTMLImage" intfc="n" abs="n" inn="n" sloc="27" jdoc="A HTML Document that is actually an image.:-) @author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<field name="cont" access="pub" jdoc=""/>
			<mth name="/:net.wastl.webmail.ui.html.HTMLImage.HTMLImage(ByteStore)" access="pub" jdoc="">
				<param name="content"/>
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.HTMLImage.HTMLImage(Storage, String, Locale, String)" access="pub" jdoc="">
				<param name="store"/>
				<param name="name"/>
				<param name="locale"/>
				<param name="theme"/>
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.HTMLImage.size()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.HTMLImage.getContentEncoding()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.HTMLImage.getContentType()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.HTMLImage.toBinary()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.ui.html.JavaScriptFilter" intfc="n" abs="n" inn="n" sloc="31" jdoc="Filter JavaScript content from HTML messages to avoid security problems. @author Sebastian Schaffert @version">
			<field name="filter" access="priv" jdoc=""/>
			<field name="substitution" access="priv" jdoc=""/>
			<field name="initialized" access="priv" jdoc=""/>
			<mth name="/:net.wastl.webmail.ui.html.JavaScriptFilter.JavaScriptFilter()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.JavaScriptFilter.init()" access="pub" jdoc="">
				<comm cntt="Link highlighting"/>
				<comm cntt="uri=new RE(&amp;quot;http\\:\\ \\ (.+)(html|\\ )(\\S|\\-|\\+|\\.|\\\|\\:)&amp;quot;);"/>
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.JavaScriptFilter.apply(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.ui.html.Fancyfier" intfc="n" abs="n" inn="n" sloc="74" jdoc="Do some fancifying with the messages. Also filters JavaScript. Created: Mon Feb 22 14:55:36 1999 @author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<field name="regs" access="priv" jdoc=""/>
			<field name="uri" access="priv" jdoc=""/>
			<field name="repls" access="priv" jdoc=""/>
			<mth name="/:net.wastl.webmail.ui.html.Fancyfier.Fancyfier()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.Fancyfier.init()" access="pub" jdoc="">
				<comm cntt="Smiley substitution"/>
				<comm cntt="Link highlighting"/>
				<comm cntt="uri=new RE(&amp;quot;http\\:\\ \\ (.+)(html|\\ )(\\S|\\-|\\+|\\.|\\\|\\:)&amp;quot;);"/>
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.Fancyfier.apply(String)" access="pub" jdoc="">
				<comm cntt="retval=regs[i].substituteAll(retval,repls[i]);"/>
				<param name="s"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.ui.html.HTMLHeader" intfc="n" abs="n" inn="n" sloc="14" jdoc="A HTML header used by HTMLDocument. @author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<field name="title" access="priv" jdoc=""/>
			<mth name="/:net.wastl.webmail.ui.html.HTMLHeader.HTMLHeader(String)" access="pub" jdoc="">
				<param name="title"/>
			</mth>
			<mth name="/:net.wastl.webmail.ui.html.HTMLHeader.toString()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/:net.wastl.webmail.ui.xml">
		<class name="/:net.wastl.webmail.ui.xml.XHTMLDocument" intfc="n" abs="n" inn="n" sloc="44" jdoc="Constructs HTML-Documents using a Stylesheet and a XML Document. @author Sebastian Schaffert @version">
			<mth name="/:net.wastl.webmail.ui.xml.XHTMLDocument.XHTMLDocument(Document, String)" access="pub" jdoc="">
				<comm cntt="processor.setDiagnosticsOutput(System.err);"/>
				<comm cntt="System.err.println(&amp;quot;Transformation XML --&amp;gt; XHTML took &amp;quot;+(end_t-start_t)+&amp;quot; ms.&amp;quot;);"/>
				<param name="xml"/>
				<param name="xsl"/>
			</mth>
			<mth name="/:net.wastl.webmail.ui.xml.XHTMLDocument.XHTMLDocument(Document, Templates)" access="pub" jdoc="">
				<comm cntt="System.err.println(&amp;quot;Transformation (with precompiled stylesheet) XML --&amp;gt; XHTML took &amp;quot;+(end_t-start_t)+&amp;quot; ms.&amp;quot;);"/>
				<param name="xml"/>
				<param name="stylesheet"/>
			</mth>
			<mth name="/:net.wastl.webmail.ui.xml.XHTMLDocument.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.ui.xml.XHTMLDocument.length()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/:net.wastl.webmail.xml">
		<class name="/:net.wastl.webmail.xml.XMLUserModel" intfc="n" abs="n" inn="n" sloc="206" jdoc="Mainly consists of a DOM that represents all of the data in the user&amp;apos;s session. On subtrees, there are the SYSDATA and the USERDATA DOM trees (among other stuff like folder list, message list, etc) Many methods here are synchronized but that shouldn&amp;apos;t hurt performance too much since the cases where several Threads access the model are rare anyway @author Sebastian Schaffert @version">
			<field name="usermodel" access="prot" jdoc=""/>
			<field name="userdata" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.XMLUserModel(WebMailServer, Element, Element)" access="pub" jdoc="">
				<param name="parent"/>
				<param name="rsysdata"/>
				<param name="ruserdata"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.initRoot()" access="prot" jdoc="">
				<comm cntt="Create a new usermodel from the template file"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.update()" access="pub" jdoc="">
				<comm cntt="Insert the sysdata and userdata objects into the usermodel tree"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.createFolder(String, String, boolean, boolean)" access="pub" jdoc="">
				<param name="id"/>
				<param name="name"/>
				<param name="holds_folders"/>
				<param name="holds_messages"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.getFolder(String)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.createMessageList()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.getMessageList(Element)" access="pub" jdoc="Get messagelist for folder. Create if necessary.">
				<param name="folder"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.removeMessageList(Element)" access="pub" jdoc="">
				<param name="folder"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.messageCached(Element, String)" access="pub" jdoc="Check whether we already fetched this message. This can save a lot of time and CPU.">
				<param name="folder"/>
				<param name="msgid"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.getMessage(Element, String, String)" access="pub" jdoc="">
				<param name="folder"/>
				<param name="msgnr"/>
				<param name="msgid"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.getWorkMessage()" access="pub" jdoc="Return the WORK element that stores messages that are currently edited.">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.clearWork()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.setWorkMessage(XMLMessage)" access="pub" jdoc="Set the current work message (for forwarding and replying). Note that this method uses importNode, therefore the newly cloned message element is returned by this method.">
				<param name="message"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.createMailhost(String, String, String)" access="pub" jdoc="">
				<param name="name"/>
				<param name="id"/>
				<param name="url"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.addMailhost(Element)" access="pub" jdoc="Add a previously created Mailhost to the DOM. The Mailhost should already contain all the subfolders.:-)">
				<param name="mh"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.setCurrent(String, String)" access="prot" jdoc="">
				<param name="type"/>
				<param name="id"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.getCurrent(String, String)" access="prot" jdoc="">
				<param name="type"/>
				<param name="id"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.setCurrentMessage(String)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.setCurrentFolder(String)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.getCurrentMessage(String)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserModel.getCurrentFolder(String)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.xml.XMLMessage" intfc="n" abs="n" inn="n" sloc="142" jdoc="Represents an XML message object (part of the XMLUserModel) @see XMLUserModel">
			<field name="message" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.xml.XMLMessage.XMLMessage(Element)" access="pub" jdoc="">
				<param name="message"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessage.getMessageElement()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessage.messageCompletelyCached()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessage.prepareReply(String, String, String, String)" access="pub" jdoc="">
				<comm cntt="Test whether this is already a reply (prefixed with RE or AW)"/>
				<param name="prefix_subject"/>
				<param name="postfix_subject"/>
				<param name="prefix_message"/>
				<param name="postfix_message"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessage.prepareForward(String, String, String, String)" access="pub" jdoc="">
				<param name="prefix_subject"/>
				<param name="postfix_subject"/>
				<param name="prefix_message"/>
				<param name="postfix_message"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessage.getHeader()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessage.getHeader(String)" access="pub" jdoc="">
				<param name="header"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessage.setHeader(String, String)" access="pub" jdoc="">
				<param name="header"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessage.isReply(String)" access="prot" jdoc="">
				<param name="subject"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessage.getFirstMessageTextPart(Element)" access="prot" jdoc="">
				<comm cntt="Modified by exce, start"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="Modified by exce, end"/>
				<param name="parent"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessage.getFirstMessageTextPart()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessage.getFirstMessageMultiPart()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.xml.XMLAdminModel" intfc="n" abs="n" inn="n" sloc="25" jdoc="Used to represent an Admin&amp;apos;s state model @author Sebastian Schaffert @version">
			<mth name="/:net.wastl.webmail.xml.XMLAdminModel.XMLAdminModel(WebMailServer, Element)" access="pub" jdoc="">
				<param name="parent"/>
				<param name="rsysdata"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLAdminModel.addStateElement(String)" access="pub" jdoc="">
				<param name="tag"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLAdminModel.createElement(String)" access="pub" jdoc="">
				<param name="tag"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLAdminModel.createTextElement(String, String)" access="pub" jdoc="">
				<param name="tag"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLAdminModel.importUserData(Element)" access="pub" jdoc="">
				<param name="userdata"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLAdminModel.clearUserData()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.xml.XMLUserData" intfc="n" abs="n" inn="n" sloc="367" jdoc="@author Sebastian Schaffert @version">
			<comm cntt="9 25 2000 devink -- modified for challenge response authentication"/>
			<field name="root" access="prot" jdoc=""/>
			<field name="userdata" access="prot" jdoc=""/>
			<field name="debug" access="prot" jdoc=""/>
			<field name="login_time" access="prot" jdoc=""/>
			<field name="logged_in" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.XMLUserData(Document)" access="pub" jdoc="">
				<param name="d"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.init(String, String, String)" access="pub" jdoc="">
				<comm cntt="This is a special case when the user already contains the domain"/>
				<comm cntt="e.g. QMail"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="setPreferredLocale(Locale.getDefault().toString());"/>
				<comm cntt="Modified by exce, end"/>
				<param name="user"/>
				<param name="domain"/>
				<param name="password"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getRoot()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getUserData()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getDocumentFragment()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.ensureElement(String, String, String)" access="prot" jdoc="">
				<comm cntt="No attribute required"/>
				<comm cntt="Attribute exists, value is not requested"/>
				<param name="tag"/>
				<param name="attribute"/>
				<param name="att_value"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.login()" access="pub" jdoc="">
				<comm cntt="Increase login count and last login pointer"/>
				<comm cntt="setIntVar(&amp;quot;last login&amp;quot;,System.currentTimeMillis());"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.logout()" access="pub" jdoc="">
				<comm cntt="Modified by exce, start"/>
				<comm cntt="Modified by exce, end"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.addMailHost(String, String, String, String)" access="pub" jdoc="">
				<comm cntt="First, check whether a mailhost with this name already exists."/>
				<comm cntt="Delete, if yes."/>
				<comm cntt="System.err.println(&amp;quot;Adding mailhost &amp;quot;+name);"/>
				<comm cntt="System.err.println(&amp;quot;Done mailhost &amp;quot;+name);"/>
				<comm cntt="XMLCommon.writeXML(root,System.err,&amp;quot;&amp;quot;);"/>
				<param name="name"/>
				<param name="host"/>
				<param name="login"/>
				<param name="password"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.removeMailHost(String)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getMailHost(String)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.mailHosts()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getMaxShowMessages()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setMaxShowMessages(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getLogin()" access="pub" jdoc="As of WebMail 0.7.0 this is different from the username, because it consists of the username and the domain. @see getUserName()">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getFullName()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setFullName(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getSignature()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setSignature(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getEmail()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setEmail(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getPreferredLocale()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setPreferredLocale(String)" access="pub" jdoc="">
				<param name="newloc"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getTheme()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setTheme(String)" access="pub" jdoc="">
				<param name="theme"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.formatDate(long)" access="priv" jdoc="">
				<param name="date"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getFirstLogin()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getLastLogin()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getLoginCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.checkPassword(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setPassword(String, String)" access="pub" jdoc="">
				<comm cntt="Generate the crypted password; avoid problems with XML parsing"/>
				<comm cntt="This has to be some integer between 46 and 127 for the Helper"/>
				<comm cntt="class"/>
				<param name="newpasswd"/>
				<param name="verify"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setPasswordData(String)" access="pub" jdoc="">
				<param name="data"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getPasswordData()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getMaxLineLength()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setMaxLineLength(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.wantsBreakLines()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setBreakLines(boolean)" access="pub" jdoc="">
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.wantsShowImages()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setShowImages(boolean)" access="pub" jdoc="">
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.wantsShowFancy()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setShowFancy(boolean)" access="pub" jdoc="">
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.wantsSetFlags()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setSetFlags(boolean)" access="pub" jdoc="">
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setSaveSent(boolean)" access="pub" jdoc="">
				<param name="b"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.wantsSaveSent()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getSentFolder()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setSentFolder(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getDomain()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setDomain(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getUserName()" access="pub" jdoc="Return the username without the domain (in contrast to getLogin()). @see getLogin()">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setUserName(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setIntVar(String, long)" access="pub" jdoc="">
				<param name="var"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getIntVar(String)" access="pub" jdoc="">
				<param name="var"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setBoolVar(String, boolean)" access="pub" jdoc="">
				<param name="var"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getBoolVar(String)" access="pub" jdoc="">
				<param name="var"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setIntVarWrapper(String, long)" access="prot" jdoc="Wrapper method for setting all bool vars">
				<param name="var"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getIntVarWrapper(String)" access="prot" jdoc="">
				<param name="var"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.setBoolVarWrapper(String, boolean)" access="prot" jdoc="Wrapper method for setting all bool vars">
				<param name="var"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.getBoolVarWrapper(String)" access="prot" jdoc="">
				<param name="var"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLUserData.resetBoolVars()" access="pub" jdoc="Set all boolvars to &amp;quot;false&amp;quot;.">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.xml.XMLGenericModel" intfc="n" abs="n" inn="n" sloc="127" jdoc="A generic representation of WebMail data. Contains mainly state information and the system configuration @author Sebastian Schaffert @version">
			<field name="root" access="prot" jdoc=""/>
			<field name="sysdata" access="prot" jdoc=""/>
			<field name="statedata" access="prot" jdoc=""/>
			<field name="parent" access="prot" jdoc=""/>
			<field name="current_id" access="prot" jdoc=""/>
			<field name="parser" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.xml.XMLGenericModel.XMLGenericModel(WebMailServer, Element)" access="pub" jdoc="">
				<param name="parent"/>
				<param name="rsysdata"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLGenericModel.initRoot()" access="prot" jdoc="">
				<comm cntt="Create a new usermodel from the template file"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLGenericModel.getRoot()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLGenericModel.getStateData()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLGenericModel.init()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLGenericModel.update()" access="pub" jdoc="">
				<comm cntt="Insert the sysdata and userdata objects into the usermodel tree"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLGenericModel.getNextID()" access="pub" jdoc="Create a unique ID. Important: This returns a new Unique ID within this session. It should be used to generate IDs for Folders and messages so that they can be easily referenced">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLGenericModel.setException(Exception)" access="pub" jdoc="">
				<comm cntt="XMLCommon.debugXML(root);"/>
				<param name="ex"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLGenericModel.setStateVar(String, String)" access="pub" jdoc="We need to synchronize that to avoid problems, but this should be fast anyway">
				<param name="name"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLGenericModel.createStateVar(String, String)" access="pub" jdoc="">
				<param name="name"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLGenericModel.addStateVar(String, String)" access="pub" jdoc="">
				<param name="name"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLGenericModel.removeAllStateVars(String)" access="pub" jdoc="We need to synchronize that because it can cause problems with multiple threads">
				<comm cntt="This suxx: NodeList Object is changed when removing children !!! I will store all nodes that should be deleted in a Vector and delete them afterwards"/>
				<param name="name"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLGenericModel.getStateVar(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.xml.XMLSystemData" intfc="n" abs="n" inn="n" sloc="291" jdoc="This class represents methods for accessing WebMail&amp;apos;s system configuration in a XML tree. @author Sebastian Schaffert @version $Revision: 1.1.1.1 $">
			<comm cntt="Save the time when this document has been loaded. Might be used to reload a document with a higher modification time"/>
			<field name="root" access="prot" jdoc=""/>
			<field name="sysdata" access="prot" jdoc=""/>
			<field name="loadtime" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.XMLSystemData(Document, ConfigScheme)" access="pub" jdoc="">
				<param name="d"/>
				<param name="cs"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.getLoadTime()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.setLoadTime(long)" access="pub" jdoc="">
				<param name="time"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.getRoot()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.getSysData()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.getDocumentFragment()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.getConfigRaw(String)" access="prot" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.setConfigRaw(String, String, String, String)" access="pub" jdoc="">
				<comm cntt="System.err.println(&amp;quot;XMLSystemData: &amp;quot;+groupname+&amp;quot; &amp;quot;+key+&amp;quot; = &amp;quot;+value);"/>
				<comm cntt="Find all GROUP elements"/>
				<comm cntt="If the group name matches, find all keys"/>
				<comm cntt="If the key already exists, replace it"/>
				<comm cntt="If the key was not found, append it"/>
				<param name="groupname"/>
				<param name="key"/>
				<param name="value"/>
				<param name="type"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.createConfigGroup(String)" access="prot" jdoc="">
				<param name="groupname"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.deleteConfigGroup(String)" access="prot" jdoc="">
				<param name="groupname"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.getConfigElementByKey(String)" access="prot" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.initChoices()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.initChoices(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.createConfigElement(String, String, String)" access="prot" jdoc="">
				<param name="key"/>
				<param name="value"/>
				<param name="type"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.getVirtualDomains()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.getVirtualDomain(String)" access="pub" jdoc="">
				<param name="domname"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.setVirtualDomain(String, WebMailVirtualDomain)" access="pub" jdoc="This is just completely useless, since you can change virtual domains directly. It should be removed ASAP">
				<param name="name"/>
				<param name="domain"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.deleteVirtualDomain(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLSystemData.createVirtualDomain(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.xml.XMLResourceBundle" intfc="n" abs="n" inn="n" sloc="97" jdoc="A ResourceBundle implementation that uses a XML file to store the resources. @author Sebastian Schaffert @version">
			<field name="debug" access="prot" jdoc=""/>
			<field name="root" access="prot" jdoc=""/>
			<field name="language" access="prot" jdoc=""/>
			<field name="elem_locale" access="prot" jdoc=""/>
			<field name="elem_common" access="prot" jdoc=""/>
			<field name="elem_default" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.xml.XMLResourceBundle.XMLResourceBundle(String, String)" access="pub" jdoc="">
				<comm cntt="Now the locale specific stuff; fallback to default if not possbile"/>
				<param name="resourcefile"/>
				<param name="lang"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLResourceBundle.getResult(Element, String)" access="prot" jdoc="">
				<param name="element"/>
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLResourceBundle.handleGetObject(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLResourceBundle.getKeys(Element, Hashtable)" access="prot" jdoc="">
				<param name="element"/>
				<param name="hash"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLResourceBundle.getKeys()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLResourceBundle.getBundle(String, Locale, ClassLoader)" access="pub" jdoc="">
				<param name="name"/>
				<param name="locale"/>
				<param name="cl"/>
			</mth>
		</class>
		<class name="/:net.wastl.webmail.xml.XMLMessagePart" intfc="n" abs="n" inn="n" sloc="105" jdoc="A message part object for an XML message">
			<field name="root" access="prot" jdoc=""/>
			<field name="part" access="prot" jdoc=""/>
			<mth name="/:net.wastl.webmail.xml.XMLMessagePart.XMLMessagePart(Document)" access="pub" jdoc="Create a new part for the given root document. Creates the necessary Element.">
				<param name="root"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessagePart.XMLMessagePart(Element)" access="pub" jdoc="Return a new part for a given part element">
				<param name="part"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessagePart.getPartElement()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessagePart.setAttribute(String, String)" access="pub" jdoc="">
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessagePart.getAttribute(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessagePart.quoteContent()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessagePart.addContent(Document)" access="pub" jdoc="This method is designed for content that already is in DOM format, like HTML messages.">
				<comm cntt="Find all &amp;lt;BODY&amp;gt; elements and add the child nodes to the content"/>
				<comm cntt="XMLCommon.debugXML(root);"/>
				<param name="content"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessagePart.addContent(String, int)" access="pub" jdoc="">
				<param name="content"/>
				<param name="quotelevel"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessagePart.insertContent(String, int)" access="pub" jdoc="">
				<param name="content"/>
				<param name="quotelevel"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessagePart.addJavaScript(String)" access="pub" jdoc="">
				<param name="content"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessagePart.removeAllContent()" access="pub" jdoc="">
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessagePart.createPart(String)" access="pub" jdoc="">
				<param name="type"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessagePart.insertPart(XMLMessagePart)" access="pub" jdoc="">
				<param name="childpart"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessagePart.appendPart(XMLMessagePart)" access="pub" jdoc="">
				<param name="childpart"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessagePart.getParts()" access="pub" jdoc="">
				<comm cntt="Sucking NodeList needs a Vector to store Elements that will be removed!"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessagePart.removePart(XMLMessagePart)" access="pub" jdoc="">
				<param name="childpart"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLMessagePart.removeAllParts()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:net.wastl.webmail.xml.XMLCommon" intfc="n" abs="n" inn="n" sloc="235" jdoc="This class contains some static methods that are used commonly in other WebMail parts. @author Sebastian Schaffert @version">
			<mth name="/:net.wastl.webmail.xml.XMLCommon.getElementByAttribute(Element, String, String, String)" access="pub" jdoc="">
				<param name="root"/>
				<param name="tagname"/>
				<param name="attribute"/>
				<param name="att_value"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLCommon.getElementTextValue(Element)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLCommon.setElementTextValue(Element, String)" access="pub" jdoc="">
				<param name="e"/>
				<param name="text"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLCommon.setElementTextValue(Element, String, boolean)" access="pub" jdoc="">
				<comm cntt="This suxx: NodeList Object is changed when removing children !!! I will store all nodes that should be deleted in a Vector and delete them afterwards"/>
				<param name="e"/>
				<param name="text"/>
				<param name="cdata"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLCommon.getTagValue(Element, String)" access="pub" jdoc="">
				<param name="e"/>
				<param name="tagname"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLCommon.setTagValue(Element, String, String)" access="pub" jdoc="Set the value of the first tag below e with name tagname to text.">
				<param name="e"/>
				<param name="tagname"/>
				<param name="text"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLCommon.setTagValue(Element, String, String, boolean)" access="pub" jdoc="">
				<param name="e"/>
				<param name="tagname"/>
				<param name="text"/>
				<param name="cdata"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLCommon.setTagValue(Element, String, String, boolean, String)" access="pub" jdoc="">
				<param name="e"/>
				<param name="tagname"/>
				<param name="text"/>
				<param name="unique"/>
				<param name="errormsg"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLCommon.setTagValue(Element, String, String, boolean, String, boolean)" access="pub" jdoc="">
				<comm cntt="Check for double entries!"/>
				<comm cntt="debugXML(root);"/>
				<param name="e"/>
				<param name="tagname"/>
				<param name="text"/>
				<param name="unique"/>
				<param name="errormsg"/>
				<param name="cdata"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLCommon.genericRemoveAll(Element, String)" access="pub" jdoc="">
				<param name="parent"/>
				<param name="tagname"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLCommon.writeXML(Document, OutputStream, String)" access="pub" jdoc="">
				<comm cntt="Modified by exce, start"/>
				<comm cntt="PrintWriter out=new PrintWriter(os);"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="d.getDocumentElement().normalize();"/>
				<param name="d"/>
				<param name="os"/>
				<param name="sysID"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLCommon.writeXMLwalkTree(Node, int, PrintWriter)" access="prot" jdoc="">
				<comm cntt="elem.normalize();"/>
				<comm cntt="for(int j=0;j&amp;lt;indent;j++) {"/>
				<comm cntt="out.print(&amp;quot; &amp;quot;);"/>
				<comm cntt="}"/>
				<comm cntt="for(int j=0;j&amp;lt;indent;j++) {"/>
				<comm cntt="out.print(&amp;quot; &amp;quot;);"/>
				<comm cntt="}"/>
				<comm cntt="for(int j=0;j&amp;lt;indent;j++) {"/>
				<comm cntt="buf2.append(&amp;apos; &amp;apos;);"/>
				<comm cntt="}"/>
				<param name="node"/>
				<param name="indent"/>
				<param name="out"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLCommon.importNode(Document, Node, boolean)" access="pub" jdoc="This is a helper function to deal with problems that occur when importing Nodes from JTidy Documents to Xerces Documents.">
				<param name="d"/>
				<param name="n"/>
				<param name="deep"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLCommon.cloneNode(Document, Node)" access="pub" jdoc="">
				<param name="d"/>
				<param name="n"/>
			</mth>
			<mth name="/:net.wastl.webmail.xml.XMLCommon.debugXML(Document)" access="pub" jdoc="">
				<comm cntt="OutputFormat of=new OutputFormat(Method.XML,&amp;quot;ISO-8859-1&amp;quot;,true);"/>
				<comm cntt="of.setIndenting(true);"/>
				<comm cntt="of.setIndent(2);"/>
				<comm cntt="of.setDoctype(null,d.getDoctype().getName());"/>
				<comm cntt="of.setStandalone(false);"/>
				<comm cntt="System.err.println(&amp;quot;Doctype system:&amp;quot;+of.getDoctypeSystem());"/>
				<comm cntt="XMLSerializer ser=new XMLSerializer(System.out,of);"/>
				<comm cntt="ser.serialize(d.getDocumentElement());"/>
				<param name="d"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/:org.bulbul.webmail.util">
		<class name="/:org.bulbul.webmail.util.TranscodeUtil" intfc="n" abs="n" inn="n" sloc="21" jdoc="TranscodeUtil. Provides transcoding utilities. @author Steve Excellent Lee. @version 1.0 2000">
			<mth name="/:org.bulbul.webmail.util.TranscodeUtil.transcodeThenEncodeByLocale(String, String, Locale)" access="pub" jdoc="Why we need org.bulbul.util.TranscodeUtil.transcodeThenEncodeByLocale()? Because we specify client browser&amp;apos;s encoding to UTF-8, IE seems to send all data encoded in UTF-8. That means the byte sequences we received are all UTF-8 bytes. However, strings read from HTTP is ISO8859_1 encoded, that&amp;apos;s we need to transcode them (usually from ISO8859_1 to UTF-8. Next we encode those strings using MimeUtility.encodeText() depending on user&amp;apos;s locale. Since MimeUtility.encodeText() is used to convert the strings into its transmission format, finally we can use the strings in the outgoing e-mail, then receiver&amp;apos;s email agent is responsible for decoding the strings. As described in JavaMail document, MimeUtility.encodeText() conforms to RFC2047 and as a result, we&amp;apos;ll get strings like &amp;quot;=?Big5?B......&amp;quot;. @param sourceString String to be encoded @param sourceStringEncoding The encoding to decode `sourceString&amp;apos; string. If `sourceStringEncoding&amp;apos; is null, use JVM&amp;apos;s default enconding. @param Locale prefered locale @return empty string(prevent NullPointerException) if sourceString is null or empty(&amp;quot;&amp;quot;); otherwise RFC2047 conformed string, eg, &amp;quot;=?Iso8859-1?Q.....&amp;quot;">
				<comm cntt="Transcode to UTF-8"/>
				<comm cntt="Encode text"/>
				<param name="sourceString"/>
				<param name="sourceStringEncoding"/>
				<param name="locale"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/:org.bulbul.webmail.xmlresource">
		<class name="/:org.bulbul.webmail.xmlresource.ResourceBase" intfc="n" abs="y" inn="n" sloc="90" jdoc="A ResourceBundle implementation that uses a XML file to store the resources. Modified from Sebastian Schaffert&amp;apos;s net.wastl.webmail.xml.XMLResourceBundle.java New scheme: We separate locale resource to differenet files instead of putting all different locale resources into single xml file, since the encoding can&amp;apos;t vary. (A single xml file can only use one encoding). Subclasses must override &amp;lt;code&amp;gt;getXmlResourceFilename&amp;lt; code&amp;gt; and provide the filename which contains appropriate locale-specific resources. Note: The resource files must resides in the directory that defined by `webmail.template.path&amp;apos; property, hence &amp;lt;code&amp;gt;getXmlResourceFilename&amp;lt; code&amp;gt; must returns only filename without pathname) @author Steve Excellent Lee @version 1.0 2001">
			<comm cntt="The &amp;lt;BUNDLE&amp;gt; element of resource xml file"/>
			<field name="debug" access="prot" jdoc=""/>
			<field name="xmlRoot" access="prot" jdoc=""/>
			<field name="elementBundle" access="prot" jdoc=""/>
			<field name="elem_common" access="prot" jdoc=""/>
			<mth name="/:org.bulbul.webmail.xmlresource.ResourceBase.ResourceBase()" access="pub" jdoc="Sole constructor. (For invocation by subclass constructors, typically implicit.)">
			</mth>
			<mth name="/:org.bulbul.webmail.xmlresource.ResourceBase.getKeys()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.bulbul.webmail.xmlresource.ResourceBase.handleGetObject(String)" access="prot" jdoc="">
				<comm cntt="Lazily load the XML resource file"/>
				<param name="key"/>
			</mth>
			<mth name="/:org.bulbul.webmail.xmlresource.ResourceBase.getXmlResourceFilename()" access="prot" jdoc="See class description.">
			</mth>
			<mth name="/:org.bulbul.webmail.xmlresource.ResourceBase.loadXmlResourceFile()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.bulbul.webmail.xmlresource.ResourceBase.getKeys(Element, Hashtable)" access="prot" jdoc="">
				<param name="element"/>
				<param name="hash"/>
			</mth>
			<mth name="/:org.bulbul.webmail.xmlresource.ResourceBase.getResult(Element, String)" access="prot" jdoc="">
				<param name="element"/>
				<param name="key"/>
			</mth>
		</class>
		<class name="/:org.bulbul.webmail.xmlresource.Resources" intfc="n" abs="n" inn="n" sloc="5" jdoc="Deafult resource. @author Steve Excellent Lee @version 1.0 2001">
			<mth name="/:org.bulbul.webmail.xmlresource.Resources.getXmlResourceFilename()" access="prot" jdoc="">
			</mth>
		</class>
		<class name="/:org.bulbul.webmail.xmlresource.Resources_en_US" intfc="n" abs="n" inn="n" sloc="5" jdoc="en resource. @author Steve Excellent Lee @version 1.0 2001">
			<mth name="/:org.bulbul.webmail.xmlresource.Resources_en_US.getXmlResourceFilename()" access="prot" jdoc="">
			</mth>
		</class>
		<class name="/:org.bulbul.webmail.xmlresource.Resources_zh_TW" intfc="n" abs="n" inn="n" sloc="5" jdoc="Deafult resource. @author Steve Excellent Lee @version 1.0 2001">
			<mth name="/:org.bulbul.webmail.xmlresource.Resources_zh_TW.getXmlResourceFilename()" access="prot" jdoc="">
			</mth>
		</class>
		<class name="/:org.bulbul.webmail.xmlresource.Resources_en" intfc="n" abs="n" inn="n" sloc="5" jdoc="en resource. @author Steve Excellent Lee @version 1.0 2001">
			<mth name="/:org.bulbul.webmail.xmlresource.Resources_en.getXmlResourceFilename()" access="prot" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/:org.webengruven.webmail.auth">
		<class name="/:org.webengruven.webmail.auth.OTPAuthDisplayMngr" intfc="n" abs="n" inn="n" sloc="24" jdoc="">
			<comm cntt="the length of the passwords"/>
			<field name="PASS_LEN" access="priv" jdoc=""/>
			<mth name="/:org.webengruven.webmail.auth.OTPAuthDisplayMngr.OTPAuthDisplayMngr()" access="pub" jdoc="Default C&amp;apos;tor">
			</mth>
			<mth name="/:org.webengruven.webmail.auth.OTPAuthDisplayMngr.OTPAuthDisplayMngr(OTPAuthenticatorIface)" access="pub" jdoc="Construct with a ref to the Authenticator using this object. It will be used later.">
				<param name="a"/>
			</mth>
			<mth name="/:org.webengruven.webmail.auth.OTPAuthDisplayMngr.setPassChangeVars(UserData, XMLGenericModel)" access="pub" jdoc="Setup state vars for the password change prompt. @param ud UserData for the user who will have their password changed @param model The model to set state vars in">
				<param name="ud"/>
				<param name="model"/>
			</mth>
			<mth name="/:org.webengruven.webmail.auth.OTPAuthDisplayMngr.getPassChangeTmpl()" access="pub" jdoc="Get the name of the template that can display an OTP password change screen. @return The name of the template">
			</mth>
		</class>
		<class name="/:org.webengruven.webmail.auth.AuthDisplayMngr" intfc="n" abs="n" inn="n" sloc="20" jdoc="">
			<mth name="/:org.webengruven.webmail.auth.AuthDisplayMngr.AuthDisplayMngr()" access="pub" jdoc="Default C&amp;apos;tor">
			</mth>
			<mth name="/:org.webengruven.webmail.auth.AuthDisplayMngr.setLoginScreenVars(XMLGenericModel)" access="pub" jdoc="Setup state vars for the login screen. If the login screen requires any special state variables, this function should set them up. @param model The model to set vars in.">
				<param name="model"/>
			</mth>
			<mth name="/:org.webengruven.webmail.auth.AuthDisplayMngr.getLoginScreenFile()" access="pub" jdoc="Get the filename of the loginscreen. @return The filename of the login screen .xsl template">
			</mth>
			<mth name="/:org.webengruven.webmail.auth.AuthDisplayMngr.setPassChangeVars(UserData, XMLGenericModel)" access="pub" jdoc="Setup state vars for the password change prompt. @param ud UserData for the user who will have their password changed @param model The model to set state vars in">
				<param name="ud"/>
				<param name="model"/>
			</mth>
			<mth name="/:org.webengruven.webmail.auth.AuthDisplayMngr.getPassChangeTmpl()" access="pub" jdoc="Get the name of the template that can display the password change screen. @return The name of the template.">
			</mth>
		</class>
		<class name="/:org.webengruven.webmail.auth.CRAuthDisplayMngr" intfc="n" abs="n" inn="n" sloc="22" jdoc="">
			<field name="auth" access="prot" jdoc=""/>
			<mth name="/:org.webengruven.webmail.auth.CRAuthDisplayMngr.CRAuthDisplayMngr()" access="pub" jdoc="Default C&amp;apos;tor. This c&amp;apos;tor isn&amp;apos;t very useful, so don&amp;apos;t use it.">
			</mth>
			<mth name="/:org.webengruven.webmail.auth.CRAuthDisplayMngr.CRAuthDisplayMngr(CRAuthenticator)" access="pub" jdoc="Construct with a ref to the constructing authenticator. This class needs to get info from the authenticator which created it, so a refrence to that authenticator is needed. @param a The CRAuthenticator which this is tied to.">
				<param name="a"/>
			</mth>
			<mth name="/:org.webengruven.webmail.auth.CRAuthDisplayMngr.setChallengeScreenVars(UserData, XMLGenericModel)" access="pub" jdoc="Set up some variables for the challenge screen. @param ud User data for the user trying to authenticate. @param model The model to set vars in.">
				<param name="ud"/>
				<param name="model"/>
			</mth>
			<mth name="/:org.webengruven.webmail.auth.CRAuthDisplayMngr.getChallengeScreenFile()" access="pub" jdoc="Get the filename of the challenge screen. @return The filename of the challenge screen">
			</mth>
			<mth name="/:org.webengruven.webmail.auth.CRAuthDisplayMngr.setLoginScreenVars(XMLGenericModel)" access="pub" jdoc="Tell the loginscreen not to use a password prompt.">
				<param name="model"/>
			</mth>
		</class>
		<class name="/:org.webengruven.webmail.auth.OTPCacheNode" intfc="n" abs="n" inn="n" sloc="15" jdoc="">
			<field name="active_st" access="pub" jdoc=""/>
			<field name="new_st" access="pub" jdoc=""/>
			<mth name="/:org.webengruven.webmail.auth.OTPCacheNode.OTPCacheNode()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.webengruven.webmail.auth.OTPCacheNode.OTPCacheNode(OTPState)" access="pub" jdoc="">
				<param name="act"/>
			</mth>
			<mth name="/:org.webengruven.webmail.auth.OTPCacheNode.OTPCacheNode(OTPState, OTPState)" access="pub" jdoc="">
				<param name="act"/>
				<param name="nw"/>
			</mth>
		</class>
		<class name="/:org.webengruven.webmail.auth.OTPAuthenticatorIface" intfc="n" abs="y" inn="n" sloc="4" jdoc="">
			<mth name="/:org.webengruven.webmail.auth.OTPAuthenticatorIface.OTPAuthenticatorIface()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.webengruven.webmail.auth.OTPAuthenticatorIface.getNewChallenge(UserData)" access="pub" jdoc="">
				<param name="ud"/>
			</mth>
		</class>
		<class name="/:org.webengruven.webmail.auth.CRAuthenticator" intfc="n" abs="y" inn="n" sloc="7" jdoc="CRAuthenticator.java This is the base class for all Authenticators which implement challenge response authentication. As a general rule most parts of Webmail won&amp;apos;t care if if an authenticator is a child of the class Authenticator, or a child of CRAuthenticator, however, there are a few extra methods needed for challenge response. Also worth noting, this used to be the name of concrete authenticator. I decided that it was okay to reuse the name here because: 1) it was only a test authenticator 2) I really couldn&amp;apos;t think of a better name. Created: Mon Jul 15 20:25 Recreated: Sun Sep 24 2000 08 11 2000 Sebastian Schaffert: Modified to fit into WebMail 0.7.2 - added import net.wastl.webmail.exceptions. ; @author Devin Kowatch @version $Revision: 1.1.1.1 $ @see webmail.server.UserDataCopyright (C) 2000 Devin Kowatch">
			<comm cntt="This program is free software; you can redistribute it and or modify it under the terms of the Lesser GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the Lesser GNU General Public License for more details. You should have received a copy of the Lesser GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA."/>
			<comm cntt="dummy c&amp;apos;tor"/>
			<mth name="/:org.webengruven.webmail.auth.CRAuthenticator.CRAuthenticator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.webengruven.webmail.auth.CRAuthenticator.getAuthDisplayMngr()" access="pub" jdoc="Return an AuthDisplayMngr to use for display">
			</mth>
			<mth name="/:org.webengruven.webmail.auth.CRAuthenticator.getChallenge(UserData)" access="pub" jdoc="Get the challenge for this authentication. This will get passed some user data and should return the approriate challenge string for that user.">
				<param name="ud"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/authenticators/IMAPAuthenticator.java:default">
		<class name="/net/wastl/webmail/authenticators/IMAPAuthenticator.java:default.IMAPAuthenticator" intfc="n" abs="n" inn="n" sloc="43" jdoc="IMAPAuthenticator.java Created: Mon Apr 19 12:03:53 1999 @author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<field name="st" access="priv" jdoc=""/>
			<field name="storage" access="priv" jdoc=""/>
			<mth name="/net/wastl/webmail/authenticators/IMAPAuthenticator.java:default.IMAPAuthenticator.IMAPAuthenticator()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/authenticators/IMAPAuthenticator.java:default.IMAPAuthenticator.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/authenticators/IMAPAuthenticator.java:default.IMAPAuthenticator.init(Storage)" access="pub" jdoc="">
				<param name="store"/>
			</mth>
			<mth name="/net/wastl/webmail/authenticators/IMAPAuthenticator.java:default.IMAPAuthenticator.register(ConfigScheme)" access="pub" jdoc="">
				<param name="store"/>
			</mth>
			<mth name="/net/wastl/webmail/authenticators/IMAPAuthenticator.java:default.IMAPAuthenticator.authenticatePreUserData(String, String, String)" access="pub" jdoc="">
				<comm cntt="e.printStackTrace();"/>
				<param name="user"/>
				<param name="domain"/>
				<param name="passwd"/>
			</mth>
			<mth name="/net/wastl/webmail/authenticators/IMAPAuthenticator.java:default.IMAPAuthenticator.canChangePassword()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/authenticators/POPAuthenticator.java:default">
		<class name="/net/wastl/webmail/authenticators/POPAuthenticator.java:default.POPAuthenticator" intfc="n" abs="n" inn="n" sloc="43" jdoc="POPAuthenticator.java Created: Mon Apr 19 12:03:53 1999 @author Sebastian Schaffert @versiondevink 7 15 2000 - changed some leftover &amp;quot;imap&amp;quot; strings to &amp;quot;pop&amp;quot;">
			<const name="VERSION" access="pub" jdoc=""/>
			<field name="st" access="priv" jdoc=""/>
			<field name="storage" access="priv" jdoc=""/>
			<mth name="/net/wastl/webmail/authenticators/POPAuthenticator.java:default.POPAuthenticator.POPAuthenticator()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/authenticators/POPAuthenticator.java:default.POPAuthenticator.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/authenticators/POPAuthenticator.java:default.POPAuthenticator.init(Storage)" access="pub" jdoc="">
				<param name="store"/>
			</mth>
			<mth name="/net/wastl/webmail/authenticators/POPAuthenticator.java:default.POPAuthenticator.register(ConfigScheme)" access="pub" jdoc="">
				<param name="store"/>
			</mth>
			<mth name="/net/wastl/webmail/authenticators/POPAuthenticator.java:default.POPAuthenticator.authenticatePreUserData(String, String, String)" access="pub" jdoc="">
				<comm cntt="e.printStackTrace();"/>
				<param name="user"/>
				<param name="domain"/>
				<param name="passwd"/>
			</mth>
			<mth name="/net/wastl/webmail/authenticators/POPAuthenticator.java:default.POPAuthenticator.canChangePassword()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/authenticators/SimpleAuthenticator.java:default">
		<class name="/net/wastl/webmail/authenticators/SimpleAuthenticator.java:default.SimpleAuthenticator" intfc="n" abs="n" inn="n" sloc="23" jdoc="SimpleAuthenticator.java Does simple authentication just based on the UserData checkPasswd() Created: Mon Apr 19 11:17:03 1999 @author Sebastian Schaffert @version 1.0 @see webmail.server.UserData">
			<const name="VERSION" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/authenticators/SimpleAuthenticator.java:default.SimpleAuthenticator.SimpleAuthenticator()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/authenticators/SimpleAuthenticator.java:default.SimpleAuthenticator.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/authenticators/SimpleAuthenticator.java:default.SimpleAuthenticator.init(Storage)" access="pub" jdoc="">
				<param name="store"/>
			</mth>
			<mth name="/net/wastl/webmail/authenticators/SimpleAuthenticator.java:default.SimpleAuthenticator.register(ConfigScheme)" access="pub" jdoc="">
				<param name="store"/>
			</mth>
			<mth name="/net/wastl/webmail/authenticators/SimpleAuthenticator.java:default.SimpleAuthenticator.authenticatePostUserData(UserData, String, String)" access="pub" jdoc="">
				<param name="udata"/>
				<param name="domain"/>
				<param name="password"/>
			</mth>
			<mth name="/net/wastl/webmail/authenticators/SimpleAuthenticator.java:default.SimpleAuthenticator.changePassword(UserData, String, String)" access="pub" jdoc="">
				<param name="udata"/>
				<param name="passwd"/>
				<param name="verify"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/authenticators/UnixAuthenticator.java:default">
		<class name="/net/wastl/webmail/authenticators/UnixAuthenticator.java:default.UnixAuthenticator" intfc="n" abs="n" inn="n" sloc="56" jdoc="UnixAuthenticator.java Created: Mon Apr 19 13:43:48 1999 @author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="passwd" access="pub" jdoc=""/>
			<const name="shadow" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/authenticators/UnixAuthenticator.java:default.UnixAuthenticator.UnixAuthenticator()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/authenticators/UnixAuthenticator.java:default.UnixAuthenticator.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/authenticators/UnixAuthenticator.java:default.UnixAuthenticator.init(Storage)" access="pub" jdoc="">
				<param name="store"/>
			</mth>
			<mth name="/net/wastl/webmail/authenticators/UnixAuthenticator.java:default.UnixAuthenticator.register(ConfigScheme)" access="pub" jdoc="">
				<param name="store"/>
			</mth>
			<mth name="/net/wastl/webmail/authenticators/UnixAuthenticator.java:default.UnixAuthenticator.authenticatePreUserData(String, String, String)" access="pub" jdoc="">
				<param name="user"/>
				<param name="domain"/>
				<param name="given_passwd"/>
			</mth>
			<mth name="/net/wastl/webmail/authenticators/UnixAuthenticator.java:default.UnixAuthenticator.canChangePassword()" access="pub" jdoc="Don&amp;apos;t allow to change Unix-Passwords as this could mess things up.">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/plugins/About.java:default">
		<class name="/net/wastl/webmail/plugins/About.java:default.About" intfc="n" abs="n" inn="n" sloc="47" jdoc="@author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="parent" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/About.java:default.About.About()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/About.java:default.About.register(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/About.java:default.About.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/About.java:default.About.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/About.java:default.About.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/About.java:default.About.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/About.java:default.About.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<comm cntt="System.gc();"/>
				<param name="suburl"/>
				<param name="session"/>
				<param name="header"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/About.java:default.About.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/About.java:default.About.requires()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/plugins/AdminPlugin.java:default">
		<class name="/net/wastl/webmail/plugins/AdminPlugin.java:default.AdminPlugin" intfc="n" abs="n" inn="n" sloc="176" jdoc="@author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="sessions" access="prot" jdoc=""/>
			<field name="parent" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/AdminPlugin.java:default.AdminPlugin.AdminPlugin()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/AdminPlugin.java:default.AdminPlugin.register(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/AdminPlugin.java:default.AdminPlugin.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/AdminPlugin.java:default.AdminPlugin.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/AdminPlugin.java:default.AdminPlugin.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/AdminPlugin.java:default.AdminPlugin.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/AdminPlugin.java:default.AdminPlugin.reqShutdown(int, boolean)" access="prot" jdoc="">
				<param name="time"/>
				<param name="reboot"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/AdminPlugin.java:default.AdminPlugin.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<comm cntt="System.err.println(ckey+&amp;quot; = &amp;quot;+header.getContent(ckey));"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="10 22 2000 devink -- setup new password changing stuff"/>
				<comm cntt="content=new HTMLDocument(&amp;quot;WebMail Administrator Login&amp;quot;,parent.getStorage(),&amp;quot;adminlogin&amp;quot;,parent.getBasePath());"/>
				<param name="suburl"/>
				<param name="session"/>
				<param name="header"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/AdminPlugin.java:default.AdminPlugin.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/AdminPlugin.java:default.AdminPlugin.requires()" access="pub" jdoc="">
			</mth>
		<class name="/net/wastl/webmail/plugins/AdminPlugin.java:default.AdminPlugin$ShutdownThread" intfc="n" abs="n" inn="y" sloc="27" jdoc="">
			<field name="parent" access="prot" jdoc=""/>
			<field name="time" access="prot" jdoc=""/>
			<field name="reboot" access="prot" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/AdminPlugin.java:default.AdminPlugin$ShutdownThread.ShutdownThread(int, boolean, WebMailServer)" access="pub" jdoc="">
				<param name="time"/>
				<param name="restart"/>
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/AdminPlugin.java:default.AdminPlugin$ShutdownThread.run()" access="pub" jdoc="">
			</mth>
		</class>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/plugins/Composer.java:default">
		<class name="/net/wastl/webmail/plugins/Composer.java:default.Composer" intfc="n" abs="n" inn="n" sloc="67" jdoc="Compose a message. This plugin will show the compose form and fill in the necessary fields if this is a continued message @see FileAttacherprovides: composer requires: content bar Created: Tue Sep 7 12:46:08 1999 @author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="store" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/Composer.java:default.Composer.Composer()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/Composer.java:default.Composer.register(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/Composer.java:default.Composer.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/Composer.java:default.Composer.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/Composer.java:default.Composer.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/Composer.java:default.Composer.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/Composer.java:default.Composer.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<comm cntt="We were not continuing to edit a message, so we should delete the current draft!"/>
				<comm cntt="XXX error handler TBD here!"/>
				<comm cntt="XXX error handler TBD here!"/>
				<comm cntt="XXX error handler TBD here!"/>
				<param name="suburl"/>
				<param name="sess"/>
				<param name="header"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/Composer.java:default.Composer.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/Composer.java:default.Composer.requires()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/plugins/ErrorHandler.java:default">
		<class name="/net/wastl/webmail/plugins/ErrorHandler.java:default.ErrorHandler" intfc="n" abs="n" inn="n" sloc="41" jdoc="This URLHandler handles error messages. @author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="parent" access="pub" jdoc=""/>
			<field name="store" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/ErrorHandler.java:default.ErrorHandler.ErrorHandler()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ErrorHandler.java:default.ErrorHandler.register(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/ErrorHandler.java:default.ErrorHandler.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ErrorHandler.java:default.ErrorHandler.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ErrorHandler.java:default.ErrorHandler.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ErrorHandler.java:default.ErrorHandler.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ErrorHandler.java:default.ErrorHandler.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<param name="suburl"/>
				<param name="session"/>
				<param name="header"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/ErrorHandler.java:default.ErrorHandler.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ErrorHandler.java:default.ErrorHandler.requires()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/plugins/FileAttacher.java:default">
		<class name="/net/wastl/webmail/plugins/FileAttacher.java:default.FileAttacher" intfc="n" abs="n" inn="n" sloc="74" jdoc="This plugin shows the Form for attaching files to a message as well as does the actual attaching to a WebMailSession provides: attach requires: composer @author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="store" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/FileAttacher.java:default.FileAttacher.FileAttacher()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/FileAttacher.java:default.FileAttacher.register(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/FileAttacher.java:default.FileAttacher.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/FileAttacher.java:default.FileAttacher.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/FileAttacher.java:default.FileAttacher.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/FileAttacher.java:default.FileAttacher.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/FileAttacher.java:default.FileAttacher.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<comm cntt="Read the file from the HTTP Header and store it in the user&amp;apos;s session"/>
				<comm cntt="System.err.println(&amp;quot;Description: &amp;quot;+description);"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="Transcode file name"/>
				<comm cntt="This is no effect. It seems that MimeBodyPart.getFileName() filters &amp;apos;\&amp;apos; character."/>
				<comm cntt="Transcode decription"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="Modified by exce, Start"/>
				<comm cntt="System.err.println(&amp;quot;Removing &amp;quot;+head.getContent(&amp;quot;ATTACHMENTS&amp;quot;));"/>
				<comm cntt="session.removeWorkAttachment(head.getContent(&amp;quot;ATTACHMENTS&amp;quot;));"/>
				<comm cntt="Modified by exce, end"/>
				<param name="suburl"/>
				<param name="sess"/>
				<param name="head"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/FileAttacher.java:default.FileAttacher.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/FileAttacher.java:default.FileAttacher.requires()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/plugins/FolderList.java:default">
		<class name="/net/wastl/webmail/plugins/FolderList.java:default.FolderList" intfc="n" abs="n" inn="n" sloc="59" jdoc="List the messages in a folder. provides: message list requires: mailbox list @author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="store" access="pub" jdoc=""/>
			<field name="parent" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/FolderList.java:default.FolderList.FolderList()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/FolderList.java:default.FolderList.register(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/FolderList.java:default.FolderList.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/FolderList.java:default.FolderList.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/FolderList.java:default.FolderList.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/FolderList.java:default.FolderList.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/FolderList.java:default.FolderList.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<param name="suburl"/>
				<param name="sess"/>
				<param name="header"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/FolderList.java:default.FolderList.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/FolderList.java:default.FolderList.requires()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/plugins/FolderSetup.java:default">
		<class name="/net/wastl/webmail/plugins/FolderSetup.java:default.FolderSetup" intfc="n" abs="n" inn="n" sloc="103" jdoc="Show the folder setup form and handle changes (except deletion). provides: folder setup requires: content bar Created: Tue Sep 7 18:45:11 1999 @author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="store" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/FolderSetup.java:default.FolderSetup.FolderSetup()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/FolderSetup.java:default.FolderSetup.register(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/FolderSetup.java:default.FolderSetup.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/FolderSetup.java:default.FolderSetup.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/FolderSetup.java:default.FolderSetup.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/FolderSetup.java:default.FolderSetup.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/FolderSetup.java:default.FolderSetup.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<comm cntt="The user requested to change his mailbox settings"/>
				<comm cntt="The user requested to change subfolders in a mailbox"/>
				<comm cntt="We want to see all folders in the folder overview"/>
				<comm cntt="but we want only to see some in the mailbox overview"/>
				<param name="suburl"/>
				<param name="sess"/>
				<param name="header"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/FolderSetup.java:default.FolderSetup.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/FolderSetup.java:default.FolderSetup.requires()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/plugins/ImageHandler.java:default">
		<class name="/net/wastl/webmail/plugins/ImageHandler.java:default.ImageHandler" intfc="n" abs="n" inn="n" sloc="39" jdoc="@author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="store" access="pub" jdoc=""/>
			<field name="parent" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/ImageHandler.java:default.ImageHandler.ImageHandler()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ImageHandler.java:default.ImageHandler.register(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/ImageHandler.java:default.ImageHandler.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ImageHandler.java:default.ImageHandler.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ImageHandler.java:default.ImageHandler.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ImageHandler.java:default.ImageHandler.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ImageHandler.java:default.ImageHandler.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<comm cntt="throw new WebMailException(&amp;quot;No session was given. If you feel this is incorrect, please contact your system administrator&amp;quot;);"/>
				<param name="suburl"/>
				<param name="session"/>
				<param name="header"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/ImageHandler.java:default.ImageHandler.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ImageHandler.java:default.ImageHandler.requires()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/plugins/LogoutSession.java:default">
		<class name="/net/wastl/webmail/plugins/LogoutSession.java:default.LogoutSession" intfc="n" abs="n" inn="n" sloc="40" jdoc="Log out a user. provides: logout requires: content bar @author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="store" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/LogoutSession.java:default.LogoutSession.LogoutSession()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/LogoutSession.java:default.LogoutSession.register(WebMailServer)" access="pub" jdoc="">
				<comm cntt="parent.getContentBar().registerContentItem(this);"/>
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/LogoutSession.java:default.LogoutSession.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/LogoutSession.java:default.LogoutSession.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/LogoutSession.java:default.LogoutSession.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/LogoutSession.java:default.LogoutSession.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/LogoutSession.java:default.LogoutSession.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<param name="suburl"/>
				<param name="session"/>
				<param name="header"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/LogoutSession.java:default.LogoutSession.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/LogoutSession.java:default.LogoutSession.requires()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/plugins/MailboxList.java:default">
		<class name="/net/wastl/webmail/plugins/MailboxList.java:default.MailboxList" intfc="n" abs="n" inn="n" sloc="42" jdoc="Show a list of user mailboxes. provides: mailbox list requires: content bar Created: Thu Sep 2 12:00:38 1999 @author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="store" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/MailboxList.java:default.MailboxList.MailboxList()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/MailboxList.java:default.MailboxList.register(WebMailServer)" access="pub" jdoc="">
				<comm cntt="parent.getContentBar().registerContentItem(this);"/>
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/MailboxList.java:default.MailboxList.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/MailboxList.java:default.MailboxList.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/MailboxList.java:default.MailboxList.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/MailboxList.java:default.MailboxList.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/MailboxList.java:default.MailboxList.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<comm cntt="If the user requests the folder overview, try to fetch new information"/>
				<comm cntt="Do so only, if this is forced, to save the time!"/>
				<param name="suburl"/>
				<param name="sess"/>
				<param name="header"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/MailboxList.java:default.MailboxList.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/MailboxList.java:default.MailboxList.requires()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/plugins/NavBar.java:default">
		<class name="/net/wastl/webmail/plugins/NavBar.java:default.NavBar" intfc="n" abs="n" inn="n" sloc="40" jdoc="The content bar on the left. provides: content bar requires: @author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="template" access="pub" jdoc=""/>
			<field name="bar" access="pub" jdoc=""/>
			<field name="store" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/NavBar.java:default.NavBar.NavBar()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/NavBar.java:default.NavBar.register(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/NavBar.java:default.NavBar.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/NavBar.java:default.NavBar.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/NavBar.java:default.NavBar.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/NavBar.java:default.NavBar.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/NavBar.java:default.NavBar.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<param name="suburl"/>
				<param name="session"/>
				<param name="header"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/NavBar.java:default.NavBar.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/NavBar.java:default.NavBar.requires()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/plugins/PassThroughPlugin.java:default">
		<class name="/net/wastl/webmail/plugins/PassThroughPlugin.java:default.PassThroughPlugin" intfc="n" abs="n" inn="n" sloc="39" jdoc="This plugin passes through data without doing any processing. It can be used for images or other binary text data by calling http: yourhost mountpoint webmail passthrough &amp;lt;file&amp;gt; @author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="store" access="pub" jdoc=""/>
			<field name="parent" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/PassThroughPlugin.java:default.PassThroughPlugin.PassThroughPlugin()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/PassThroughPlugin.java:default.PassThroughPlugin.register(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/PassThroughPlugin.java:default.PassThroughPlugin.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/PassThroughPlugin.java:default.PassThroughPlugin.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/PassThroughPlugin.java:default.PassThroughPlugin.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/PassThroughPlugin.java:default.PassThroughPlugin.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/PassThroughPlugin.java:default.PassThroughPlugin.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<comm cntt="System.err.println(header);"/>
				<comm cntt="throw new WebMailException(&amp;quot;No session was given. If you feel this is incorrect, please contact your system administrator&amp;quot;);"/>
				<comm cntt="System.err.println(&amp;quot;Sending &amp;quot;+suburl.substring(1)+&amp;quot; to unknown user &amp;quot;);"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="return new HTMLImage(store,suburl.substring(1),Locale.getDefault(),&amp;quot;default&amp;quot;);"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="System.err.println(&amp;quot;Sending &amp;quot;+suburl.substring(1)+&amp;quot; to user &amp;quot;+data.getLogin());"/>
				<param name="suburl"/>
				<param name="session"/>
				<param name="header"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/PassThroughPlugin.java:default.PassThroughPlugin.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/PassThroughPlugin.java:default.PassThroughPlugin.requires()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/plugins/SendMessage.java:default">
		<class name="/net/wastl/webmail/plugins/SendMessage.java:default.SendMessage" intfc="n" abs="n" inn="n" sloc="267" jdoc="Send a message and show a result page. provides: message send requires: composer @author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="store" access="pub" jdoc=""/>
			<field name="parent" access="pub" jdoc=""/>
			<field name="mailsession" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/SendMessage.java:default.SendMessage.SendMessage()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/SendMessage.java:default.SendMessage.register(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/SendMessage.java:default.SendMessage.init()" access="prot" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/SendMessage.java:default.SendMessage.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/SendMessage.java:default.SendMessage.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/SendMessage.java:default.SendMessage.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/SendMessage.java:default.SendMessage.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/SendMessage.java:default.SendMessage.notifyConfigurationChange(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/SendMessage.java:default.SendMessage.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<comm cntt="Modified by exce, start"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="Save message in case there is an error"/>
				<comm cntt="The form was submitted, now we will send it ..."/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="from[0]=new InternetAddress(MimeUtility.encodeText(session.getUser().getEmail()),"/>
				<comm cntt="MimeUtility.encodeText(session.getUser().getFullName()));"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="t=new StringTokenizer(MimeUtility.encodeText(head.getContent(&amp;quot;TO&amp;quot;)).trim(),&amp;quot;,&amp;quot;);"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="Check To: field, when empty, throw an exception"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="t=new StringTokenizer(MimeUtility.encodeText(head.getContent(&amp;quot;CC&amp;quot;)).trim(),&amp;quot;,&amp;quot;);"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="t=new StringTokenizer(MimeUtility.encodeText(head.getContent(&amp;quot;BCC&amp;quot;)).trim(),&amp;quot;,&amp;quot;);"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="subject=MimeUtility.encodeText(head.getContent(&amp;quot;SUBJECT&amp;quot;));"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="msg.addHeader(&amp;quot;Reply-To&amp;quot;,head.getContent(&amp;quot;REPLY-TO&amp;quot;));"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="String charset=MimeUtility.mimeCharset(MimeUtility.getDefaultJavaCharset());"/>
				<comm cntt="Transcode to UTF-8"/>
				<comm cntt="Encode text"/>
				<comm cntt="JavaMail defaults to QP?"/>
				<comm cntt="JavaMail defaults to QP?"/>
				<comm cntt="Add an advertisement if the administrator requested to do so"/>
				<comm cntt="Encode text"/>
				<comm cntt="This is used to write to the Pipe asynchronously to avoid blocking"/>
				<comm cntt="MimeBodyPart att1=sconn.getResult();"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="att1.setFileName(bs.getName());"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="}"/>
				<comm cntt="Invalid folder:"/>
				<comm cntt="session.clearMessage();"/>
				<comm cntt="Redirect request for attachment (unfortunately HTML forms are not flexible enough to have two targets without Javascript)"/>
				<param name="suburl"/>
				<param name="sess1"/>
				<param name="head"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/SendMessage.java:default.SendMessage.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/SendMessage.java:default.SendMessage.requires()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/plugins/ShowMIME.java:default">
		<class name="/net/wastl/webmail/plugins/ShowMIME.java:default.ShowMIME" intfc="n" abs="n" inn="n" sloc="52" jdoc="Show a MIME part of a message. provides: message mime requires: message show Created: Thu Sep 2 18:52:40 1999 @author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="store" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/ShowMIME.java:default.ShowMIME.ShowMIME()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ShowMIME.java:default.ShowMIME.register(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/ShowMIME.java:default.ShowMIME.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ShowMIME.java:default.ShowMIME.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ShowMIME.java:default.ShowMIME.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ShowMIME.java:default.ShowMIME.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ShowMIME.java:default.ShowMIME.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<comm cntt="System.err.println(&amp;quot;Fetching MIME part: &amp;quot;+suburl);"/>
				<comm cntt="Modified by exce, start"/>
				<comm cntt="Modified by exce, end"/>
				<comm cntt="System.err.print(count+&amp;quot; &amp;quot;);"/>
				<comm cntt="System.err.println(content.size());"/>
				<param name="suburl"/>
				<param name="sess"/>
				<param name="header"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/ShowMIME.java:default.ShowMIME.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ShowMIME.java:default.ShowMIME.requires()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/plugins/ShowMessage.java:default">
		<class name="/net/wastl/webmail/plugins/ShowMessage.java:default.ShowMessage" intfc="n" abs="n" inn="n" sloc="57" jdoc="Show a message. provides: message show requires: message list @author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="store" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/ShowMessage.java:default.ShowMessage.ShowMessage()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ShowMessage.java:default.ShowMessage.register(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/ShowMessage.java:default.ShowMessage.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ShowMessage.java:default.ShowMessage.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ShowMessage.java:default.ShowMessage.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ShowMessage.java:default.ShowMessage.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ShowMessage.java:default.ShowMessage.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<comm cntt="return new HTMLParsedDocument(store,session,&amp;quot;showmessage&amp;quot;);"/>
				<param name="suburl"/>
				<param name="sess"/>
				<param name="header"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/ShowMessage.java:default.ShowMessage.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/ShowMessage.java:default.ShowMessage.requires()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/plugins/UserSetup.java:default">
		<class name="/net/wastl/webmail/plugins/UserSetup.java:default.UserSetup" intfc="n" abs="n" inn="n" sloc="55" jdoc="Show a form to change user settings and actually perform them. provides: user setup requires: content bar @author Sebastian Schaffert @version">
			<comm cntt="9 24 2000 devink - changed for new challenge response auth"/>
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="store" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/UserSetup.java:default.UserSetup.UserSetup()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/UserSetup.java:default.UserSetup.register(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/UserSetup.java:default.UserSetup.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/UserSetup.java:default.UserSetup.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/UserSetup.java:default.UserSetup.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/UserSetup.java:default.UserSetup.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/UserSetup.java:default.UserSetup.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<comm cntt="9 24 2000 devink - set up password change stuff"/>
				<param name="suburl"/>
				<param name="sess"/>
				<param name="header"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/UserSetup.java:default.UserSetup.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/UserSetup.java:default.UserSetup.requires()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/plugins/WebMailHelp.java:default">
		<class name="/net/wastl/webmail/plugins/WebMailHelp.java:default.WebMailHelp" intfc="n" abs="n" inn="n" sloc="57" jdoc="Show WebMail help file provides: help requires: content bar @author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="cache" access="pub" jdoc=""/>
			<field name="store" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/WebMailHelp.java:default.WebMailHelp.WebMailHelp()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/WebMailHelp.java:default.WebMailHelp.register(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/WebMailHelp.java:default.WebMailHelp.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/WebMailHelp.java:default.WebMailHelp.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/WebMailHelp.java:default.WebMailHelp.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/WebMailHelp.java:default.WebMailHelp.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/WebMailHelp.java:default.WebMailHelp.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<comm cntt="Unfortunately we can&amp;apos;t use two input documents, so we will temporarily insert the help document into the user&amp;apos;s model"/>
				<comm cntt="Here we remove the help document from the model"/>
				<comm cntt="Remove the indicator for a specific help topic"/>
				<param name="suburl"/>
				<param name="session"/>
				<param name="header"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/WebMailHelp.java:default.WebMailHelp.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/WebMailHelp.java:default.WebMailHelp.requires()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/net/wastl/webmail/plugins/WebMailTitle.java:default">
		<class name="/net/wastl/webmail/plugins/WebMailTitle.java:default.WebMailTitle" intfc="n" abs="n" inn="n" sloc="36" jdoc="Show WebMail title. provides: title @author Sebastian Schaffert @version">
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="store" access="pub" jdoc=""/>
			<mth name="/net/wastl/webmail/plugins/WebMailTitle.java:default.WebMailTitle.WebMailTitle()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/WebMailTitle.java:default.WebMailTitle.register(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/WebMailTitle.java:default.WebMailTitle.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/WebMailTitle.java:default.WebMailTitle.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/WebMailTitle.java:default.WebMailTitle.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/WebMailTitle.java:default.WebMailTitle.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/WebMailTitle.java:default.WebMailTitle.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<comm cntt="return new HTMLParsedDocument(store,session,&amp;quot;title&amp;quot;);"/>
				<param name="suburl"/>
				<param name="session"/>
				<param name="header"/>
			</mth>
			<mth name="/net/wastl/webmail/plugins/WebMailTitle.java:default.WebMailTitle.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/net/wastl/webmail/plugins/WebMailTitle.java:default.WebMailTitle.requires()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/org/webengruven/webmail/authenticators/OTPAuthenticator.java:default">
		<class name="/org/webengruven/webmail/authenticators/OTPAuthenticator.java:default.OTPAuthenticator" intfc="n" abs="n" inn="n" sloc="250" jdoc="OTPAuthenticator.java -- this class is an Authenticator for Webmail Java that uses One Time Passwords for authentication. Using the new challenge response authentication framework, this class will provide authentication based on RFC1938 one time passes. @author Devin Kowatch @version $Revision: 1.1.1.1 $ Copyright (C) 2000 Devin Kowatch">
			<comm cntt="This program is free software; you can redistribute it and or modify it under the terms of the Lesser GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the Lesser GNU General Public License for more details. You should have received a copy of the Lesser GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA."/>
			<comm cntt="----------------------- Private Functions -------------------------"/>
			<const name="VERSION" access="pub" jdoc="The version of OTPAuthenticator"/>
			<const name="START_SEQ" access="pub" jdoc="The default starting sequence for an OTP"/>
			<const name="DFLT_HASH" access="pub" jdoc="The default hash algorithm for an OTP"/>
			<const name="CACHE_ACTIVE_ST" access="priv" jdoc=""/>
			<const name="CACHE_NEW_ST" access="priv" jdoc=""/>
			<field name="cache" access="priv" jdoc=""/>
			<field name="disp_mngr" access="priv" jdoc=""/>
			<mth name="/org/webengruven/webmail/authenticators/OTPAuthenticator.java:default.OTPAuthenticator.OTPAuthenticator()" access="pub" jdoc="Default Constructor">
			</mth>
			<mth name="/org/webengruven/webmail/authenticators/OTPAuthenticator.java:default.OTPAuthenticator.getAuthDisplayMngr()" access="pub" jdoc="Get the AuthDisplayMngr for this class">
			</mth>
			<mth name="/org/webengruven/webmail/authenticators/OTPAuthenticator.java:default.OTPAuthenticator.getVersion()" access="pub" jdoc="Get this class&amp;apos; version @return A version string for this class">
			</mth>
			<mth name="/org/webengruven/webmail/authenticators/OTPAuthenticator.java:default.OTPAuthenticator.init(Storage)" access="pub" jdoc="(Re-)Initilize this authenticator.">
				<param name="store"/>
			</mth>
			<mth name="/org/webengruven/webmail/authenticators/OTPAuthenticator.java:default.OTPAuthenticator.register(ConfigScheme)" access="pub" jdoc="Register this authenticator with the system.">
				<param name="store"/>
			</mth>
			<mth name="/org/webengruven/webmail/authenticators/OTPAuthenticator.java:default.OTPAuthenticator.getNewChallenge(UserData)" access="pub" jdoc="Get a new challenge for changing the password. This will be displayed on the screen when the user tries to change their password. @param udata The users data, this may be needed when re-keying the password.">
				<comm cntt="for convience"/>
				<comm cntt="Not in the cache, lets see if they have logged in before"/>
				<comm cntt="later code expects st to be set"/>
				<comm cntt="setup the new seed and seq."/>
				<comm cntt="Get a random value between (0, 10000], and pad to 4 chars."/>
				<comm cntt="4 digits already, no pad"/>
				<comm cntt="3 digits only, pad 1"/>
				<comm cntt="2 digits only, pad 2"/>
				<comm cntt="1 digit only, pad 3"/>
				<comm cntt="if this is a new account don&amp;apos;t use an instance of OTPServer"/>
				<comm cntt="for new accounts, st is a dummy. As such it should not be"/>
				<comm cntt="stored in the cache where it will cause problems by being used"/>
				<comm cntt="keep track of the new OTPState for changePassword()"/>
				<param name="udata"/>
			</mth>
			<mth name="/org/webengruven/webmail/authenticators/OTPAuthenticator.java:default.OTPAuthenticator.authenticatePostUserData(UserData, String, String)" access="pub" jdoc="Authenticate the user.">
				<comm cntt="Update the password data so next time we need a new pass"/>
				<comm cntt="catch (Exception e) { throw new InvalidPasswordException(&amp;quot;WTF?!?!?&amp;quot;); }"/>
				<comm cntt="Done with n.active_st"/>
				<param name="ud"/>
				<param name="dom"/>
				<param name="pass"/>
			</mth>
			<mth name="/org/webengruven/webmail/authenticators/OTPAuthenticator.java:default.OTPAuthenticator.changePassword(UserData, String, String)" access="pub" jdoc="Change the OTP Stream">
				<comm cntt="Get the old OTP first, so that we can compare."/>
				<comm cntt="We need to verify the format of the OTP"/>
				<comm cntt="We do this, so that the Hex rep. is stored."/>
				<comm cntt="remove this from the cache. (kill both so that the active state"/>
				<comm cntt="is not stale"/>
				<param name="ud"/>
				<param name="newpass"/>
				<param name="vrfy"/>
			</mth>
			<mth name="/org/webengruven/webmail/authenticators/OTPAuthenticator.java:default.OTPAuthenticator.getChallenge(UserData)" access="pub" jdoc="Get the challenge for this authentication. This will get passed some user data and should return the approriate challenge string for that user.">
				<comm cntt="No password data has been set."/>
				<comm cntt="this should never happen."/>
				<comm cntt="this either"/>
				<comm cntt="final sanity check"/>
				<comm cntt="I&amp;apos;m expecting that we will be using this again soon."/>
				<param name="ud"/>
			</mth>
			<mth name="/org/webengruven/webmail/authenticators/OTPAuthenticator.java:default.OTPAuthenticator.removeFromCache(String, int)" access="priv" jdoc="">
				<param name="key"/>
				<param name="type"/>
			</mth>
			<mth name="/org/webengruven/webmail/authenticators/OTPAuthenticator.java:default.OTPAuthenticator.putIntoCache(String, OTPState, OTPState)" access="priv" jdoc="">
				<param name="key"/>
				<param name="ast"/>
				<param name="nst"/>
			</mth>
			<mth name="/org/webengruven/webmail/authenticators/OTPAuthenticator.java:default.OTPAuthenticator.getFromCache(String, int, OTPState[])" access="priv" jdoc="">
				<param name="key"/>
				<param name="type"/>
				<param name="sts"/>
			</mth>
			<mth name="/org/webengruven/webmail/authenticators/OTPAuthenticator.java:default.OTPAuthenticator.getFromCache(String, int)" access="priv" jdoc="">
				<param name="key"/>
				<param name="type"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/org/webengruven/webmail/plugins/ChallengeHandler.java:default">
		<class name="/org/webengruven/webmail/plugins/ChallengeHandler.java:default.ChallengeHandler" intfc="n" abs="n" inn="n" sloc="54" jdoc="">
			<comm cntt="XXX Not sure what, if anything, this should return"/>
			<const name="VERSION" access="pub" jdoc=""/>
			<const name="URL" access="pub" jdoc=""/>
			<field name="store" access="priv" jdoc=""/>
			<field name="storage" access="priv" jdoc=""/>
			<mth name="/org/webengruven/webmail/plugins/ChallengeHandler.java:default.ChallengeHandler.register(WebMailServer)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
			<mth name="/org/webengruven/webmail/plugins/ChallengeHandler.java:default.ChallengeHandler.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/org/webengruven/webmail/plugins/ChallengeHandler.java:default.ChallengeHandler.provides()" access="pub" jdoc="">
			</mth>
			<mth name="/org/webengruven/webmail/plugins/ChallengeHandler.java:default.ChallengeHandler.requires()" access="pub" jdoc="">
			</mth>
			<mth name="/org/webengruven/webmail/plugins/ChallengeHandler.java:default.ChallengeHandler.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/org/webengruven/webmail/plugins/ChallengeHandler.java:default.ChallengeHandler.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/org/webengruven/webmail/plugins/ChallengeHandler.java:default.ChallengeHandler.getDescription()" access="pub" jdoc="">
			</mth>
			<mth name="/org/webengruven/webmail/plugins/ChallengeHandler.java:default.ChallengeHandler.handleURL(String, HTTPSession, HTTPRequestHeader)" access="pub" jdoc="">
				<param name="subURL"/>
				<param name="sess"/>
				<param name="h"/>
			</mth>
		</class>
	</pkg>
</java-project>