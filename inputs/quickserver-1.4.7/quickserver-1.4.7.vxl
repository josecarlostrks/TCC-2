<?xml version="1.0" encoding="UTF-8"?>
<java-project id="default" name="quickserver-1.4.7" revision="quickserver-1.4.7">
	<pkg name="/:test.org.quickserver">
		<class name="/:test.org.quickserver.AllJUnitTests" intfc="n" abs="n" inn="n" sloc="12" jdoc="Simple class to build a TestSuite out of the individual test classes.">
			<mth name="/:test.org.quickserver.AllJUnitTests.AllJUnitTests(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:test.org.quickserver.AllJUnitTests.suite()" access="pub" jdoc="">
				<comm cntt="TestSuite suite = new TestSuite();"/>
			</mth>
		</class>
		<class name="/:test.org.quickserver.SkeletonTest" intfc="n" abs="n" inn="n" sloc="15" jdoc="Template used to create other test">
			<mth name="/:test.org.quickserver.SkeletonTest.SkeletonTest(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:test.org.quickserver.SkeletonTest.setUp()" access="prot" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.SkeletonTest.tearDown()" access="prot" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.SkeletonTest.main(String)" access="pub" jdoc="">
				<param name="args"/>
			</mth>
			<mth name="/:test.org.quickserver.SkeletonTest.testAssert()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/:test.org.quickserver.net.server">
		<class name="/:test.org.quickserver.net.server.SimpleServerNBlockTest" intfc="n" abs="n" inn="n" sloc="11" jdoc="JUnit test cases for QuickServer">
			<mth name="/:test.org.quickserver.net.server.SimpleServerNBlockTest.SimpleServerNBlockTest(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:test.org.quickserver.net.server.SimpleServerNBlockTest.getServerMode()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.SimpleServerNBlockTest.getServerName()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:test.org.quickserver.net.server.QuickServerTest" intfc="n" abs="n" inn="n" sloc="41" jdoc="JUnit test cases for QuickServer">
			<comm cntt="v1.2"/>
			<field name="server" access="priv" jdoc=""/>
			<mth name="/:test.org.quickserver.net.server.QuickServerTest.QuickServerTest(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:test.org.quickserver.net.server.QuickServerTest.setUp()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.QuickServerTest.tearDown()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.QuickServerTest.main(String)" access="pub" jdoc="">
				<param name="args"/>
			</mth>
			<mth name="/:test.org.quickserver.net.server.QuickServerTest.testQuickServerStatics()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.QuickServerTest.testQuickServerBasic()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.QuickServerTest.testQuickServerTimeout()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.QuickServerTest.testQuickServerClientCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.QuickServerTest.testQuickServerBindAddr()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.QuickServerTest.testQuickServerStore()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.QuickServerTest.testQuickServerAppLogger()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:test.org.quickserver.net.server.TestCommandHandler" intfc="n" abs="n" inn="n" sloc="34" jdoc="TestEventHandler for QuickServer">
			<field name="handleCommandFlag" access="priv" jdoc=""/>
			<field name="response" access="priv" jdoc=""/>
			<field name="request" access="priv" jdoc=""/>
			<mth name="/:test.org.quickserver.net.server.TestCommandHandler.handleCommand(ClientHandler, String)" access="pub" jdoc="">
				<comm cntt="System.out.println(&amp;quot;Got-&amp;gt;&amp;quot;+command+&amp;quot;&amp;lt;-&amp;quot;);"/>
				<param name="handler"/>
				<param name="command"/>
			</mth>
			<mth name="/:test.org.quickserver.net.server.TestCommandHandler.getRequest()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.TestCommandHandler.getResponse()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.TestCommandHandler.setResponse(String)" access="pub" jdoc="">
				<param name="res"/>
			</mth>
			<mth name="/:test.org.quickserver.net.server.TestCommandHandler.getHandleCommandFlag()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.TestCommandHandler.reset()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:test.org.quickserver.net.server.TestEventHandler" intfc="n" abs="n" inn="n" sloc="28" jdoc="TestEventHandler for QuickServer">
			<field name="gotConnectedFlag" access="priv" jdoc=""/>
			<field name="lostConnectionFlag" access="priv" jdoc=""/>
			<field name="closingConnectionFlag" access="priv" jdoc=""/>
			<mth name="/:test.org.quickserver.net.server.TestEventHandler.gotConnected(ClientHandler)" access="pub" jdoc="">
				<param name="handler"/>
			</mth>
			<mth name="/:test.org.quickserver.net.server.TestEventHandler.lostConnection(ClientHandler)" access="pub" jdoc="">
				<param name="handler"/>
			</mth>
			<mth name="/:test.org.quickserver.net.server.TestEventHandler.closingConnection(ClientHandler)" access="pub" jdoc="">
				<param name="handler"/>
			</mth>
			<mth name="/:test.org.quickserver.net.server.TestEventHandler.getGotConnectedFlag()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.TestEventHandler.getLostConnectionFlag()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.TestEventHandler.getClosingConnectionFlag()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.TestEventHandler.reset()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:test.org.quickserver.net.server.SimpleServerBlockTest" intfc="n" abs="n" inn="n" sloc="113" jdoc="JUnit test cases for QuickServer">
			<field name="server" access="priv" jdoc=""/>
			<field name="client" access="priv" jdoc=""/>
			<field name="host" access="priv" jdoc=""/>
			<field name="port" access="priv" jdoc=""/>
			<field name="config" access="priv" jdoc=""/>
			<mth name="/:test.org.quickserver.net.server.SimpleServerBlockTest.getServerMode()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.SimpleServerBlockTest.getServerName()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.SimpleServerBlockTest.SimpleServerBlockTest(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:test.org.quickserver.net.server.SimpleServerBlockTest.configServer()" access="priv" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.SimpleServerBlockTest.setUp()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.SimpleServerBlockTest.tearDown()" access="pub" jdoc="">
				<comm cntt="server = null;"/>
			</mth>
			<mth name="/:test.org.quickserver.net.server.SimpleServerBlockTest.main(String)" access="pub" jdoc="">
				<param name="args"/>
			</mth>
			<mth name="/:test.org.quickserver.net.server.SimpleServerBlockTest.testQuickServerBasic()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.SimpleServerBlockTest.testQuickServerLostCon()" access="pub" jdoc="">
			</mth>
			<mth name="/:test.org.quickserver.net.server.SimpleServerBlockTest.sleep(int)" access="priv" jdoc="">
				<param name="time"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/main/:org.quickserver.net">
		<class name="/main/:org.quickserver.net.ConnectionLostException" intfc="n" abs="n" inn="n" sloc="8" jdoc="Generic ConnectionLostException used by {@link org.quickserver.net.server.QuickServer} and its support classes. @since 1.4 @author Akshathkumar Shetty">
			<mth name="/main/:org.quickserver.net.ConnectionLostException.ConnectionLostException()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.ConnectionLostException.ConnectionLostException(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.AppException" intfc="n" abs="n" inn="n" sloc="11" jdoc="Generic Application Exception used by {@link org.quickserver.net.server.QuickServer} and its support Classes. @author Akshathkumar Shetty">
			<mth name="/main/:org.quickserver.net.AppException.AppException()" access="pub" jdoc="@since 1.4">
			</mth>
			<mth name="/main/:org.quickserver.net.AppException.AppException(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/main/:org.quickserver.net.AppException.AppException(String, Exception)" access="pub" jdoc="">
				<param name="s"/>
				<param name="ex"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.Service" intfc="y" abs="n" inn="n" sloc="15" jdoc="This interface is for any class that would like to follow Service Configurator Pattern. &amp;lt;p&amp;gt; Thanks to Markus Elfring for his email. &amp;lt; p&amp;gt; @author Akshathkumar Shetty @since 1.2">
			<comm cntt="Sets max_client =0;"/>
			<comm cntt="Set max_client back to its value"/>
			<field name="UNKNOWN" access="pub" jdoc="Un initialised or unknown"/>
			<field name="STOPPED" access="pub" jdoc=""/>
			<field name="INIT" access="pub" jdoc=""/>
			<field name="SUSPENDED" access="pub" jdoc=""/>
			<field name="RUNNING" access="pub" jdoc=""/>
			<mth name="/main/:org.quickserver.net.Service.initService(Object)" access="pub" jdoc="Initialise and create the service">
				<param name="config"/>
			</mth>
			<mth name="/main/:org.quickserver.net.Service.startService()" access="pub" jdoc="Start the service">
			</mth>
			<mth name="/main/:org.quickserver.net.Service.stopService()" access="pub" jdoc="Stop the service">
			</mth>
			<mth name="/main/:org.quickserver.net.Service.suspendService()" access="pub" jdoc="Suspend the service">
			</mth>
			<mth name="/main/:org.quickserver.net.Service.resumeService()" access="pub" jdoc="Resume the service">
			</mth>
			<mth name="/main/:org.quickserver.net.Service.info()" access="pub" jdoc="Information about the service, recommended format given below. &amp;lt;p&amp;gt;&amp;lt;code&amp;gt; &amp;lt;&amp;lt;ServiceName&amp;gt;&amp;gt; v&amp;lt;&amp;lt;Version_No&amp;gt;&amp;gt;\n&amp;lt;br&amp;gt; &amp;lt;&amp;lt;IP_ADDRESS&amp;gt;&amp;gt; &amp;lt;&amp;lt;PORT_NO&amp;gt;&amp;gt;\n&amp;lt;br&amp;gt; &amp;lt;&amp;lt;ANY OTHET INFORMATION&amp;gt;&amp;gt; &amp;lt; code&amp;gt;&amp;lt; p&amp;gt;">
			</mth>
			<mth name="/main/:org.quickserver.net.Service.getServiceState()" access="pub" jdoc="Returns the state of the process As any constant of {@link Service} interface.">
			</mth>
			<mth name="/main/:org.quickserver.net.Service.getServiceError()" access="pub" jdoc="Returns service error if any. @since 1.4.7">
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.InitServerHook" intfc="y" abs="n" inn="n" sloc="4" jdoc="This interface is for any class that would like to become a onetime on init server hook. Called just after server loads the xml configuration file. Can be using to set up loggers. These classes should have a default constructor. @see org.quickserver.util.xmlreader.InitServerHooks @see org.quickserver.net.ServerHook @author Akshathkumar Shetty @since 1.4">
			<mth name="/main/:org.quickserver.net.InitServerHook.info()" access="pub" jdoc="Information about the server hook.">
			</mth>
			<mth name="/main/:org.quickserver.net.InitServerHook.handleInit(QuickServer)" access="pub" jdoc="Method called to perform any initialisation @param quickserver is the server to which hook belongs to.">
				<param name="quickserver"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.ServerHook" intfc="y" abs="n" inn="n" sloc="9" jdoc="This interface is for any class that would like to become a server hook. These are event listeners to the QuickServer. &amp;lt;p&amp;gt;Following types of Server hooks are currently supported. pre-startup, post-startup, pre-shutdown, post-shutdown. These classes should have a default constructor. &amp;lt; p&amp;gt; @see org.quickserver.util.xmlreader.ServerHooks @see org.quickserver.net.InitServerHook @author Akshathkumar Shetty @since 1.3.3">
			<comm cntt="--types of hooks supported"/>
			<const name="PRE_STARTUP" access="pub" jdoc=""/>
			<const name="POST_STARTUP" access="pub" jdoc=""/>
			<const name="PRE_SHUTDOWN" access="pub" jdoc=""/>
			<const name="POST_SHUTDOWN" access="pub" jdoc=""/>
			<mth name="/main/:org.quickserver.net.ServerHook.info()" access="pub" jdoc="Information about the server hook.">
			</mth>
			<mth name="/main/:org.quickserver.net.ServerHook.initHook(QuickServer)" access="pub" jdoc="Method called to perform any initialisation @param quickserver is the server to which hook belongs to.">
				<param name="quickserver"/>
			</mth>
			<mth name="/main/:org.quickserver.net.ServerHook.handleEvent(int)" access="pub" jdoc="Invoked pre post server event. If the hook is doing some action for the even passed it should return true indicating the same. @see #PRE_STARTUP @see #POST_STARTUP @see #PRE_SHUTDOWN @see #POST_SHUTDOWN">
				<param name="event"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/main/:org.quickserver.net.client">
		<class name="/main/:org.quickserver.net.client.ClientService" intfc="y" abs="n" inn="n" sloc="17" jdoc="Interface that represents client socket services. @author Akshathkumar Shetty @since 1.4.7">
			<comm cntt="modes"/>
			<const name="BLOCKING" access="pub" jdoc=""/>
			<const name="NON_BLOCKING" access="pub" jdoc=""/>
			<mth name="/main/:org.quickserver.net.client.ClientService.getMode()" access="pub" jdoc="Returns the client mode.">
			</mth>
			<mth name="/main/:org.quickserver.net.client.ClientService.connect(String, int)" access="pub" jdoc="Connects this socket to the server.">
				<param name="host"/>
				<param name="port"/>
			</mth>
			<mth name="/main/:org.quickserver.net.client.ClientService.isConnected()" access="pub" jdoc="Returns the connection state of the socket.">
			</mth>
			<mth name="/main/:org.quickserver.net.client.ClientService.close()" access="pub" jdoc="Closes this socket.">
			</mth>
			<mth name="/main/:org.quickserver.net.client.ClientService.sendBinary(byte[])" access="pub" jdoc="Send binary data">
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.net.client.ClientService.sendBytes(String)" access="pub" jdoc="Send bytes (String)">
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.net.client.ClientService.sendString(String)" access="pub" jdoc="Send String appended with \r\n">
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.net.client.ClientService.sendObject(Object)" access="pub" jdoc="Send object">
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.net.client.ClientService.readBinary()" access="pub" jdoc="Read binary data">
			</mth>
			<mth name="/main/:org.quickserver.net.client.ClientService.readBytes()" access="pub" jdoc="Read bytes (String)">
			</mth>
			<mth name="/main/:org.quickserver.net.client.ClientService.readString()" access="pub" jdoc="Read String appended with \r\n">
			</mth>
			<mth name="/main/:org.quickserver.net.client.ClientService.readObject()" access="pub" jdoc="Read String appended">
			</mth>
			<mth name="/main/:org.quickserver.net.client.ClientService.getSocket()" access="pub" jdoc="Returns the Socket class that is used to communicate .">
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.client.BlockingClient" intfc="n" abs="n" inn="n" sloc="168" jdoc="Blocking Client socket. @author Akshathkumar Shetty @since 1.4.7">
			<field name="logger" access="priv" jdoc=""/>
			<field name="charset" access="priv" jdoc=""/>
			<field name="host" access="priv" jdoc=""/>
			<field name="port" access="priv" jdoc=""/>
			<field name="socket" access="priv" jdoc=""/>
			<field name="out" access="priv" jdoc=""/>
			<field name="b_out" access="priv" jdoc=""/>
			<field name="o_out" access="priv" jdoc=""/>
			<field name="in" access="priv" jdoc=""/>
			<field name="b_in" access="priv" jdoc=""/>
			<field name="br" access="priv" jdoc=""/>
			<field name="o_in" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.getMode()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.connect(String, int)" access="pub" jdoc="">
				<param name="host"/>
				<param name="port"/>
			</mth>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.isConnected()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.close()" access="pub" jdoc="">
				<comm cntt="&amp;&amp; isSecure()==false"/>
				<comm cntt="if(socket!=null) { socket.shutdownInput(); }"/>
			</mth>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.sendBinary(byte[])" access="pub" jdoc="">
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.sendBytes(String)" access="pub" jdoc="">
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.sendString(String)" access="pub" jdoc="">
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.sendObject(Object)" access="pub" jdoc="">
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.readBinary()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.readBytes()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.readString()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.readObject()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.getSocket()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.checkObjectOutputStream()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.checkBufferedOutputStream()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.checkBufferedInputStream()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.checkBufferedReader()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.checkObjectInputStream()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.client.BlockingClient.readInputStream(InputStream)" access="prot" jdoc="">
				<comm cntt="Connection lost"/>
				<param name="_in"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/main/:org.quickserver.net.qsadmin">
		<class name="/main/:org.quickserver.net.qsadmin.CommandHandler" intfc="n" abs="n" inn="n" sloc="605" jdoc="ClientCommandHandler for QSAdminServer. &amp;lt;p&amp;gt; = Protocol =&amp;lt;br&amp;gt; Each response starts with a status. &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;+OK = Success &amp;lt;li&amp;gt;-ERR = Failed &amp;lt; ul&amp;gt; If response if one lined then it follows the status. Else You will get &amp;quot;info follows&amp;quot; as the first line followed by with many lines of response ending by a dot in a line by itself. i.e., &amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;.&amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;&amp;lt;br&amp;gt; Command supported are give below .. [ Note: &amp;lt;&amp;lt;target&amp;gt;&amp;gt; = server|self ] &amp;lt;br&amp;gt;&amp;nbsp;&amp;lt;br&amp;gt; &amp;lt;table align=&amp;quot;center&amp;quot; border=1&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Command&amp;lt; th&amp;gt;&amp;lt;th&amp;gt;Param&amp;lt; th&amp;gt;&amp;lt;th&amp;gt;Effect&amp;lt; th&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;start&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Starts target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;stop&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Stops target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;restart&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;=stop+start command&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;shutdown&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;nbsp;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Stops server and self. &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;kill or exit&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;nbsp;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Stops server and self and kill all threads. &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;info&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Information about target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;noclient&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;No Client connected to the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;running&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Checks if target is running.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; maxClient&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets max no of client for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; port&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets port for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; maxAuthTryMsg&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets maxAuthTryMsg for the target. &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; clientCommandHandler&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets ClientCommandHandler class for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; clientAuthenticationHandler&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets ClientAuthenticationHandler class for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; clientData&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets ClientData class for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; timeout&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets timeout set for clients for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; maxClient &amp;lt;&amp;lt;value&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets max no of client for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; port &amp;lt;&amp;lt;value&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets port for the target. &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; maxAuthTryMsg &amp;lt;&amp;lt;value&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets maxAuthTryMsg for the target. &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; clientCommandHandler &amp;lt;&amp;lt;value&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets ClientCommandHandler class for the target. &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; clientAuthenticationHandler &amp;lt;&amp;lt;value&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets ClientAuthenticationHandler class for the target. &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; clientData &amp;lt;&amp;lt;value&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets ClientData class for the target. &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; timeout &amp;lt;&amp;lt;value&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets timeout set for clients for the target. &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;version&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;nbsp;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets the version of the QuickServer library used.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;quit&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;nbsp;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Close session.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td colspan=3&amp;gt;New Command in v1.2 &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;self plugin&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets pluggable command handler for QsAdminServer. &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;self plugin &amp;lt;&amp;lt;full class name&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets Pluggable command handler for QsAdminServer. &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td colspan=3&amp;gt;New Command in v1.3 &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;suspendService&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Suspends target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;resumeService&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Resume target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; maxAuthTry&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets maxAuthTry for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; maxAuthTry&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets maxAuthTry for the target. &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; clientObjectHandler&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets ClientObjectHandler class for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; clientObjectHandler&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets ClientObjectHandler class for the target. &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; timeoutMsg&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets timeout Message for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; timeoutMsg&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets timeout Message for the target. &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; serviceState&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets Service State for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; consoleLoggingFormatter&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets consoleLoggingFormatter for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; consoleLoggingFormatter&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets consoleLoggingFormatter for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; consoleLoggingLevel&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets consoleLoggingLevel for the target. &amp;lt;br&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; consoleLoggingLevel&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets consoleLoggingLevel for the target. &amp;lt;br&amp;gt; [&amp;lt;code&amp;gt;SEVERE|WARNING|INFO|CONFIG|FINE|FINER|FINEST&amp;lt;code&amp;gt;]&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; maxClientMsg&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets maxClientMsg for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; maxClientMsg&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets maxClientMsg for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td colspan=3&amp;gt;New Command in v1.3.1 &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; loggingLevel&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets LoggingLevel for the target. &amp;lt;br&amp;gt; [&amp;lt;code&amp;gt;SEVERE|WARNING|INFO|CONFIG|FINE|FINER|FINEST&amp;lt;code&amp;gt;]&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td colspan=3&amp;gt;New Command in v1.3.2 &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;memoryInfo&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;nbsp;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Memory Information {Total:Used:Max}&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; communicationLogging&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets communication logging flag for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; communicationLogging&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets communication logging flag for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; objectPoolConfig-maxActive&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets maxActive of objectPoolConfig for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; objectPoolConfig-maxActive&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets maxActive of objectPoolConfig for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; objectPoolConfig-maxIdle&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets maxIdle of objectPoolConfig for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; objectPoolConfig-maxIdle&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets maxIdle of objectPoolConfig for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td colspan=3&amp;gt;New Command in v1.4.5 &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;all-pool-info&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gives stats of all pools for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;client-thread-pool-dump&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gives dump of all threads in pool for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;start&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;console&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Starts console shell.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;stop&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;console&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Stops console shell.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td colspan=3&amp;gt;New Command in v1.4.6 &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;client-handler-pool-dump&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gives dump of all ClientHandler in pool for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; clientEventHandler&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets ClientEventHandler class for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; clientEventHandler &amp;lt;&amp;lt;value&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets ClientEventHandler class for the target. &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; clientWriteHandler&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets ClientWriteHandler class for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; clientWriteHandler &amp;lt;&amp;lt;value&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets ClientWriteHandler class for the target. &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; clientExtendedEventHandler&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets ClientExtendedEventHandler class for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; clientExtendedEventHandler &amp;lt;&amp;lt;value&amp;gt;&amp;gt;&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets ClientExtendedEventHandler class for the target. &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;set&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; objectPoolConfig-initSize&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Sets initSize of objectPoolConfig for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;get&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;&amp;lt;target&amp;gt;&amp;gt; objectPoolConfig-initSize&amp;lt; td&amp;gt;&amp;lt;td&amp;gt;Gets initSize of objectPoolConfig for the target.&amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td colspan=3&amp;gt; = Take effect after a restart command.&amp;lt;br&amp;gt; value if set null then key will be set to &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; &amp;lt; td&amp;gt;&amp;lt; tr&amp;gt; &amp;lt; table&amp;gt; &amp;lt;br&amp;gt;Note: &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Stopping the QuickServer will not disconnect any client connect to it, since client connections are handled by different thread. &amp;lt;li&amp;gt;&amp;lt;code&amp;gt;restart&amp;lt; code&amp;gt; and &amp;lt;code&amp;gt;start&amp;lt; code&amp;gt; response just indicate only if command was sent. Do check the state of the target using &amp;lt;code&amp;gt;running&amp;lt; code&amp;gt; command to see if server was started successful. &amp;lt;li&amp;gt;Demo code examples\EchoServer shows the use of QsAdminServer to control itself. &amp;lt; ul&amp;gt; Eg: &amp;lt;br&amp;gt; &amp;lt;BLOCKQUOTE&amp;gt; noClient server&amp;lt;br&amp;gt; noClient self&amp;lt;br&amp;gt; get server maxClient&amp;lt;br&amp;gt; set server maxClient 10 &amp;lt; BLOCKQUOTE&amp;gt; &amp;lt; p&amp;gt; @since 1.1">
			<comm cntt="-- ClientEventHandler"/>
			<comm cntt="-- ClientEventHandler"/>
			<field name="logger" access="priv" jdoc=""/>
			<field name="plugin" access="priv" jdoc=""/>
			<field name="runtime" access="priv" jdoc=""/>
			<field name="temp" access="pub" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.CommandHandler.gotConnected(ClientHandler)" access="pub" jdoc="">
				<comm cntt="v.2"/>
				<comm cntt="v1.3.2"/>
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.CommandHandler.lostConnection(ClientHandler)" access="pub" jdoc="">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.CommandHandler.closingConnection(ClientHandler)" access="pub" jdoc="">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.CommandHandler.handleCommand(ClientHandler, String)" access="pub" jdoc="">
				<comm cntt="v1.2 - plugin"/>
				<comm cntt="v1.4.5"/>
				<comm cntt="v1.4.5"/>
				<comm cntt="v1.3,v1.3.2"/>
				<comm cntt="ignore"/>
				<comm cntt="v1.3.2"/>
				<comm cntt="Padding : Total:Used:Max"/>
				<comm cntt="v1.4.5"/>
				<comm cntt="v1.3.2"/>
				<comm cntt="used:idle"/>
				<comm cntt="v1.4.5"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="v1.3.2"/>
				<comm cntt="used:idle"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="used:idle"/>
				<comm cntt="v1.4.5"/>
				<comm cntt="used:idle"/>
				<comm cntt="target,key,value"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="v1.3"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="v1.3"/>
				<comm cntt="v1.2"/>
				<comm cntt="v1.3"/>
				<comm cntt="v1.3"/>
				<comm cntt="v1.3.1"/>
				<comm cntt="v1.3.2"/>
				<comm cntt="target,key"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="v1.2"/>
				<comm cntt="v1.3"/>
				<comm cntt="v1.3"/>
				<comm cntt="v1.3"/>
				<param name="handler"/>
				<param name="command"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.Data" intfc="n" abs="n" inn="n" sloc="23" jdoc="">
			<field name="lastAsked" access="priv" jdoc=""/>
			<field name="username" access="priv" jdoc=""/>
			<field name="password" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.Data.setLastAsked(String)" access="pub" jdoc="">
				<param name="lastAsked"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.Data.getLastAsked()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.Data.setUsername(String)" access="pub" jdoc="">
				<param name="username"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.Data.getUsername()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.Data.setPassword(byte[])" access="pub" jdoc="">
				<param name="password"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.Data.getPassword()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.QSAdminServer" intfc="n" abs="n" inn="n" sloc="105" jdoc="QSAdminServer Main class. &amp;lt;p&amp;gt; This is can be used to setup a admin server to a {@link org.quickserver.net.server.QuickServer}, it is implemented as a QuickServer. {@link org.quickserver.net.server.QuickServer} comes with a very use full method{@link org.quickserver.net.server.QuickServer#startQSAdminServer} that creates QSAdminServer associated with itself and starts it at the specified port or the default port 9877. &amp;lt; p&amp;gt; @see #startServer() @since 1.1">
			<comm cntt="this server"/>
			<comm cntt="v1.2"/>
			<comm cntt="v1.3.2"/>
			<field name="logger" access="priv" jdoc=""/>
			<const name="VER" access="priv" jdoc=""/>
			<field name="controlServer" access="priv" jdoc=""/>
			<field name="adminServer" access="priv" jdoc=""/>
			<field name="port" access="priv" jdoc=""/>
			<field name="cmdHandle" access="priv" jdoc=""/>
			<field name="auth" access="priv" jdoc=""/>
			<field name="data" access="priv" jdoc=""/>
			<field name="pluginClass" access="priv" jdoc=""/>
			<field name="plugin" access="priv" jdoc=""/>
			<field name="shellEnable" access="priv" jdoc=""/>
			<field name="promptName" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminServer.QSAdminServer(QuickServer)" access="pub" jdoc="Creates QSAdminServer with default settings. By default it has been set to allow only 1 client connection to it and binds to &amp;lt;code&amp;gt;127.0.0.1&amp;lt; code&amp;gt;. @param controlServer QuickServer to control.">
				<comm cntt="v1.2"/>
				<comm cntt="lets set to self"/>
				<param name="controlServer"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminServer.setAuthenticator(String)" access="pub" jdoc="Sets the Authenticator class that handles the authentication of a client, if null uses default {@link Authenticator}. @param authenticator full class name of the class that implements {@link org.quickserver.net.server.Authenticator}. @since 1.3 @deprecated since 1.4.6 use setClientAuthenticationHandler">
				<param name="authenticator"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminServer.setClientAuthenticationHandler(String)" access="pub" jdoc="Sets the ClientAuthenticationHandler class that handles the authentication of a client, if null uses default {@link Authenticator}. @param authenticator full class name of the class that implements {@link org.quickserver.net.server.ClientAuthenticationHandler}. @since 1.4.6">
				<param name="authenticator"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminServer.startServer(int)" access="pub" jdoc="Starts the QSAdminServer. @param port to run QSAdminServer on">
				<param name="port"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminServer.startServer()" access="pub" jdoc="Starts the QSAdminServer. This method also sets the &amp;apos;Store Objects&amp;apos; of QSAdminServer&amp;apos;s QuickServer to the following &amp;lt;PRE&amp;gt; POS 0 = QuickServer that is controled. POS 1 = Command Plugin if present for QSAdminServer&amp;apos;s CommandHandler POS 3 = QSAdminServer own reference object. &amp;lt; PRE&amp;gt; @since 1.2">
				<comm cntt="v1.2 - plugin stored in pos = 1,"/>
				<comm cntt="QSAdminServer stored at pos = 2"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminServer.getServer()" access="pub" jdoc="Returns the QuickServer object that created it.">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminServer.getControlServer()" access="pub" jdoc="Returns the QuickServer object that is being controled by this QSAdminServer.">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminServer.prepareCommandPlugin()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminServer.setCommandPlugin(String)" access="pub" jdoc="Sets the {@link CommandPlugin} class which plugs into{@link CommandHandler} of QsAdminServer. It should be set before QSAdminServer is started. Or QSAdminServer must be restarted. @param pluginClass the fully qualified name of the desired class that implements {@link CommandPlugin} @exception if could not load the class @since 1.2">
				<param name="pluginClass"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminServer.getCommandPlugin()" access="pub" jdoc="Returns the {@link CommandPlugin} class which plugs into{@link CommandHandler} of QsAdminServer,it will be null if not set. @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminServer.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminServer.isShellEnable()" access="pub" jdoc="Returns flag indicated if command shell is enabled. @since 1.3.2">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminServer.setShellEnable(boolean)" access="pub" jdoc="Sets the flag indicated if command shell is enabled. @since 1.3.2">
				<param name="flag"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminServer.setPromptName(String)" access="pub" jdoc="Set the prompt name for QSAdminShell Default values = &amp;lt;code&amp;gt;QSAdmin&amp;lt; code&amp;gt; @since 1.3.2">
				<param name="promptName"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminServer.getPromptName()" access="pub" jdoc="Gets the prompt name for QSAdminShell @since 1.3.2">
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.CommandPlugin" intfc="y" abs="n" inn="n" sloc="4" jdoc="This interface defines the methods that should be implemented by any class that wants to override default protocol of QsAdminServer or add new command specific to your application. &amp;lt;p&amp;gt; Recommendations to be followed when implementing ClientCommandHandler &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Should be thread safe. &amp;lt;li&amp;gt;It should not store any client data that may be needed in the implementation. &amp;lt;li&amp;gt;If any client data is need to be saved from the client session, it should be saved to a {@link ClientData} class, which can be retrieved using handler.getClientData() method. &amp;lt;li&amp;gt;Should have a default constructor - If QsAdminSupport is needed. &amp;lt; ul&amp;gt; If you need to access the QuickServer you can use the code given below&amp;lt;br &amp;gt; &amp;lt;code&amp;gt;QuickServer myserver = (QuickServer) handler.getServer().getStoreObjects()[0];&amp;lt; code&amp;gt; &amp;lt; p&amp;gt; @see QSAdminServer#startServer() @author Akshathkumar Shetty">
			<mth name="/main/:org.quickserver.net.qsadmin.CommandPlugin.handleCommand(ClientHandler, String)" access="pub" jdoc="Method called every time client sends a command to QsAdminServer. Should be used to handle the command sent and send any requested data. If the comand is handled by the plugin it should return &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; else it should return &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; indicating &amp;lt;code&amp;gt;qsadmin.CommandHandler&amp;lt; code&amp;gt; to take any default action for the command. This method can be used to override default protocol of QsAdminServer or add new command specific to your application. @exception java.net.SocketTimeoutException if socket times out @exception java.io.IOException if io error in socket">
				<param name="handler"/>
				<param name="command"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.QSAdminAPI" intfc="n" abs="n" inn="n" sloc="88" jdoc="QSAdminAPI class to communicate to QsAdmin from java applications. &amp;lt;p&amp;gt; Eg: &amp;lt;code&amp;gt;&amp;lt;BLOCKQUOTE&amp;gt;&amp;lt;pre&amp;gt; QSAdminAPI qsAdminApi = new QSAdminAPI(&amp;quot;127.0.0.1&amp;quot;, 9080); if(qsAdminApi.logon()) { System.out.println(&amp;quot;Logged in&amp;quot;); String info = qsAdminApi.sendCommand(&amp;quot;info server&amp;quot;); System.out.println(&amp;quot;Info on Server :\n&amp;quot;+info); qsAdminApi.logoff(); } else { System.out.println(&amp;quot;Bad Login&amp;quot;); qsAdminApi.close(); } &amp;lt; pre&amp;gt;&amp;lt; BLOCKQUOTE&amp;gt;&amp;lt; code&amp;gt;&amp;lt; p&amp;gt; @see QSAdminServer @since 1.4 @author Akshathkumar Shetty">
			<field name="logger" access="priv" jdoc=""/>
			<field name="username" access="priv" jdoc=""/>
			<field name="password" access="priv" jdoc=""/>
			<field name="host" access="priv" jdoc=""/>
			<field name="port" access="priv" jdoc=""/>
			<field name="socket" access="priv" jdoc=""/>
			<field name="in" access="priv" jdoc=""/>
			<field name="out" access="priv" jdoc=""/>
			<field name="br" access="priv" jdoc=""/>
			<field name="bw" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminAPI.QSAdminAPI(String, int)" access="pub" jdoc="Creates QSAdminAPI object that will communicate with the passed host and port.">
				<param name="host"/>
				<param name="port"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminAPI.logon()" access="pub" jdoc="Will attempt to connect and logon to the remote QsAdminServer.">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminAPI.logon(String, String)" access="pub" jdoc="Will attempt to connect and logon to the remote QsAdminServer.">
				<param name="username"/>
				<param name="password"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminAPI.sendCommand(String)" access="pub" jdoc="Sends the given command to QSAdmin and gives the response back.">
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminAPI.readResponse()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminAPI.logoff()" access="pub" jdoc="Logoff the QSAdminServer and closed the socket associated.">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminAPI.close()" access="pub" jdoc="Closes the socket associated.">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminAPI.main(String[])" access="pub" jdoc="">
				<param name="args"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.Authenticator" intfc="n" abs="n" inn="n" sloc="36" jdoc="Default QSAdminServer ServerAuthenticator. &amp;lt;p&amp;gt; Username : Admin&amp;lt;br&amp;gt; Password : QsAdm1n &amp;lt; p&amp;gt; @since 1.1">
			<mth name="/main/:org.quickserver.net.qsadmin.Authenticator.askAuthentication(ClientHandler)" access="pub" jdoc="">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.Authenticator.handleAuthentication(ClientHandler, String)" access="pub" jdoc="">
				<param name="handler"/>
				<param name="command"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.Authenticator.validate(String, byte[])" access="prot" jdoc="This function is used to validate username and password. May be overridden to change username and or password.">
				<param name="username"/>
				<param name="password"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.QSAdminShell" intfc="n" abs="n" inn="n" sloc="264" jdoc="QSAdmin Command Shell. This class will auto increase the maxClient by 1 if for QSAdminServer maxClient is not equals to -1 and 0 (no other client except shell is allowed). @author Akshathkumar Shetty @since 1.3.2">
			<field name="logger" access="priv" jdoc=""/>
			<field name="promptName" access="priv" jdoc=""/>
			<field name="promptPostFix" access="priv" jdoc=""/>
			<field name="prompt" access="priv" jdoc=""/>
			<field name="error" access="priv" jdoc=""/>
			<field name="in" access="priv" jdoc=""/>
			<field name="command" access="priv" jdoc=""/>
			<field name="clientSocket" access="priv" jdoc=""/>
			<field name="server" access="priv" jdoc=""/>
			<field name="s_in" access="priv" jdoc=""/>
			<field name="s_out" access="priv" jdoc=""/>
			<field name="s_br" access="priv" jdoc=""/>
			<field name="s_bo" access="priv" jdoc=""/>
			<field name="gotResponse" access="priv" jdoc=""/>
			<field name="multilineResponse" access="priv" jdoc=""/>
			<field name="stop" access="priv" jdoc=""/>
			<field name="qsAdminShell" access="priv" jdoc=""/>
			<field name="oldMaxClient" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminShell.getInstance(QuickServer, String)" access="pub" jdoc="">
				<param name="server"/>
				<param name="promptName"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminShell.QSAdminShell(QuickServer, String)" access="priv" jdoc="">
				<param name="server"/>
				<param name="promptName"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminShell.setPromptName(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminShell.getPromptName()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminShell.stopShell()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminShell.run()" access="pub" jdoc="">
				<comm cntt="if(command.toLowerCase().startsWith(&amp;quot;shellto&amp;quot;)) { try { StringTokenizer st = new StringTokenizer(command, &amp;quot; &amp;quot;); if(st.countTokens()!=3) { throw new Exception(&amp;quot;Bad param sent to shellto command!&amp;quot;); } clientSocket.close(); clientSocket = null; st.nextToken(); connect(st.nextToken(), Integer.parseInt(st.nextToken())); continue; } catch(Exception e) { logger.fine(error+e.getMessage()); } } else"/>
				<comm cntt="end while"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminShell.print(String)" access="priv" jdoc="">
				<param name="text"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminShell.println(String)" access="priv" jdoc="">
				<param name="text"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminShell.connect()" access="priv" jdoc="">
				<comm cntt="ignore"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminShell.connect(String, int)" access="priv" jdoc="">
				<comm cntt="skip header"/>
				<comm cntt="increase maxClient for self by 1"/>
				<param name="host"/>
				<param name="port"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminShell.sendCommand(String)" access="priv" jdoc="">
				<param name="command"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminShell.sendCommand(String, boolean)" access="priv" jdoc="">
				<param name="command"/>
				<param name="wait"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminShell.startSocketListener()" access="pub" jdoc="">
				<comm cntt="end of while"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.QSAdminShell.tryFullThreadDump()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/main/:org.quickserver.net.qsadmin.gui">
		<class name="/main/:org.quickserver.net.qsadmin.gui.SimpleActionListener" intfc="n" abs="n" inn="n" sloc="26" jdoc="">
			<field name="sm" access="priv" jdoc=""/>
			<field name="mcp" access="priv" jdoc=""/>
			<field name="qsadminMain" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleActionListener.SimpleActionListener(QSAdminMain, SimpleCommand, MainCommandPanel)" access="pub" jdoc="">
				<param name="qsadminMain"/>
				<param name="sm"/>
				<param name="mcp"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleActionListener.actionPerformed(ActionEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.gui.LoginDialog" intfc="n" abs="n" inn="n" sloc="222" jdoc="Login Dialog QuickServer Admin GUI - QSAdminGUI @author Akshathkumar Shetty">
			<comm cntt="JFrame"/>
			<comm cntt="for storing the values"/>
			<field name="topPanel" access="priv" jdoc=""/>
			<field name="ipPanel" access="priv" jdoc=""/>
			<field name="authPanel" access="priv" jdoc=""/>
			<field name="buttonPanel" access="priv" jdoc=""/>
			<field name="productName" access="priv" jdoc=""/>
			<field name="ipLabel" access="priv" jdoc=""/>
			<field name="ipField" access="priv" jdoc=""/>
			<field name="portLabel" access="priv" jdoc=""/>
			<field name="portField" access="priv" jdoc=""/>
			<field name="loginLabel" access="priv" jdoc=""/>
			<field name="loginField" access="priv" jdoc=""/>
			<field name="passwordLabel" access="priv" jdoc=""/>
			<field name="passwordField" access="priv" jdoc=""/>
			<field name="loginButton" access="priv" jdoc=""/>
			<field name="cancelButton" access="priv" jdoc=""/>
			<field name="statusTxt1" access="priv" jdoc=""/>
			<field name="statusTxt2" access="priv" jdoc=""/>
			<field name="gbc" access="priv" jdoc=""/>
			<field name="values" access="priv" jdoc=""/>
			<field name="isOk" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.LoginDialog.LoginDialog(Frame)" access="pub" jdoc="">
				<comm cntt="--- Action"/>
				<comm cntt="---- Action"/>
				<comm cntt="--- Top Panel"/>
				<comm cntt="-- IP Panel"/>
				<comm cntt="-- Login Panel"/>
				<comm cntt="-- buttonPanel"/>
				<param name="parent"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.LoginDialog.showError(String)" access="priv" jdoc="">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.LoginDialog.getValues()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.LoginDialog.isOk()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.gui.SplashScreen" intfc="n" abs="n" inn="n" sloc="23" jdoc="">
			<field name="logo" access="prot" jdoc=""/>
			<field name="productName" access="prot" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SplashScreen.SplashScreen()" access="pub" jdoc="">
				<comm cntt="Color.white);"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SplashScreen.kill()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.gui.HeaderPanel" intfc="n" abs="n" inn="n" sloc="142" jdoc="Control Panel - Header for QuickServer Admin GUI - QSAdminGUI @author Akshathkumar Shetty">
			<comm cntt="JFrame"/>
			<comm cntt="--"/>
			<field name="logger" access="priv" jdoc=""/>
			<field name="classLoader" access="priv" jdoc=""/>
			<field name="logo" access="pub" jdoc=""/>
			<field name="logoAbout" access="pub" jdoc=""/>
			<field name="logoLabel" access="priv" jdoc=""/>
			<field name="leftPanel" access="priv" jdoc=""/>
			<field name="rightPanel" access="priv" jdoc=""/>
			<field name="productName" access="priv" jdoc=""/>
			<field name="status" access="priv" jdoc=""/>
			<field name="login" access="priv" jdoc=""/>
			<field name="statusTxt1" access="priv" jdoc=""/>
			<field name="statusTxt2" access="priv" jdoc=""/>
			<field name="statusMsg" access="priv" jdoc=""/>
			<field name="gbc" access="priv" jdoc=""/>
			<field name="loginDialog" access="priv" jdoc=""/>
			<const name="parentFrame" access="priv" jdoc=""/>
			<field name="qsadminMain" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.HeaderPanel.HeaderPanel(QSAdminMain, JFrame)" access="pub" jdoc="">
				<comm cntt="--- Left Panel"/>
				<comm cntt="--- Right Panel"/>
				<param name="qsadminMain"/>
				<param name="parentFrame"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.HeaderPanel.setStatus(String)" access="pub" jdoc="">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.HeaderPanel.getStatus()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.HeaderPanel.setLoginText()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.HeaderPanel.setLogoutText()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.HeaderPanel.handleLoginLogout()" access="pub" jdoc="">
				<comm cntt="recall the login dialog"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.gui.QSAdminGUI" intfc="n" abs="n" inn="n" sloc="229" jdoc="QSAdminGUI - Control Panel for QuickServer Admin GUI - QSAdminGUI @author Akshathkumar Shetty @since 1.3">
			<comm cntt="JFrame"/>
			<comm cntt="private StatsPanel statsPanel;"/>
			<comm cntt="--v1.3.2"/>
			<comm cntt="--v1.3.2"/>
			<field name="logger" access="priv" jdoc=""/>
			<field name="qsadminMain" access="priv" jdoc=""/>
			<field name="pluginDir" access="priv" jdoc=""/>
			<field name="classLoader" access="priv" jdoc=""/>
			<field name="logo" access="pub" jdoc=""/>
			<field name="logoAbout" access="pub" jdoc=""/>
			<field name="ball" access="pub" jdoc=""/>
			<field name="headerPanel" access="priv" jdoc=""/>
			<field name="mainCommandPanel" access="priv" jdoc=""/>
			<field name="cmdConsole" access="priv" jdoc=""/>
			<field name="propertiePanel" access="priv" jdoc=""/>
			<field name="tabbedPane" access="priv" jdoc=""/>
			<field name="parentFrame" access="priv" jdoc=""/>
			<const name="pluginPanelMap" access="pub" jdoc=""/>
			<field name="plugins" access="priv" jdoc=""/>
			<field name="mainMenu" access="priv" jdoc=""/>
			<field name="helpMenu" access="priv" jdoc=""/>
			<field name="jMenuBar" access="priv" jdoc=""/>
			<field name="loginMenuItem" access="priv" jdoc=""/>
			<field name="exitMenuItem" access="priv" jdoc=""/>
			<field name="aboutMenuItem" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminGUI.logComand(String, char)" access="pub" jdoc="Logs the interaction, Type can be S - Server Sent C - Client Sent">
				<param name="command"/>
				<param name="type"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminGUI.showGUI(String, SplashScreen)" access="pub" jdoc="Displays the QSAdminGUi with in a JFrame.">
				<param name="args"/>
				<param name="splash"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminGUI.QSAdminGUI(QSAdminMain, JFrame)" access="pub" jdoc="">
				<comm cntt="JScrollPane commandScrollPane = new JScrollPane(mainCommandPanel);"/>
				<comm cntt="splitPane.setDividerLocation(0.70);"/>
				<comm cntt="-- start of loadPlugins"/>
				<comm cntt="-- end of loadPlugins"/>
				<comm cntt="if plugin"/>
				<comm cntt="tabbedPane.setBorder(BorderFactory.createEmptyBorder(0,5,5,5));"/>
				<param name="qsadminMain"/>
				<param name="parentFrame"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminGUI.setStatus(String)" access="pub" jdoc="">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminGUI.setResponse(String)" access="pub" jdoc="">
				<param name="res"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminGUI.appendToConsole(String)" access="pub" jdoc="">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminGUI.setConsoleSend(boolean)" access="pub" jdoc="">
				<param name="flag"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminGUI.updateConnectionStatus(boolean)" access="pub" jdoc="">
				<param name="connected"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminGUI.setPluginDir(String)" access="pub" jdoc="">
				<param name="dir"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminGUI.getPluginDir()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminGUI.buildMenu()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminGUI.about()" access="priv" jdoc="">
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.gui.SaveActionListener" intfc="n" abs="n" inn="n" sloc="38" jdoc="">
			<field name="propertie" access="priv" jdoc=""/>
			<field name="qsadminMain" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SaveActionListener.SaveActionListener(QSAdminMain, Propertie)" access="pub" jdoc="">
				<param name="qsadminMain"/>
				<param name="propertie"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SaveActionListener.actionPerformed(ActionEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.gui.EditFieldDocumentListener" intfc="n" abs="n" inn="n" sloc="14" jdoc="">
			<field name="saveButton" access="pub" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.EditFieldDocumentListener.EditFieldDocumentListener(JButton)" access="pub" jdoc="">
				<param name="saveButton"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.EditFieldDocumentListener.insertUpdate(DocumentEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.EditFieldDocumentListener.removeUpdate(DocumentEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.EditFieldDocumentListener.changedUpdate(DocumentEvent)" access="pub" jdoc="">
				<comm cntt="System.out.println(&amp;quot;&amp;gt;&amp;gt;Change Update&amp;quot;);"/>
				<comm cntt="if(saveButton!=null) saveButton.setEnabled(true);"/>
				<param name="e"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand" intfc="n" abs="n" inn="n" sloc="101" jdoc="A Simple class that Stores information about QSAdmin Command that are common to any &amp;lt;code&amp;gt;target&amp;lt; code&amp;gt; @author Akshathkumar Shetty">
			<comm cntt="when AdminUI was added"/>
			<field name="name" access="priv" jdoc=""/>
			<field name="target" access="priv" jdoc=""/>
			<field name="command" access="priv" jdoc=""/>
			<field name="desc" access="priv" jdoc=""/>
			<field name="targetNeeded" access="priv" jdoc=""/>
			<field name="multiLineResponse" access="priv" jdoc=""/>
			<field name="version" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand.getSimpleCommand()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand.setName(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand.getTarget()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand.setTarget(String)" access="pub" jdoc="">
				<param name="target"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand.getCommand()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand.setCommand(String)" access="pub" jdoc="">
				<param name="command"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand.getDesc()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand.setDesc(String)" access="pub" jdoc="">
				<param name="desc"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand.getTargetNeeded()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand.setTargetNeeded(String)" access="pub" jdoc="">
				<param name="targetNeeded"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand.getMultiLineResponse()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand.setMultiLineResponse(String)" access="pub" jdoc="">
				<param name="multiLineResponse"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand.getVersionNo()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand.setVersion(String)" access="pub" jdoc="">
				<param name="version"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand.toXML()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommand.getVersionNo(String)" access="priv" jdoc="">
				<comm cntt="String ver = getVersion();"/>
				<comm cntt="check if beta"/>
				<comm cntt="check for sub version"/>
				<param name="ver"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain" intfc="n" abs="n" inn="n" sloc="346" jdoc="Main Class of QSAdminGUI QuickServer Admin GUI - QSAdminGUI @author Akshathkumar Shetty">
			<comm cntt="v1.3.2"/>
			<comm cntt="QuickServer.getVersion();"/>
			<field name="logger" access="priv" jdoc=""/>
			<const name="NEW_LINE" access="priv" jdoc=""/>
			<field name="socket" access="priv" jdoc=""/>
			<field name="in" access="priv" jdoc=""/>
			<field name="out" access="priv" jdoc=""/>
			<field name="br" access="priv" jdoc=""/>
			<field name="bw" access="priv" jdoc=""/>
			<field name="connected" access="priv" jdoc=""/>
			<field name="loggedIn" access="priv" jdoc=""/>
			<field name="appendToConsole" access="priv" jdoc=""/>
			<field name="gui" access="priv" jdoc=""/>
			<field name="receivedMsg" access="priv" jdoc=""/>
			<field name="VERSION_OF_SERVER" access="pub" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.QSAdminMain()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.doLogin(String, int, String, String)" access="pub" jdoc="">
				<comm cntt="gui.setResponse(res);"/>
				<comm cntt="try to login"/>
				<comm cntt="+OK Password required"/>
				<comm cntt="password"/>
				<param name="ipAddress"/>
				<param name="port"/>
				<param name="username"/>
				<param name="password"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.doLogout()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.clean()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.sendCommand(String, boolean)" access="pub" jdoc="">
				<param name="command"/>
				<param name="echo"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.readResponse(boolean)" access="pub" jdoc="">
				<comm cntt="check if is single line"/>
				<param name="multiLineResponse"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.sendCommunication(String, boolean, boolean)" access="pub" jdoc="">
				<param name="command"/>
				<param name="multiLineResponse"/>
				<param name="echo"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.sendCommunicationSilent(String, boolean, boolean)" access="pub" jdoc="">
				<param name="command"/>
				<param name="multiLineResponse"/>
				<param name="echo"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.sendCommunicationNoEcho(String, boolean)" access="pub" jdoc="">
				<param name="command"/>
				<param name="multiLineResponse"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.isConnected()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.isLoggedIn()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.setGUI(QSAdminGUI)" access="pub" jdoc="">
				<param name="gui"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.getGUI()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.startSocketListener()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.getReceivedMsg()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.emptyReceivedMsg()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.getServerVersionNo()" access="pub" jdoc="Returns the numerical version of the server connected to.">
				<comm cntt="check if beta"/>
				<comm cntt="check for sub version"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.getIpAddress()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.getAppendToConsole()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdminMain.setAppendToConsole(boolean)" access="pub" jdoc="">
				<param name="appendToConsole"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.gui.QSAdmin" intfc="n" abs="n" inn="n" sloc="8" jdoc="">
			<mth name="/main/:org.quickserver.net.qsadmin.gui.QSAdmin.main(String)" access="pub" jdoc="">
				<param name="args"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.gui.PluginPanel" intfc="y" abs="n" inn="n" sloc="8" jdoc="PluginPanel is a template class for plug-ins written for QuickServer Admin GUI - QSAdminGUI. &amp;lt;p&amp;gt; The plug-in class implementing this interface must also extend &amp;lt;code&amp;gt;javax.swing.JPanel&amp;lt; code&amp;gt; class. The plug-in class must be made into a jar and plugin.xml needs to be written that describing the plug-in to QSAdminGUI. A sample xml is below &amp;lt;br&amp;gt;&amp;nbsp;&amp;lt;br&amp;gt;&amp;lt;b&amp;gt;&amp;lt;code&amp;gt; &amp;lt;font color=&amp;quot;#808080&amp;quot;&amp;gt;&amp;nbsp;&amp;lt; font&amp;gt;&amp;lt;font color=&amp;quot;#000000&amp;quot;&amp;gt;&amp;lt;qsadmin-plugin&amp;gt;&amp;lt; font&amp;gt;&amp;lt;br&amp;gt; &amp;lt;font color=&amp;quot;#808080&amp;quot;&amp;gt;&amp;nbsp;&amp;lt; font&amp;gt;&amp;lt;font color=&amp;quot;#ffffff&amp;quot;&amp;gt;&amp;nbsp;&amp;nbsp;&amp;lt; font&amp;gt;&amp;lt;font color=&amp;quot;#000000&amp;quot;&amp;gt;&amp;lt;name&amp;gt;Stats&amp;lt; name&amp;gt;&amp;lt; font&amp;gt;&amp;lt;br&amp;gt; &amp;lt;font color=&amp;quot;#808080&amp;quot;&amp;gt;&amp;nbsp;&amp;lt; font&amp;gt;&amp;lt;font color=&amp;quot;#ffffff&amp;quot;&amp;gt;&amp;nbsp;&amp;nbsp;&amp;lt; font&amp;gt;&amp;lt;font color=&amp;quot;#000000&amp;quot;&amp;gt;&amp;lt;desc&amp;gt;Server&amp;nbsp;Status&amp;nbsp;Panel&amp;lt; desc&amp;gt;&amp;lt; font&amp;gt;&amp;lt;br&amp;gt; &amp;lt;font color=&amp;quot;#808080&amp;quot;&amp;gt;&amp;nbsp;&amp;lt; font&amp;gt;&amp;lt;font color=&amp;quot;#ffffff&amp;quot;&amp;gt;&amp;nbsp;&amp;nbsp;&amp;lt; font&amp;gt;&amp;lt;font color=&amp;quot;#000000&amp;quot;&amp;gt;&amp;lt;type&amp;gt;javax.swing.JPanel&amp;lt; type&amp;gt;&amp;lt; font&amp;gt;&amp;lt;br&amp;gt; &amp;lt;font color=&amp;quot;#808080&amp;quot;&amp;gt;&amp;nbsp;&amp;lt; font&amp;gt;&amp;lt;font color=&amp;quot;#ffffff&amp;quot;&amp;gt;&amp;nbsp;&amp;nbsp;&amp;lt; font&amp;gt;&amp;lt;font color=&amp;quot;#000000&amp;quot;&amp;gt;&amp;lt;main-class&amp;lt; font&amp;gt;&amp;lt;font color=&amp;quot;#000000&amp;quot;&amp;gt;&amp;gt;org.quickserver.net.qsadmin.plugin.stats.StatsPanel&amp;lt; main-class&amp;lt; font&amp;gt;&amp;lt;font color=&amp;quot;#000000&amp;quot;&amp;gt;&amp;gt;&amp;lt; font&amp;gt;&amp;lt;br&amp;gt; &amp;lt;font color=&amp;quot;#808080&amp;quot;&amp;gt;&amp;nbsp;&amp;lt; font&amp;gt;&amp;lt;font color=&amp;quot;#ffffff&amp;quot;&amp;gt;&amp;nbsp;&amp;nbsp;&amp;lt; font&amp;gt;&amp;lt;font color=&amp;quot;#000000&amp;quot;&amp;gt;&amp;lt;active&amp;gt;yes&amp;lt; active&amp;gt;&amp;lt; font&amp;gt;&amp;lt;br&amp;gt; &amp;lt;font color=&amp;quot;#808080&amp;quot;&amp;gt;&amp;nbsp;&amp;lt; font&amp;gt;&amp;lt;font color=&amp;quot;#000000&amp;quot;&amp;gt;&amp;lt; qsadmin-plugin&amp;gt;&amp;lt; font&amp;gt; &amp;lt; code&amp;gt; &amp;lt; b&amp;gt;&amp;lt;br&amp;gt;&amp;nbsp;&amp;lt;br&amp;gt; Now both the jar and the plugin.xml file needs to be places in a directory by the name of the plug-in and placed in the plugin folder of QuickServer installation. &amp;lt; p&amp;gt; @see org.quickserver.util.xmlreader.QSAdminPluginConfig @author Akshathkumar Shetty">
			<mth name="/main/:org.quickserver.net.qsadmin.gui.PluginPanel.setQSAdminMain(QSAdminMain)" access="pub" jdoc="This method is the first method called after plugin is instanced.">
				<param name="qsAdminMain"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.PluginPanel.init()" access="pub" jdoc="This method is called before it is added to QSAdminGUI.">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.PluginPanel.updateConnectionStatus(boolean)" access="pub" jdoc="This method is called when connection status changes in QSAdminGUI.">
				<param name="connected"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.PluginPanel.activated()" access="pub" jdoc="This method is called when the tab where plugin is loaded is activated">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.PluginPanel.deactivated()" access="pub" jdoc="This method is called when the tab where plugin is loaded is deactivated">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.PluginPanel.isActivated()" access="pub" jdoc="This method indicate if the plugin is in active or non-active state">
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.gui.PropertiePanel" intfc="n" abs="n" inn="n" sloc="95" jdoc="PropertiePanel for QuickServer Admin GUI - QSAdminGUI @author Akshathkumar Shetty">
			<comm cntt="---"/>
			<field name="qsadminMain" access="priv" jdoc=""/>
			<field name="targetPanel" access="priv" jdoc=""/>
			<field name="commandPanel" access="priv" jdoc=""/>
			<field name="targetLabel" access="priv" jdoc=""/>
			<field name="serverButton" access="priv" jdoc=""/>
			<field name="selfButton" access="priv" jdoc=""/>
			<field name="reloadButton" access="priv" jdoc=""/>
			<field name="group" access="priv" jdoc=""/>
			<field name="propertieSet" access="priv" jdoc=""/>
			<field name="target" access="priv" jdoc=""/>
			<field name="gbc" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.PropertiePanel.PropertiePanel(QSAdminMain)" access="pub" jdoc="">
				<comm cntt="target panel"/>
				<comm cntt="Map map = sms.getMap();"/>
				<comm cntt="end of while"/>
				<comm cntt="end of while"/>
				<comm cntt="--- layout main panel"/>
				<param name="qsadminMain"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.PropertiePanel.getTarget()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.PropertiePanel.setTarget(String)" access="priv" jdoc="">
				<param name="target"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.PropertiePanel.updateConnectionStatus(boolean)" access="pub" jdoc="">
				<comm cntt="if(qsadminMain.isConnected()==false) { remove all values if(propertie.getType().equals(&amp;quot;edit&amp;quot;)) { propertie.getEditField().setText(&amp;quot;&amp;quot;); propertie.getEditField().setEnabled(false); } else if(propertie.getType().equals(&amp;quot;edit&amp;quot;)) { propertie.getComboBox().setSelectedItem(&amp;quot;&amp;quot;); propertie.getComboBox().setEnabled(false); } }"/>
				<comm cntt="end of while"/>
				<param name="connected"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommandSet" intfc="n" abs="n" inn="n" sloc="48" jdoc="A Simple class that Stores SimpleCommands for QSAdmin GUI @author Akshathkumar Shetty">
			<comm cntt="stores commands from xml file"/>
			<comm cntt="Returns SimpleCommandSet containing simple commands"/>
			<field name="logger" access="priv" jdoc=""/>
			<field name="list" access="priv" jdoc=""/>
			<field name="map" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommandSet.SimpleCommandSet()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommandSet.getList()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommandSet.getMap()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommandSet.addCommand(SimpleCommand)" access="pub" jdoc="">
				<param name="sm"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.SimpleCommandSet.getSimpleCommands()" access="pub" jdoc="">
				<comm cntt="digester.setNamespaceAware(true);"/>
				<comm cntt="String xsd = &amp;quot;&amp;quot; + new File(&amp;quot;quickserver_config.xsd&amp;quot;).toURI();"/>
				<comm cntt="digester.setSchema(xsd);"/>
				<comm cntt="nested QSAdminServer tag"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.gui.MainCommandPanel" intfc="n" abs="n" inn="n" sloc="78" jdoc="Main CommandPanel fro QuickServer Admin GUI - QSAdminGUI @author Akshathkumar Shetty">
			<comm cntt="---"/>
			<field name="qsadminMain" access="priv" jdoc=""/>
			<field name="targetPanel" access="priv" jdoc=""/>
			<field name="commandPanel" access="priv" jdoc=""/>
			<field name="targetLabel" access="priv" jdoc=""/>
			<field name="serverButton" access="priv" jdoc=""/>
			<field name="selfButton" access="priv" jdoc=""/>
			<field name="target" access="priv" jdoc=""/>
			<field name="sms" access="priv" jdoc=""/>
			<field name="gbc" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.MainCommandPanel.MainCommandPanel(QSAdminMain)" access="pub" jdoc="">
				<comm cntt="target panel"/>
				<comm cntt="Map map = sms.getMap();"/>
				<comm cntt="end of while"/>
				<comm cntt="--- layout main panel"/>
				<comm cntt="setBorder(new CompoundBorder( BorderFactory.createEmptyBorder(1,1,1,1), BorderFactory.createTitledBorder(&amp;quot;Simple Commands&amp;quot;) ));"/>
				<comm cntt="setPreferredSize(new java.awt.Dimension(100,200));"/>
				<param name="qsadminMain"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.MainCommandPanel.getTarget()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.MainCommandPanel.setTarget(String)" access="priv" jdoc="">
				<param name="target"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.MainCommandPanel.getSimpleAction(SimpleCommand)" access="priv" jdoc="">
				<param name="cm"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.MainCommandPanel.updateConnectionStatus(boolean)" access="pub" jdoc="">
				<param name="connected"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.gui.Propertie" intfc="n" abs="n" inn="n" sloc="273" jdoc="A Simple class that Stores information about QSAdmin Properties @author Akshathkumar Shetty">
			<comm cntt="when AdminUI was added"/>
			<comm cntt="gui components"/>
			<comm cntt="--- gui methods---"/>
			<field name="name" access="priv" jdoc=""/>
			<field name="target" access="priv" jdoc=""/>
			<field name="command" access="priv" jdoc=""/>
			<field name="get" access="priv" jdoc=""/>
			<field name="set" access="priv" jdoc=""/>
			<field name="type" access="priv" jdoc=""/>
			<field name="select" access="priv" jdoc=""/>
			<field name="desc" access="priv" jdoc=""/>
			<field name="targetNeeded" access="priv" jdoc=""/>
			<field name="version" access="priv" jdoc=""/>
			<field name="namelabel" access="priv" jdoc=""/>
			<field name="editField" access="priv" jdoc=""/>
			<field name="selectList" access="priv" jdoc=""/>
			<field name="saveButton" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.getGetCommand()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.getSetCommand(String)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.setName(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.getTarget()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.setTarget(String)" access="pub" jdoc="">
				<param name="target"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.getCommand()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.setCommand(String)" access="pub" jdoc="">
				<param name="command"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.setGet(String)" access="pub" jdoc="">
				<param name="getValue"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.isGet()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.setSet(String)" access="pub" jdoc="">
				<param name="setValue"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.isSet()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.getType()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.setType(String)" access="pub" jdoc="">
				<param name="type"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.getDesc()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.setDesc(String)" access="pub" jdoc="">
				<param name="desc"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.getSelect()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.setSelect(String)" access="pub" jdoc="">
				<param name="select"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.getTargetNeeded()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.setTargetNeeded(String)" access="pub" jdoc="">
				<param name="targetNeeded"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.getVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.getVersionNo()" access="pub" jdoc="">
				<comm cntt="check if beta"/>
				<comm cntt="check for sub versions"/>
				<comm cntt="ignoring"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.setVersion(String)" access="pub" jdoc="">
				<param name="version"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.toXML()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.load(PropertiePanel, QSAdminMain)" access="pub" jdoc="">
				<comm cntt="temp = temp.trim();"/>
				<param name="pp"/>
				<param name="qsadminMain"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.addToPanel(Container, GridBagConstraints, PropertiePanel, QSAdminMain)" access="pub" jdoc="">
				<comm cntt="space"/>
				<comm cntt="label"/>
				<comm cntt="space"/>
				<comm cntt="value"/>
				<comm cntt="space"/>
				<comm cntt="control"/>
				<comm cntt="extra space"/>
				<param name="cp"/>
				<param name="gbc"/>
				<param name="pp"/>
				<param name="qsadminMain"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.getEditField()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.getComboBox()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.getSaveButton()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.Propertie.getSaveAction(QSAdminMain, Propertie)" access="priv" jdoc="">
				<param name="qsadminMain"/>
				<param name="propertie"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.gui.PropertieSet" intfc="n" abs="n" inn="n" sloc="52" jdoc="A Simple class that Stores PropertieSet @author Akshathkumar Shetty">
			<comm cntt="stores commands from xml file"/>
			<comm cntt="Returns SimpleCommandSet containing simple commands"/>
			<field name="logger" access="priv" jdoc=""/>
			<field name="list" access="priv" jdoc=""/>
			<field name="map" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.PropertieSet.PropertieSet()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.PropertieSet.getList()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.PropertieSet.getMap()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.PropertieSet.addCommand(Propertie)" access="pub" jdoc="">
				<param name="p"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.PropertieSet.getPropertieSet()" access="pub" jdoc="">
				<comm cntt="digester.setNamespaceAware(true);"/>
				<comm cntt="String xsd = &amp;quot;&amp;quot; + new File(&amp;quot;quickserver_config.xsd&amp;quot;).toURI();"/>
				<comm cntt="digester.setSchema(xsd);"/>
				<comm cntt="nested QSAdminServer tag"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.qsadmin.gui.CmdConsole" intfc="n" abs="n" inn="n" sloc="205" jdoc="Command Console @author Akshathkumar Shetty">
			<const name="NEW_LINE" access="priv" jdoc=""/>
			<field name="qsadminMain" access="priv" jdoc=""/>
			<field name="centerPanel" access="priv" jdoc=""/>
			<field name="textPanel" access="priv" jdoc=""/>
			<field name="sendPanel" access="priv" jdoc=""/>
			<field name="buttonPanel" access="priv" jdoc=""/>
			<field name="convLabel" access="priv" jdoc=""/>
			<field name="connectedBorder" access="priv" jdoc=""/>
			<field name="messagesField" access="priv" jdoc=""/>
			<field name="sendLabel" access="priv" jdoc=""/>
			<field name="sendField" access="priv" jdoc=""/>
			<field name="sendButton" access="priv" jdoc=""/>
			<field name="saveButton" access="priv" jdoc=""/>
			<field name="clearButton" access="priv" jdoc=""/>
			<field name="gbc" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.CmdConsole.CmdConsole(QSAdminMain)" access="pub" jdoc="">
				<param name="qsadminMain"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.CmdConsole.append(String)" access="pub" jdoc="">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.CmdConsole.sendMessage(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.CmdConsole.changeBorder(String)" access="priv" jdoc="">
				<param name="ip"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.CmdConsole.error(String)" access="pub" jdoc="">
				<param name="error"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.CmdConsole.error(String, String)" access="pub" jdoc="">
				<param name="error"/>
				<param name="heading"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.CmdConsole.writeFile(String, String)" access="pub" jdoc="">
				<param name="fileName"/>
				<param name="text"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.CmdConsole.setSendEdit(boolean)" access="pub" jdoc="">
				<param name="flag"/>
			</mth>
			<mth name="/main/:org.quickserver.net.qsadmin.gui.CmdConsole.updateConnectionStatus(boolean)" access="pub" jdoc="">
				<param name="connected"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/main/:org.quickserver.net.server">
		<class name="/main/:org.quickserver.net.server.QuickAuthenticationHandler" intfc="n" abs="y" inn="n" sloc="22" jdoc="This class is used to authenticate a client when it connects to QuickServer. Only single instance of this class will be used per QuickServer to handle all authentication. Should have a default constructor. &amp;lt; pre&amp;gt;&amp;lt; BLOCKQUOTE&amp;gt;&amp;lt; code&amp;gt;&amp;lt; p&amp;gt; @author Akshathkumar Shetty @since 1.4.6">
			<mth name="/main/:org.quickserver.net.server.QuickAuthenticationHandler.askAuthentication(ClientHandler)" access="pub" jdoc="">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickAuthenticationHandler.handleAuthentication(ClientHandler, String)" access="pub" jdoc="">
				<param name="handler"/>
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickAuthenticationHandler.handleAuthentication(ClientHandler, Object)" access="pub" jdoc="">
				<param name="handler"/>
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickAuthenticationHandler.handleAuthentication(ClientHandler, byte)" access="pub" jdoc="">
				<param name="handler"/>
				<param name="data"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.GhostSocketReaper" intfc="n" abs="n" inn="n" sloc="250" jdoc="Class (Server Hook) that closes any dead (ghost) sockets that are no longer connected or communicating. &amp;lt;p&amp;gt; It runs as a daemon thread. This thread will simply return if the socket timeout is set to &amp;lt;= 0 in QuickServer. It will close any socket that has not sent in any communication for more than the socket timeout set, i.e., if socket timeout is set to 1000 miliseconds then if a client socket has not communicated for more than 1 seconds then this thread will close the socket and returns the ClientHandler to the pool. &amp;lt; p&amp;gt; @author Akshathkumar Shetty @since 1.3.3">
			<field name="logger" access="priv" jdoc=""/>
			<field name="time" access="priv" jdoc=""/>
			<field name="quickserver" access="priv" jdoc=""/>
			<field name="stopFlag" access="priv" jdoc=""/>
			<field name="timeOut" access="priv" jdoc=""/>
			<field name="timeOutDelay" access="priv" jdoc=""/>
			<field name="clientIdentifier" access="priv" jdoc=""/>
			<field name="notifiedGhostList" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.server.GhostSocketReaper.initHook(QuickServer)" access="pub" jdoc="">
				<param name="quickserver"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.GhostSocketReaper.handleEvent(int)" access="pub" jdoc="">
				<comm cntt="logger.finest(&amp;quot;Startup Event&amp;quot;);"/>
				<comm cntt="logger.finest(&amp;quot;Shutdown Event&amp;quot;);"/>
				<param name="event"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.GhostSocketReaper.info()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.GhostSocketReaper.run()" access="pub" jdoc="">
				<comm cntt="so that it can use SocketTimeoutException"/>
				<comm cntt="end of while"/>
				<comm cntt="wait till all client have disconnected.. then clean the pool"/>
				<comm cntt="lets wait for objects to come back to pool"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.GhostSocketReaper.getCurrentTime()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.GhostSocketReaper.optimisticGhostSocketsFinder(List)" access="priv" jdoc="">
				<comm cntt="if(iterator.hasNext()) { logger.finest(&amp;quot;ENTER&amp;quot;); }"/>
				<comm cntt="update time"/>
				<comm cntt="end of while"/>
				<comm cntt="ignore"/>
				<param name="list"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.GhostSocketReaper.syncGhostSocketsFinder(List)" access="priv" jdoc="">
				<comm cntt="update time"/>
				<comm cntt="end of while"/>
				<param name="list"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.GhostSocketReaper.cleanGhostSockets(List, boolean)" access="priv" jdoc="">
				<comm cntt="end of if checkTimeout"/>
				<comm cntt="end of for"/>
				<param name="list"/>
				<param name="checkTimeout"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.GhostSocketReaper.checkClientHandlerForGhostSocket(ClientHandler, long, List)" access="priv" jdoc="">
				<comm cntt="logger.finest(&amp;quot;ClientHandler&amp;apos;s timeout is &amp;lt;=0, so skipping.&amp;quot;);"/>
				<param name="clientHandler"/>
				<param name="currentTime"/>
				<param name="list"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.ClientHandler" intfc="y" abs="n" inn="n" sloc="69" jdoc="Interface that represents client handle in QuickServer. &amp;lt;p&amp;gt; This class is used by {@link QuickServer} to handle each new client connected. This class is responsible to handle client sockets. It can operate in both blocking mode and non-blocking mode (java nio) based on its implementation.&amp;lt; p&amp;gt; @author Akshathkumar Shetty">
			<mth name="/main/:org.quickserver.net.server.ClientHandler.addEvent(ClientEvent)" access="pub" jdoc="Adds the ClientEvent. @since 1.4.5">
				<param name="event"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.removeEvent(ClientEvent)" access="pub" jdoc="Removes the ClientEvent. @since 1.4.5">
				<param name="event"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.clean()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.closeConnection()" access="pub" jdoc="Closes client socket associated.">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.forceClose()" access="pub" jdoc="Force the closing of the client by closing the associated socket. @since 1.3.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getAppLogger()" access="pub" jdoc="Returns client SelectionKey associated, if any. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getBufferedInputStream()" access="pub" jdoc="Returns the {@link java.io.BufferedInputStream} associated with the Client being handled. Can be null if not available at the time of method call. @see #getBufferedOutputStream @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getBufferedOutputStream()" access="pub" jdoc="Returns the {@link java.io.BufferedOutputStream} associated with the Client being handled. Can be null if not available at the time of method call. @see #getBufferedInputStream @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getBufferedReader()" access="pub" jdoc="Returns the {@link java.io.BufferedReader} associated with the Client being handled. Note that this is only available under blocking mode. @see #getBufferedWriter">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getCharset()" access="pub" jdoc="Returns Charset to be used for String decoding and encoding.. @see #setCharset @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getClientConnectedTime()" access="pub" jdoc="Returns the date time when the client socket was assigned to this ClientHanlder. If no client is currently connected it will return &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @since 1.3.1">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getClientData()" access="pub" jdoc="Returns the ClientData object associated with this ClientHandler, if not set will return &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @see ClientData">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getCommunicationLogging()" access="pub" jdoc="Returns the communication logging flag. @see #setCommunicationLogging @since 1.3.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getDataMode(DataType)" access="pub" jdoc="Returns the {@link DataMode} of the ClientHandler for the DataType. @since 1.2">
				<param name="dataType"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getHostAddress()" access="pub" jdoc="Returns cached socket host ip address. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getInputStream()" access="pub" jdoc="Returns the {@link java.io.InputStream} associated with the Client being handled.">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getLastCommunicationTime()" access="pub" jdoc="Returns the date time when the client socket last sent a data to this ClientHanlder. If no client is currently connected it will return &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @since 1.3.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getMaxConnectionMsg()" access="pub" jdoc="Returns message to be displayed to the client when maximum connection reaches. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getName()" access="pub" jdoc="Returns the ClientHandler name @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getObjectInputStream()" access="pub" jdoc="Returns the {@link java.io.ObjectInputStream} associated with the Client being handled. It will be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; if no {@link ClientObjectHandler} was set in {@link QuickServer}. @see #getObjectOutputStream @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getObjectOutputStream()" access="pub" jdoc="Returns the {@link java.io.ObjectOutputStream} associated with the Client being handled. It will be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; if no {@link ClientObjectHandler} was set in {@link QuickServer}. @see #getObjectInputStream @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getOutputStream()" access="pub" jdoc="Returns the {@link java.io.OutputStream} associated with the Client being handled. @see #setOutputStream">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getSelectionKey()" access="pub" jdoc="Returns client SelectionKey associated, if any. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getServer()" access="pub" jdoc="Returns the QuickServer object that created it.">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getSocket()" access="pub" jdoc="Returns client socket associated.">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getSocketChannel()" access="pub" jdoc="Returns client socket channel associated, if any. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getTimeout()" access="pub" jdoc="Returns the Client socket timeout in milliseconds. @see #setTimeout @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.handleClient(TheClient)" access="pub" jdoc="Associates the ClientHanlder with the client encapsulated by &amp;lt;code&amp;gt;theClient&amp;lt; code&amp;gt;. @param theClient object that encapsulates client socket and its configuration details.">
				<param name="theClient"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.hasEvent(ClientEvent)" access="pub" jdoc="Checks if this client has the event. @since 1.4.5">
				<param name="event"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.info()" access="pub" jdoc="Returns the ClientHandler detailed information. If ClientData is present and is ClientIdentifiable will return ClientInfo else it will return Clients InetAddress and port information.">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.isClientEventNext(ClientEvent)" access="pub" jdoc="Checks if the passed ClientEvent is the one next for processing if a thread is allowed through this object. @since 1.4.6">
				<param name="clientEvent"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.isClosed()" access="pub" jdoc="Checks if the client is closed. @since 1.4.1">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.isConnected()" access="pub" jdoc="Checks if the client is still connected. @exception SocketException if Socket is not open. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.isOpen()" access="pub" jdoc="Checks if the client is still connected and if socket is open. This is same as isConnected() but does not throw SocketException. @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.isSecure()" access="pub" jdoc="Returns flag indicating if the client is connected in secure mode (SSL or TLS). @return secure flag @since 1.4.0">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.makeSecure()" access="pub" jdoc="Makes current Client connection to secure protocol based on the secure configuration set to the server. This method will just call &amp;lt;code&amp;gt;makeSecure(false, false, true, null)&amp;lt; code&amp;gt;. @throws IOException @throws NoSuchAlgorithmException @throws KeyManagementException @since 1.4.0">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.makeSecure(boolean, boolean, boolean, String)" access="pub" jdoc="Makes current Client connection to secure protocol. @param useClientMode falg if the socket should start its first handshake in &amp;quot;client&amp;quot; mode. @param needClientAuth flag if the clients must authenticate themselves. @param autoClose close the underlying socket when this socket is closed @param protocol the standard name of the requested protocol. If &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; will use the protocol set in secure configuration of the server. @throws IOException @throws NoSuchAlgorithmException @throws KeyManagementException @since 1.4.0">
				<param name="useClientMode"/>
				<param name="needClientAuth"/>
				<param name="autoClose"/>
				<param name="protocol"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.makeSecure(String)" access="pub" jdoc="Makes current Client connection to secure protocol. This method will just call &amp;lt;code&amp;gt;makeSecure(false, false, true, protocol)&amp;lt; code&amp;gt;. @throws IOException @throws NoSuchAlgorithmException @throws KeyManagementException @since 1.4.0">
				<param name="protocol"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.readBinary()" access="pub" jdoc="Read the binary input. This will block till some data is received from the stream. Allowed only when &amp;lt;code&amp;gt;DataType.IN&amp;lt; code&amp;gt; is in &amp;lt;code&amp;gt;DataMode.BINARY&amp;lt; code&amp;gt; mode. @return The data as a String @since 1.4">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.readBytes()" access="pub" jdoc="Read the byte input. This will block till some data is received from the stream. Allowed only when &amp;lt;code&amp;gt;DataType.IN&amp;lt; code&amp;gt; is in &amp;lt;code&amp;gt;DataMode.BYTE&amp;lt; code&amp;gt; mode. @return The data as a String @since 1.3.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.registerForRead()" access="pub" jdoc="Register OP_READ with the SelectionKey associated with the channel. If SelectionKey is not set then it registers the channel with the Selector. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.registerForWrite()" access="pub" jdoc="Register OP_WRITE with the SelectionKey associated with the channel. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.run()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.sendClientBinary(byte[])" access="pub" jdoc="Send a binary data to the connected client. If client is not connected it will just return. @since 1.4 @exception IOExceptionif Socket IO Error or Socket was closed by the client.">
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.sendClientBinary(byte[], int, int)" access="pub" jdoc="Send a binary data to the connected client. If client is not connected it will just return. @since 1.4.5 @exception IOExceptionif Socket IO Error or Socket was closed by the client.">
				<param name="data"/>
				<param name="off"/>
				<param name="len"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.sendClientBytes(String)" access="pub" jdoc="Send a String message to the connected client as a string of bytes. If client is not connected it will just return. @since 1.3.1 @exception IOExceptionif Socket IO Error or Socket was closed by the client.">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.sendClientMsg(String)" access="pub" jdoc="Send a String message to the connected client it adds a new line{\r\n} to the end of the string. If client is not connected it will just return. @exception IOException if Socket IO Error or Socket was closed by the client.">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.sendClientObject(Object)" access="pub" jdoc="Send a Object message to the connected client. The message Object passed must be serializable. If client is not connected it will just return. @exception IOException if Socket IO Error or Socket was closed by the client. @exception IllegalStateException if DataType.OUT is not in DataMode.OBJECT @see #setDataMode @since 1.2">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.sendSystemMsg(String)" access="pub" jdoc="Send a String message to the logger associated with {@link QuickServer#getAppLogger} with Level.INFO as its level.">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.sendSystemMsg(String, Level)" access="pub" jdoc="Send a String message to the logger associated with {@link QuickServer#getAppLogger}. @since 1.2">
				<param name="msg"/>
				<param name="level"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.setCharset(String)" access="pub" jdoc="Sets the Charset to be used for String decoding and encoding. @param charset to be used for String decoding and encoding @see #getCharset @since 1.4.5">
				<param name="charset"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.setCommunicationLogging(boolean)" access="pub" jdoc="Sets the communication logging flag. @see #getCommunicationLogging @since 1.3.2">
				<param name="communicationLogging"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.setDataMode(DataMode, DataType)" access="pub" jdoc="Sets the {@link DataMode} for the ClientHandler Note: When mode is DataMode.OBJECT and type is DataType.IN this call will block until the client ObjectOutputStream has written and flushes the header. @since 1.2 @exception IOException if mode could not be changed. @param dataMode mode of data exchange - String or Object. @param dataType type of data for which mode has to be set.">
				<param name="dataMode"/>
				<param name="dataType"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.setMaxConnectionMsg(String)" access="pub" jdoc="Sets message to be displayed when maximum connection reaches. @since 1.4.5">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.setOutputStream(OutputStream)" access="pub" jdoc="Set the {@link java.io.OutputStream} associated with the Client being handled. @since 1.1 @see #getOutputStream @exception IOException if ObjectOutputStream could not be created.">
				<param name="out"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.setSecure(boolean)" access="pub" jdoc="Sets flag indicating if the client is connected in secure mode (SSL or TLS). @param secure @since 1.4.0">
				<param name="secure"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.setSelectionKey(SelectionKey)" access="pub" jdoc="Sets client SelectionKey associated, if any. @since 1.4.5">
				<param name="selectionKey"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.setSocket(Socket)" access="pub" jdoc="Returns client socket associated. @since 1.4.0 @see #updateInputOutputStreams">
				<param name="socket"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.setSocketChannel(SocketChannel)" access="pub" jdoc="Sets client socket channel associated, if any. @since 1.4.5">
				<param name="socketChannel"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.setTimeout(int)" access="pub" jdoc="Sets the client socket&amp;apos;s timeout. @param time client socket timeout in milliseconds. @see #getTimeout @since 1.4.5">
				<param name="time"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.toString()" access="pub" jdoc="Returns the ClientHandler information. If ClientData is present and is ClientIdentifiable will return ClientInfo else it will return Clients InetAddress and port information.">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.updateInputOutputStreams()" access="pub" jdoc="Updates the InputStream and OutputStream for the ClientHandler for the set Socket. @since 1.4.0 @see #setSocket">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.updateLastCommunicationTime()" access="pub" jdoc="Updates the last communication time for this client @since 1.3.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getConnection(String)" access="pub" jdoc="Returns the {@link java.sql.Connection} object for the DatabaseConnection that is identified by id passed. If id passed does not match with any connection loaded by this class it will return &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;. This just calls &amp;lt;code&amp;gt;getServer().getDBPoolUtil().getConnection(id)&amp;lt; code&amp;gt; @since 1.3 @deprecated as of v1.4.5 use &amp;lt;code&amp;gt;getServer().getDBPoolUtil().getConnection(id)&amp;lt; code&amp;gt;">
				<param name="id"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.isConected()" access="pub" jdoc="Checks if the client is still connected. @exception SocketException if Socket is not open. @deprecated since 1.4.5 Use {@link #isConnected}">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.sendSystemMsg(String, boolean)" access="pub" jdoc="Send a String message to the system output stream. @param newline indicates if new line required at the end. @deprecated Use {@link #sendSystemMsg(java.lang.String)}, since it uses Logging.">
				<param name="msg"/>
				<param name="newline"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientHandler.getBufferedWriter()" access="pub" jdoc="Returns the {@link java.io.BufferedWriter} associated with the Client being handled. @deprecated since 1.4.5 use getOutputStream()">
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.ClientAuthenticationHandler" intfc="y" abs="n" inn="n" sloc="10" jdoc="This interface defines a class that can be used by QuickServer to authenticate a client when new connection is made to QuickServer. &amp;lt;p&amp;gt; Recommendations to be followed when implementing ClientAuthenticationHandler &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Should have a default constructor. &amp;lt;li&amp;gt;Should be thread safe. &amp;lt;li&amp;gt;It should not store any data that may is associated with a particular client. &amp;lt;li&amp;gt;If any client data is need to be saved from the client session, it should be saved to a {@link ClientData} class, which can be retrieved using handler.getClientData() method. &amp;lt; ul&amp;gt; &amp;lt; p&amp;gt; &amp;lt;p&amp;gt; Ex: &amp;lt;code&amp;gt;&amp;lt;BLOCKQUOTE&amp;gt;&amp;lt;pre&amp;gt; package echoserver; import java.net. ; import java.io. ; import org.quickserver.net.server.ClientAuthenticationHandler; import org.quickserver.net.server.ClientHandler; public class EchoAuthenticationHandler implements ClientAuthenticationHandler { public AuthStatus askAuthentication(ClientHandler handler) throws IOException, AppException { handler.sendClientMsg(&amp;quot;Password :&amp;quot;); return null; } public AuthStatus handleAuthentication(ClientHandler handler, String data) throws IOException, AppException { if(data.equals(&amp;quot;password&amp;quot;)) return AuthStatus.SUCCESS; else return AuthStatus.FAILURE; } public AuthStatus handleAuthentication(ClientHandler handler, Object data) throws IOException, AppException { if(true) throw new IOException(&amp;quot;Object mode not implemented!&amp;quot;); } public AuthStatus handleAuthentication(ClientHandler handler, byte data[]) throws IOException { if(true) throw new IOException(&amp;quot;Byte mode not implemented!&amp;quot;); } } &amp;lt; pre&amp;gt;&amp;lt; BLOCKQUOTE&amp;gt;&amp;lt; code&amp;gt;&amp;lt; p&amp;gt; @author Akshathkumar Shetty @since 1.4.6">
			<mth name="/main/:org.quickserver.net.server.ClientAuthenticationHandler.askAuthentication(ClientHandler)" access="pub" jdoc="Method called first time after gotConnected() method is caled on ClientEventHandler, if Authenticator is set. Should be used to initate a authorisation process, like asking for username. @exception java.io.IOException if io error in socket @exception AppException if client socket needs to be closed. @return AuthStatus that indicates if authorisation states, if null it is treated as authentication not yet finished.">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientAuthenticationHandler.handleAuthentication(ClientHandler, String)" access="pub" jdoc="Method called when ever a client sends character string data before authentication. @exception java.io.IOException if io error in socket @exception AppException if client socket needs to be closed. @return AuthStatus that indicates if authorisation states, if null it is treated as authentication not yet finished.">
				<param name="handler"/>
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientAuthenticationHandler.handleAuthentication(ClientHandler, Object)" access="pub" jdoc="Method called when ever a client sends Object data before authentication. @exception java.io.IOException if io error in socket @exception AppException if client socket needs to be closed. @return AuthStatus that indicates if authorisation states, if null it is treated as authentication not yet finished.">
				<param name="handler"/>
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientAuthenticationHandler.handleAuthentication(ClientHandler, byte)" access="pub" jdoc="Method called when ever a client sends binary data before authentication. @exception java.io.IOException if io error in socket @exception AppException if client socket needs to be closed. @return AuthStatus that indicates if authorisation states, if null it is treated as authentication not yet finished.">
				<param name="handler"/>
				<param name="data"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.QuickAuthenticator" intfc="n" abs="y" inn="n" sloc="104" jdoc="This class is used to authenticate a client when it connects to QuickServer. Only single instance of this class will be used per QuickServer to handle all authentication. Should have a default constructor. &amp;lt;p&amp;gt; Ex: &amp;lt;code&amp;gt;&amp;lt;BLOCKQUOTE&amp;gt;&amp;lt;pre&amp;gt; package echoserver; import org.quickserver.net.server. ; import java.io. ; public class EchoServerQuickAuthenticator extends QuickAuthenticator { public boolean askAuthorisation(ClientHandler clientHandler) throws IOException { String username = askStringInput(clientHandler, &amp;quot;User Name :&amp;quot;); String password = askStringInput(clientHandler, &amp;quot;Password :&amp;quot;); if(username==null || password ==null) return false; if(username.equals(password)) { sendString(clientHandler, &amp;quot;Auth OK&amp;quot;); return true; } else { sendString(clientHandler, &amp;quot;Auth Failed&amp;quot;); return false; } } } &amp;lt; pre&amp;gt;&amp;lt; BLOCKQUOTE&amp;gt;&amp;lt; code&amp;gt;&amp;lt; p&amp;gt; @author Akshathkumar Shetty @since 1.3">
			<mth name="/main/:org.quickserver.net.server.QuickAuthenticator.askAuthorisation(ClientHandler)" access="pub" jdoc="">
				<param name="clientHandler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickAuthenticator.sendString(ClientHandler, String)" access="pub" jdoc="Prints the given message to the client. @param msg Message to send. If &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; is passed it will not send any thing.">
				<param name="clientHandler"/>
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickAuthenticator.askStringInput(ClientHandler, String)" access="pub" jdoc="Prints the given message to the client and reads a line of input. @return the line of input read from the client. @param msg Message to send before reading input. If received String is &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; it will throw {@link ConnectionLostException}. If &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; is passed it will not send any thing. @exception IOException if an I O error occurs">
				<param name="clientHandler"/>
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickAuthenticator.sendObject(ClientHandler, Object)" access="pub" jdoc="Sends the given object to the client. @param msg Message to send. If &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; is passed it will not send any thing.">
				<param name="clientHandler"/>
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickAuthenticator.askObjectInput(ClientHandler, Object)" access="pub" jdoc="Prints the given message to the client and reads a Object from input. @return the Object from input read from the client. If received Object is &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; it will throw {@link ConnectionLostException}. @param msg Message to send before reading input. If &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; is passed it will not send any thing. @exception IOException if an I O error occurs">
				<param name="clientHandler"/>
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickAuthenticator.sendByte(ClientHandler, String)" access="pub" jdoc="Prints the given message to the client. @param msg Message to send. If &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; is passed it will not send any thing. @since 1.3.2">
				<param name="clientHandler"/>
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickAuthenticator.askByteInput(ClientHandler, String)" access="pub" jdoc="Prints the given message to the client and reads a line of input. @return the line of input read from the client. If received byte is &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; it will throw {@link ConnectionLostException}. @param msg Message to send before reading input. If &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; is passed it will not send any thing. @exception IOException if an I O error occurs @since 1.3.2">
				<param name="clientHandler"/>
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickAuthenticator.sendBinary(ClientHandler, byte)" access="pub" jdoc="Sends the given binary data to the client. @param msg binary data to send. If &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; is passed it will not send any thing. @since 1.4">
				<param name="clientHandler"/>
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickAuthenticator.askBinaryInput(ClientHandler, byte)" access="pub" jdoc="Sends the given binary data to the client and reads binary data input. @return the binary data input read from the client. If received byte is &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; it will throw {@link ConnectionLostException}. @param msg binary data to send before reading input. If &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; is passed it will not send any thing. @exception IOException if an I O error occurs @since 1.4">
				<param name="clientHandler"/>
				<param name="msg"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.AuthStatus" intfc="n" abs="n" inn="n" sloc="17" jdoc="This class defines the state of authentication. @since 1..4.6 @author Akshathkumar Shetty">
			<field name="status" access="priv" jdoc=""/>
			<field name="desc" access="priv" jdoc=""/>
			<const name="FAILURE" access="pub" jdoc=""/>
			<const name="SUCCESS" access="pub" jdoc=""/>
			<mth name="/main/:org.quickserver.net.server.AuthStatus.AuthStatus(int)" access="priv" jdoc="">
				<param name="status"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.AuthStatus.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.QuickServer" intfc="n" abs="n" inn="n" sloc="1880" jdoc="Main class of QuickServer library. This class is used to create multi client servers quickly. &amp;lt;p&amp;gt; Ones a client is connected, it creates {@link ClientHandler} object, which is run using any thread available from the pool of threads maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which handles the client. &amp;lt;br &amp;gt; QuickServer divides the application logic of its developer over eight class, &amp;lt;br&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;ClientEventHandler&amp;lt;br&amp;gt; &amp;nbsp;Handles client events [Optional Class]. &amp;lt;li&amp;gt;ClientCommandHandler [#]&amp;lt;br&amp;gt; &amp;nbsp;Handles client character string commands. &amp;lt;li&amp;gt;ClientObjectHandler [#]&amp;lt;br&amp;gt; &amp;nbsp;Handles client interaction - Object commands. &amp;lt;li&amp;gt;ClientBinaryHandler [#]&amp;lt;br&amp;gt; &amp;nbsp;Handles client interaction - binary data. &amp;lt;li&amp;gt;ClientWriteHandler [Optional Class]&amp;lt;br&amp;gt; &amp;nbsp;Handles client interaction - writing data (Only used in non-blocking mode). &amp;lt;li&amp;gt;ClientAuthenticationHandler [Optional Class]&amp;lt;br&amp;gt; &amp;nbsp;Used to Authencatet a client. &amp;lt;li&amp;gt;ClientData [Optional Class]&amp;lt;br&amp;gt; &amp;nbsp;Client data carrier (support class) &amp;lt;li&amp;gt;ClientExtendedEventHandler [Optional Class]&amp;lt;br&amp;gt; &amp;nbsp;Handles extended client events. &amp;lt; ul&amp;gt; [#] = Any one of these have to be set based on default DataMode for input. The default DataMode for input is String so if not changes you will have to set ClientCommandHandler. &amp;lt; p&amp;gt; &amp;lt;p&amp;gt; Eg: &amp;lt;code&amp;gt;&amp;lt;BLOCKQUOTE&amp;gt;&amp;lt;pre&amp;gt; package echoserver; import org.quickserver.net. ; import org.quickserver.net.server. ; import java.io. ; public class EchoServer { public static void main(String args[]) { String cmdHandle = &amp;quot;echoserver.EchoCommandHandler&amp;quot;; QuickServer myServer = new QuickServer(); myServer.setClientCommandHandler(cmdHandle); myServer.setPort(4123); myServer.setName(Echo Server v1.0&amp;quot;); try { myServer.startServer(); } catch(AppException e) { System.err.println(&amp;quot;Error in server : &amp;quot;+e); e.printStackTrace(); } } } &amp;lt; pre&amp;gt;&amp;lt; BLOCKQUOTE&amp;gt;&amp;lt; code&amp;gt;&amp;lt; p&amp;gt; @version 1.4.7 @author Akshathkumar Shetty">
			<comm cntt="Some variable are not initialised to any value because the"/>
			<comm cntt="default java value was desired initial value."/>
			<comm cntt="&amp;apos;dev &amp;apos; = development build not yet final"/>
			<comm cntt="&amp;apos;beta&amp;apos; = test build all features"/>
			<comm cntt="change also in QSAdminMain"/>
			<comm cntt="v1.4.6"/>
			<comm cntt="v1.4.6"/>
			<comm cntt="v1.4.6"/>
			<comm cntt="v1.2"/>
			<comm cntt="v1.4"/>
			<comm cntt="v1.4.5"/>
			<comm cntt="v1.4.6"/>
			<comm cntt="v1.4.6"/>
			<comm cntt="v1.4.6"/>
			<comm cntt="v1.2"/>
			<comm cntt="v1.4"/>
			<comm cntt="v1.4.5"/>
			<comm cntt="Main thread"/>
			<comm cntt="1 min socket timeout"/>
			<comm cntt="v1.2"/>
			<comm cntt="--v1.1"/>
			<comm cntt="--v1.2"/>
			<comm cntt="Logger for QuickServer"/>
			<comm cntt="Logger for the application using this QuickServer"/>
			<comm cntt="for Service interface"/>
			<comm cntt="backup"/>
			<comm cntt="backup"/>
			<comm cntt="--v1.3"/>
			<comm cntt="--v1.3.1"/>
			<comm cntt="--v1.3.2"/>
			<comm cntt="--v1.3.3"/>
			<comm cntt="--v1.4.0"/>
			<comm cntt="--v1.4.5"/>
			<comm cntt="--v1.4.6"/>
			<comm cntt="-v1.4.7"/>
			<comm cntt="should be commented if not a patch release"/>
			<comm cntt="System.out.println(&amp;quot;[Includes patch(#): t=152&amp;p=532]&amp;quot;);"/>
			<comm cntt="should be commented if not a dev release"/>
			<comm cntt="System.out.println(&amp;quot;[Dev Build Date: Saturday, October 29, 2005]&amp;quot;);"/>
			<comm cntt="end of run"/>
			<comm cntt="Start of Service interface methods"/>
			<comm cntt="End of Service interface methods"/>
			<const name="VER" access="priv" jdoc=""/>
			<const name="NEW_LINE" access="priv" jdoc=""/>
			<field name="serverBanner" access="priv" jdoc=""/>
			<field name="clientAuthenticationHandlerString" access="priv" jdoc=""/>
			<field name="clientEventHandlerString" access="priv" jdoc=""/>
			<field name="clientExtendedEventHandlerString" access="priv" jdoc=""/>
			<field name="clientCommandHandlerString" access="priv" jdoc=""/>
			<field name="clientObjectHandlerString" access="priv" jdoc=""/>
			<field name="clientBinaryHandlerString" access="priv" jdoc=""/>
			<field name="clientWriteHandlerString" access="priv" jdoc=""/>
			<field name="clientDataString" access="priv" jdoc=""/>
			<field name="authenticator" access="priv" jdoc=""/>
			<field name="clientAuthenticationHandler" access="priv" jdoc=""/>
			<field name="clientEventHandler" access="priv" jdoc=""/>
			<field name="clientExtendedEventHandler" access="priv" jdoc=""/>
			<field name="clientCommandHandler" access="priv" jdoc=""/>
			<field name="clientObjectHandler" access="priv" jdoc=""/>
			<field name="clientBinaryHandler" access="priv" jdoc=""/>
			<field name="clientWriteHandler" access="priv" jdoc=""/>
			<field name="clientData" access="priv" jdoc=""/>
			<field name="clientDataClass" access="prot" jdoc=""/>
			<field name="serverPort" access="priv" jdoc=""/>
			<field name="t" access="priv" jdoc=""/>
			<field name="server" access="priv" jdoc=""/>
			<field name="serverName" access="priv" jdoc=""/>
			<field name="maxConnection" access="priv" jdoc=""/>
			<field name="socketTimeout" access="priv" jdoc=""/>
			<field name="maxConnectionMsg" access="priv" jdoc=""/>
			<field name="timeoutMsg" access="priv" jdoc=""/>
			<field name="maxAuthTryMsg" access="priv" jdoc=""/>
			<field name="maxAuthTry" access="priv" jdoc=""/>
			<field name="ipAddr" access="priv" jdoc=""/>
			<field name="stopServer" access="priv" jdoc=""/>
			<field name="storeObjects" access="priv" jdoc=""/>
			<field name="adminServer" access="priv" jdoc=""/>
			<const name="logger" access="priv" jdoc=""/>
			<field name="appLogger" access="priv" jdoc=""/>
			<field name="suspendMaxConnection" access="priv" jdoc=""/>
			<field name="suspendMaxConnectionMsg" access="priv" jdoc=""/>
			<field name="serviceState" access="priv" jdoc=""/>
			<field name="config" access="priv" jdoc=""/>
			<field name="consoleLoggingformatter" access="priv" jdoc=""/>
			<field name="consoleLoggingLevel" access="priv" jdoc=""/>
			<field name="pool" access="priv" jdoc=""/>
			<field name="clientHandlerPool" access="priv" jdoc=""/>
			<field name="clientDataPool" access="priv" jdoc=""/>
			<field name="dBPoolUtil" access="priv" jdoc=""/>
			<field name="loggingLevel" access="priv" jdoc=""/>
			<field name="skipValidation" access="priv" jdoc=""/>
			<field name="communicationLogging" access="priv" jdoc=""/>
			<field name="securityManagerClass" access="priv" jdoc=""/>
			<field name="accessConstraintConfig" access="priv" jdoc=""/>
			<field name="classLoader" access="priv" jdoc=""/>
			<field name="applicationJarPath" access="priv" jdoc=""/>
			<field name="serverHooks" access="priv" jdoc=""/>
			<field name="listOfServerHooks" access="priv" jdoc=""/>
			<field name="secure" access="priv" jdoc=""/>
			<field name="basicConfig" access="priv" jdoc=""/>
			<field name="sslc" access="priv" jdoc=""/>
			<field name="km" access="priv" jdoc=""/>
			<field name="tm" access="priv" jdoc=""/>
			<field name="runningSecure" access="priv" jdoc=""/>
			<field name="secureStoreManager" access="priv" jdoc=""/>
			<field name="exceptionInRun" access="priv" jdoc=""/>
			<field name="serverSocketChannel" access="priv" jdoc=""/>
			<field name="selector" access="priv" jdoc=""/>
			<field name="blockingMode" access="priv" jdoc=""/>
			<field name="byteBufferPool" access="priv" jdoc=""/>
			<field name="lastStartTime" access="priv" jdoc=""/>
			<field name="clientIdentifier" access="priv" jdoc=""/>
			<field name="ghostSocketReaper" access="priv" jdoc=""/>
			<field name="poolManager" access="priv" jdoc=""/>
			<field name="qsObjectPoolMaker" access="priv" jdoc=""/>
			<field name="defaultDataModeIN" access="priv" jdoc=""/>
			<field name="defaultDataModeOUT" access="priv" jdoc=""/>
			<field name="serviceError" access="priv" jdoc=""/>
			<field name="registerChannelRequestMap" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getVersion()" access="pub" jdoc="Returns the version of the library.">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getVersionNo()" access="pub" jdoc="Returns the numerical version of the library. @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getVersionNo(String)" access="pub" jdoc="Returns the numerical version of the library. @since 1.4.5">
				<comm cntt="String ver = getVersion();"/>
				<comm cntt="check if beta"/>
				<comm cntt="check for sub version"/>
				<param name="ver"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getNewLine()" access="pub" jdoc="Returns the new line string used by QuickServer. @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.toString()" access="pub" jdoc="Returns the Server name : port of the QuickServer.">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.QuickServer()" access="pub" jdoc="Creates a new server without any configuration. Make sure you configure the QuickServer, before calling startServer() @see org.quickserver.net.server.ClientEventHandler @see org.quickserver.net.server.ClientCommandHandler @see org.quickserver.net.server.ClientObjectHandler @see org.quickserver.net.server.ClientBinaryHandler @see org.quickserver.net.server.ClientWriteHandler @see org.quickserver.net.server.ClientAuthenticationHandler @see org.quickserver.net.server.ClientHandler @see #configQuickServer @see #initService @see #setPort @see #setClientCommandHandler @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.QuickServer(String)" access="pub" jdoc="Creates a new server with the specified &amp;lt;code&amp;gt;commandHandler&amp;lt; code&amp;gt; has it {@link ClientCommandHandler}. @param commandHandler the fully qualified name of the desired class that implements {@link ClientCommandHandler} @see org.quickserver.net.server.ClientCommandHandler @see org.quickserver.net.server.ClientAuthenticationHandler @see org.quickserver.net.server.ClientHandler @see #setPort">
				<param name="commandHandler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.QuickServer(String, int)" access="pub" jdoc="Creates a new server at &amp;lt;code&amp;gt;port&amp;lt; code&amp;gt; with the specified &amp;lt;code&amp;gt;commandHandler&amp;lt; code&amp;gt; has it {@link ClientCommandHandler}. @param commandHandler fully qualified name of the class that implements {@link ClientCommandHandler} @param port to listen on. @see org.quickserver.net.server.ClientCommandHandler @see org.quickserver.net.server.ClientAuthenticationHandler @see org.quickserver.net.server.ClientHandler">
				<comm cntt="send to another constructor"/>
				<param name="commandHandler"/>
				<param name="port"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.startServer()" access="pub" jdoc="Starts the QuickServer. @exception org.quickserver.net.AppException if Server already running or if it could not load the classes [ClientCommandHandler, ClientAuthenticationHandler, ClientData]. @see #startService">
				<comm cntt="load class from Advanced Settings"/>
				<comm cntt="load class from ObjectPoolConfig"/>
				<comm cntt="load class QSObjectPoolMaker"/>
				<comm cntt="v1.4.0"/>
				<comm cntt="v1.3.3"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.stopServer()" access="pub" jdoc="Stops the QuickServer. @exception org.quickserver.net.AppException if could not stop server @since 1.1 @see #stopService">
				<comm cntt="so this is not qsadmin"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.restartServer()" access="pub" jdoc="Restarts the QuickServer. @exception org.quickserver.net.AppException if could not stop server or if it could not start the server. @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getName()" access="pub" jdoc="Returns the name of the QuickServer. Default is &amp;apos;QuickServer&amp;apos;. @see #setName">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setName(String)" access="pub" jdoc="Sets the name for the QuickServer @param name for the QuickServer @see #getName">
				<param name="name"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getServerBanner()" access="pub" jdoc="Returns the Server Banner of the QuickServer @see #setServerBanner">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setServerBanner(String)" access="pub" jdoc="Sets the serverBanner for the QuickServer that will be displayed on the standard output [console] when server starts. &amp;lt;br&amp;gt;&amp;nbsp;&amp;lt;br&amp;gt; To set welcome message to your client{@link ClientEventHandler#gotConnected} @param banner for the QuickServer @see #getServerBanner">
				<param name="banner"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setPort(int)" access="pub" jdoc="Sets the port for the QuickServer to listen on. If not set, it will run on Port 9876 @param port to listen on. @see #getPort">
				<param name="port"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getPort()" access="pub" jdoc="Returns the port for the QuickServer. @see #setPort">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setClientCommandHandler(String)" access="pub" jdoc="Sets the ClientCommandHandler class that interacts with client sockets. @param handler the fully qualified name of the class that implements {@link ClientCommandHandler} @see #getClientCommandHandler">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getClientCommandHandler()" access="pub" jdoc="Returns the ClientCommandHandler class that interacts with client sockets. @see #setClientCommandHandler @since 1.1">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setClientAuthenticationHandler(String)" access="pub" jdoc="Sets the ClientAuthenticationHandler class that handles the authentication of a client. @param authenticator the fully qualified name of the class that implements {@link ClientAuthenticationHandler}. @see #getClientAuthenticationHandler @since 1.4.6">
				<param name="authenticator"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getClientAuthenticationHandler()" access="pub" jdoc="Returns the ClientAuthenticationHandler class that handles the authentication of a client. @see #setClientAuthenticationHandler @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setAuthenticator(String)" access="pub" jdoc="Sets the Authenticator class that handles the authentication of a client. @param authenticator the fully qualified name of the class that implements {@link Authenticator} or {@link ClientAuthenticationHandler}. @see #getAuthenticator @deprecated since 1.4.6 use setClientAuthenticationHandler @since 1.3">
				<param name="authenticator"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getAuthenticator()" access="pub" jdoc="Returns the Authenticator class that handles the authentication of a client. @see #setAuthenticator @deprecated since 1.4.6 use getClientAuthenticationHandler @since 1.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setClientData(String)" access="pub" jdoc="Sets the ClientData class that carries client data. @param data the fully qualified name of the class that extends {@link ClientData}. @see #getClientData">
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getClientData()" access="pub" jdoc="Returns the ClientData class string that carries client data @return the fully qualified name of the class that implements {@link ClientData}. @see #setClientData">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setTimeout(int)" access="pub" jdoc="Sets the client socket&amp;apos;s timeout. @param time client socket timeout in milliseconds. @see #getTimeout">
				<param name="time"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getTimeout()" access="pub" jdoc="Returns the Client socket timeout in milliseconds. @see #setTimeout">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setMaxAuthTry(int)" access="pub" jdoc="Sets max allowed login attempts. @since 1.2 @see #getMaxAuthTry">
				<param name="authTry"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getMaxAuthTry()" access="pub" jdoc="Returns max allowed login attempts. Default is &amp;lt;code&amp;gt;5&amp;lt; code&amp;gt;. @since 1.2 @see #setMaxAuthTry">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setMaxAuthTryMsg(String)" access="pub" jdoc="Sets message to be displayed when maximum allowed login attempts has reached. Default is : -ERR Max Auth Try Reached @see #getMaxAuthTryMsg">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getMaxAuthTryMsg()" access="pub" jdoc="Returns message to be displayed when maximum allowed login attempts has reached. @see #getMaxAuthTryMsg">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setTimeoutMsg(String)" access="pub" jdoc="Sets timeout message. Default is : -ERR Timeout @see #getTimeoutMsg">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getTimeoutMsg()" access="pub" jdoc="Returns timeout message. @see #setTimeoutMsg">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.initTheClient()" access="priv" jdoc="">
				<comm cntt="v1.2"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="v1.2"/>
				<comm cntt="v1.4"/>
				<comm cntt="v1.4.5"/>
				<comm cntt="v1.3"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="v1.3.2"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.run()" access="pub" jdoc="">
				<comm cntt="print banner"/>
				<comm cntt="v1.2"/>
				<comm cntt="v1.3.3"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setMaxConnection(long)" access="pub" jdoc="Sets the maximum number of client connection allowed. @since 1.1 @see #getMaxConnection">
				<param name="maxConnection"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getMaxConnection()" access="pub" jdoc="Returns the maximum number of client connection allowed. @since 1.1 @see #setMaxConnection">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getClientCount()" access="pub" jdoc="Returns number of clients connected. @since 1.1">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setMaxConnectionMsg(String)" access="pub" jdoc="Sets the message to be sent to any new client connected after maximum client connection has reached. Default is : &amp;lt;code&amp;gt;-ERR Server Busy. Max Connection Reached&amp;lt; code&amp;gt; @since 1.1 @see #getMaxConnectionMsg">
				<param name="maxConnectionMsg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getMaxConnectionMsg()" access="pub" jdoc="Returns the message to be sent to any new client connected after maximum client connection has reached. @since 1.1 @see #setMaxConnectionMsg">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setBindAddr(String)" access="pub" jdoc="Sets the Ip address to bind to. @param bindAddr argument can be used on a multi-homed host for a QuickServer that will only accept connect requests to one of its addresses. If not set, it will default accepting connections on any all local addresses. @exception java.net.UnknownHostException if no IP address for the host could be found @since 1.1 @see #getBindAddr">
				<param name="bindAddr"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getBindAddr()" access="pub" jdoc="Returns the IP address binding to. @since 1.1 @see #setBindAddr">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setStoreObjects(Object[])" access="pub" jdoc="Sets the store of objects to QuickServer, it is an array of objects that main program or the class that created QuickServer passes to the QuickServer. @param storeObjects array of objects @see #getStoreObjects @since 1.1">
				<param name="storeObjects"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getStoreObjects()" access="pub" jdoc="Returns store of objects from QuickServer, if nothing was set will return &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;. @see #setStoreObjects @since 1.1">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setQSAdminServerPort(int)" access="pub" jdoc="Set the port to run QSAdminServer on. @since 1.2">
				<param name="port"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getQSAdminServerPort()" access="pub" jdoc="Returns the port to run QSAdminServer on. @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setQSAdminServerAuthenticator(String)" access="pub" jdoc="Set the ClientAuthenticationHandler class of QSAdminServer that handles the authentication of a client. @since 1.2">
				<param name="authenticator"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getQSAdminServerAuthenticator()" access="pub" jdoc="Returns the Authenticator or ClientAuthenticationHandler class of QSAdminServer that handles the authentication of a client. @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.startQSAdminServer(int, String)" access="pub" jdoc="Starts QSAdminServer for this QuickServer. @see org.quickserver.net.qsadmin.QSAdminServer @param authenticator sets the ClientAuthenticationHandler class that handles the authentication of a client, if null uses {@link org.quickserver.net.qsadmin.Authenticator}. @param port to run QSAdminServer on @exception org.quickserver.net.AppException if Server already running or if it could not load the classes [ClientCommandHandler, ClientAuthenticationHandler, ClientData]. @since 1.1">
				<param name="port"/>
				<param name="authenticator"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.startQSAdminServer()" access="pub" jdoc="Starts QSAdminServer for this QuickServer. @see org.quickserver.net.qsadmin.QSAdminServer @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getQSAdminServer()" access="pub" jdoc="Returns {@link QSAdminServer} associated with this QuickServer @since 1.1">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setQSAdminServer(QSAdminServer)" access="pub" jdoc="Sets {@link QSAdminServer} associated with this QuickServer @since 1.3.3">
				<param name="adminServer"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.isClosed()" access="pub" jdoc="Returns the closed state of the QuickServer Socket. @since 1.1">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getAppLogger()" access="pub" jdoc="Returns the application logger associated with QuickServer. If it was not set will return QuickServer&amp;apos;s own logger. @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setAppLogger(Logger)" access="pub" jdoc="Sets the application logger associated with QuickServer @since 1.2">
				<param name="appLogger"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setClientObjectHandler(String)" access="pub" jdoc="Sets the ClientObjectHandler class that interacts with client sockets to handle java objects. @param handler object the fully qualified name of the class that implements {@link ClientObjectHandler} @see #getClientObjectHandler @since 1.2">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getClientObjectHandler()" access="pub" jdoc="Returns the ClientObjectHandler class that interacts with client sockets. @see #setClientObjectHandler @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setConsoleLoggingFormatter(String)" access="pub" jdoc="Sets the console log handler formatter. @param formatter fully qualified name of the class that implements {@link java.util.logging.Formatter} @since 1.2">
				<param name="formatter"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getConsoleLoggingFormatter()" access="pub" jdoc="Gets the console log handler formatter. @since 1.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setConsoleLoggingToMini()" access="pub" jdoc="Sets the console log handler formater to {@link org.quickserver.util.logging.MiniFormatter} @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setConsoleLoggingToMicro()" access="pub" jdoc="Sets the console log handler formater to {@link org.quickserver.util.logging.MicroFormatter} @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setConsoleLoggingLevel(Level)" access="pub" jdoc="Sets the console log handler level. @since 1.2">
				<param name="level"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getConsoleLoggingLevel()" access="pub" jdoc="Gets the console log handler level. @since 1.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setLoggingLevel(Level)" access="pub" jdoc="Sets the level for all log handlers. @since 1.3.1">
				<param name="level"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getServiceError()" access="pub" jdoc="Returns service error if any. @since 1.4.7">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.initService(Object)" access="pub" jdoc="Initialise and create the service. @param param of the xml configuration file. @since 1.2">
				<param name="param"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.initService(QuickServerConfig)" access="pub" jdoc="Initialise and create the service. @param qsConfig QuickServerConfig object. @since 1.4.6">
				<param name="qsConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.startService()" access="pub" jdoc="Start the service. @return true if serivce was stopped from Running state. @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.stopService()" access="pub" jdoc="Stop the service. @return true if serivce was stopped from Running state. @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.suspendService()" access="pub" jdoc="Suspends the service. @return true if service was suspended from resumed state. @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.resumeService()" access="pub" jdoc="Resume the service. @return true if service was resumed from suspended state. @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.info()" access="pub" jdoc="Information about the service. @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.initServer(Object)" access="pub" jdoc="Initialise and create the server. @param param of the xml configuration file. @exception AppException if QuickServerConfig creation failed from the xml config file. @since 1.4.7">
				<param name="param"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.initServer(QuickServerConfig)" access="pub" jdoc="Initialise and create the service. @param qsConfig QuickServerConfig object. @since 1.4.7">
				<comm cntt="start InitServerHooks"/>
				<param name="qsConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getServiceState()" access="pub" jdoc="Returns the state of the process As any constant of {@link Service} interface. @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setServiceState(int)" access="pub" jdoc="Sets the state of the process As any constant of {@link Service} interface. @since 1.2">
				<param name="state"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.configConsoleLoggingLevel(QuickServer, String)" access="priv" jdoc="">
				<param name="qs"/>
				<param name="temp"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.configQuickServer(QuickServerConfig)" access="pub" jdoc="Configures QuickServer based on the passed QuickServerConfig object. @since 1.2">
				<comm cntt="v1.3"/>
				<comm cntt="v1.3"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="v1.4"/>
				<comm cntt="v1.4.5"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="v1.3.2"/>
				<comm cntt="v1.3.3"/>
				<comm cntt="set path also to QSAdmin"/>
				<param name="config"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.configQuickServer(QSAdminServerConfig)" access="pub" jdoc="Configures QSAdminServer based on the passed QuickServerConfig object. @since 1.2">
				<comm cntt="set the Logging Level to same as main QS"/>
				<comm cntt="config.getConsoleLoggingLevel();"/>
				<comm cntt="set the Logging Formatter to same as main QS"/>
				<comm cntt="qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="v1.3"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="v1.4"/>
				<comm cntt="v1.4.5"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="v1.3.2"/>
				<comm cntt="v1.3.2"/>
				<comm cntt="v1.3.3"/>
				<param name="config"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.configQuickServer()" access="pub" jdoc="Configures QSAdminServer and QuickServer based on the internal QuickServerConfig object. @since 1.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.main(String)" access="pub" jdoc="Usage: QuickServer [-options]&amp;lt;br &amp;gt; Where options include:&amp;lt;br &amp;gt; -about Opens About Dialogbox&amp;lt;br &amp;gt; -load &amp;lt;xml_config_file&amp;gt; [options] Loads the server from xml file. where options include: -fullXML2File &amp;lt;new_file_name&amp;gt;">
				<param name="args"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.load(String)" access="pub" jdoc="Loads the server from the xml file name passed. @since 1.4.7">
				<param name="xml"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.printUsage()" access="priv" jdoc="Prints usage">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.handleOptions(String, QuickServer)" access="priv" jdoc="">
				<param name="args"/>
				<param name="quickserver"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.clearAllPools()" access="pub" jdoc="Cleans all Object and Thread pools @since 1.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.closeAllPools()" access="pub" jdoc="Closes all Object and Thread pools @since 1.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.initAllPools()" access="pub" jdoc="Initialise all Object and Thread pools. @since 1.3">
				<comm cntt="check if client data is poolable"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getClientPool()" access="pub" jdoc="Returns {@link org.quickserver.util.pool.thread.ClientPool} class that managing the pool of threads for handling clients. @exception IllegalStateException if pool is not created yet. @since 1.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.makeClientHandlerPool(PoolConfig)" access="priv" jdoc="Makes the pool of ClientHandler @since 1.3">
				<param name="opConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getClientHandlerPool()" access="pub" jdoc="Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler} class. @exception IllegalStateException if pool is not created yet. @since 1.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setConfig(QuickServerConfig)" access="pub" jdoc="Sets the confiuration of the QuickServer. @since 1.3">
				<param name="config"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getConfig()" access="pub" jdoc="Returns the confiuration of the QuickServer. @since 1.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.makeClientDataPool(PoolableObjectFactory, PoolConfig)" access="priv" jdoc="Makes the pool of ClientData @since 1.3">
				<param name="factory"/>
				<param name="opConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getClientDataPool()" access="pub" jdoc="Returns ObjectPool of {@link org.quickserver.net.server.ClientData} class. If ClientData was not poolable will return null. @since 1.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getDBPoolUtil()" access="pub" jdoc="Returns {@link org.quickserver.sql.DBPoolUtil} object if{@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set. @return DBPoolUtil object if object could be loaded, else will return &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @since 1.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setDBObjectPoolConfig(DBObjectPoolConfig)" access="pub" jdoc="Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} @since 1.3">
				<param name="dBObjectPoolConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.makeDBObjectPool()" access="priv" jdoc="Makes the pool of Database Objects @since 1.3">
				<comm cntt="logger.finest(&amp;quot;Got:\n&amp;quot;+getConfig().getDBObjectPoolConfig().toXML(null));"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.findFirstClientById(String)" access="pub" jdoc="Tries to find the Client by the Id passed. &amp;lt;p&amp;gt; Note: This command is an expensive so do use it limitedly and cache the returned object. But before you start sending message to the cached object do validate that ClientHandler with you is currently connected and is pointing to the same clinet has it was before. This can be done as follows. &amp;lt;pre&amp;gt; foundClientHandler.isConnected(); this method will through SocketException if not connected Date newTime = foundClientHandler.getClientConnectedTime(); if(oldCachedTime!=newTime) { Client had disconnected and ClientHandler was reused for someother client, so write code to again find ur client foundClientHandler = handler.getServer().findFirstClientById(&amp;quot;friendsid&amp;quot;); ... }&amp;lt; pre&amp;gt; &amp;lt; p&amp;gt; @see ClientIdentifiable @return ClientHandler object if client was found else &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @since 1.3.1">
				<param name="id"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.findAllClient()" access="pub" jdoc="Returns an iterator containing all the {@link org.quickserver.net.server.ClientHandler} that are currently handling clients. It is recommended not to change the collection under an iterator. It is imperative that the user manually synchronize on the returned collection when iterating over it: &amp;lt;code&amp;gt;&amp;lt;pre&amp;gt; Eg: ClientData foundClientData = null; Object syncObj = quickserver.getClientIdentifier().getObjectToSynchronize(); synchronized(syncObj) { Iterator iterator = quickserver.findAllClient(); while(iterator.hasNext()) { foundClientHandler = (ClientHandler) iterator.next(); .... } } OR ClientData foundClientData = null; ClientIdentifier clientIdentifier = quickserver.getClientIdentifier(); synchronized(clientIdentifier.getObjectToSynchronize()) { Iterator iterator = clientIdentifier.findAllClient(); while(iterator.hasNext()) { foundClientHandler = (ClientHandler) iterator.next(); .... } } &amp;lt; code&amp;gt;&amp;lt; pre&amp;gt; @since 1.3.1">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.findAllClientById(String)" access="pub" jdoc="Tries to find the Client by the matching pattern passed to the Id. &amp;lt;p&amp;gt; Note: This command is an expensive so do use it limitedly and cache the returned object. But before you start sending message to the cached object do validate that ClientHandler with you is currently connected and is pointing to the same clinet has it was before. This can be done as follows. &amp;lt;pre&amp;gt; foundClientHandler.isConnected(); this method will through SocketException if not connected Date newTime = foundClientHandler.getClientConnectedTime(); if(oldCachedTime!=newTime) { Client had disconnected and ClientHandler was reused for someother client, so write code to again find ur client foundClientHandler = handler.getServer().findFirstClientById(&amp;quot;friendsid&amp;quot;); ... }&amp;lt; pre&amp;gt; &amp;lt; p&amp;gt; @see ClientIdentifiable @return ClientHandler object if client was found else &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @since 1.3.2">
				<param name="pattern"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.findClientByKey(String)" access="pub" jdoc="Tries to find the Client by the Key passed. &amp;lt;p&amp;gt; Note: This command is an expensive so do use it limitedly and cache the returned object. But before you start sending message to the cached object do validate that ClientHandler with you is currently connected and is pointing to the same clinet has it was before. This can be done as follows. &amp;lt;pre&amp;gt; foundClientHandler.isConnected(); this method will through SocketException if not connected Date newTime = foundClientHandler.getClientConnectedTime(); if(oldCachedTime!=newTime) { Client had disconnected and ClientHandler was reused for someother client, so write code to again find ur client foundClientHandler = handler.getServer().findClientByKey(&amp;quot;friendskey&amp;quot;); ... }&amp;lt; pre&amp;gt; &amp;lt; p&amp;gt; @see ClientIdentifiable @return ClientHandler object if client was found else &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @since 1.3.1">
				<param name="key"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.findAllClientByKey(String)" access="pub" jdoc="Tries to find the Client by the matching pattern passed to the key. &amp;lt;p&amp;gt; Note: This command is an expensive so do use it limitedly and cache the returned object. But before you start sending message to the cached object do validate that ClientHandler with you is currently connected and is pointing to the same clinet has it was before. This can be done as follows. &amp;lt;pre&amp;gt; foundClientHandler.isConnected(); this method will through SocketException if not connected Date newTime = foundClientHandler.getClientConnectedTime(); if(oldCachedTime!=newTime) { Client had disconnected and ClientHandler was reused for some other client, so write code to again find ur client foundClientHandler = handler.getServer().findFirstClientByKey(&amp;quot;friendsid&amp;quot;); ... }&amp;lt; pre&amp;gt; &amp;lt; p&amp;gt; @see ClientIdentifiable @return ClientHandler object if client was found else &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @since 1.4">
				<param name="pattern"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.nextClientIsTrusted()" access="pub" jdoc="Sets next client has a trusted client. &amp;lt;p&amp;gt;This will skip any authentication and will not set any timout.&amp;lt; p&amp;gt; @since 1.3.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getSkipValidation()" access="priv" jdoc="@since 1.3.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setSkipValidation(boolean)" access="priv" jdoc="@since 1.3.2">
				<param name="validation"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setCommunicationLogging(boolean)" access="pub" jdoc="Sets the communication logging flag. @see #getCommunicationLogging @since 1.3.2">
				<param name="communicationLogging"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getCommunicationLogging()" access="pub" jdoc="Returns the communication logging flag. @see #setCommunicationLogging @since 1.3.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setSecurityManagerClass(String)" access="pub" jdoc="Sets the SecurityManager class @param securityManagerClass the fully qualified name of the class that extends {@link java.lang.SecurityManager}. @see #getSecurityManagerClass @since 1.3.3">
				<param name="securityManagerClass"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getSecurityManagerClass()" access="pub" jdoc="Returns the SecurityManager class @see #setSecurityManagerClass @since 1.3.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getSecurityManager()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setAccessConstraintConfig(AccessConstraintConfig)" access="pub" jdoc="Sets the Access constraints @since 1.3.3">
				<param name="accessConstraintConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getAccessConstraintConfig()" access="pub" jdoc="Returns Access constraints if present else &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;. @since 1.3.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setClassLoader(ClassLoader)" access="pub" jdoc="Sets the classloader to be used to load the dynamicaly resolved classes @since 1.3.3">
				<param name="classLoader"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getClassLoader()" access="pub" jdoc="Gets the classloader used to load the dynamicaly resolved classes. @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getClass(String, boolean)" access="pub" jdoc="Utility method to load a class @since 1.3.3">
				<comm cntt="if(reload==false &amp;&amp; classLoader==null)"/>
				<param name="name"/>
				<param name="reload"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setApplicationJarPath(String)" access="prot" jdoc="Sets the applications jar s path. This can be either absolute or relative(to config file) path to the jar file or the directory containing the jars needed by the application. @see #getApplicationJarPath @since 1.3.3">
				<param name="applicationJarPath"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getApplicationJarPath()" access="pub" jdoc="Returns the applications jar s path. This can be either absolute or relative(to config file) path to the jar file or the directory containing the jars needed by the application. @see #setApplicationJarPath @since 1.3.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setServerHooks(ServerHooks)" access="pub" jdoc="Sets the ServerHooks @since 1.3.3">
				<param name="serverHooks"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getServerHooks()" access="pub" jdoc="Returns ServerHooks if present else &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;. @since 1.3.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.loadServerHooksClasses()" access="priv" jdoc="@since 1.3.3">
				<comm cntt="add system hooks"/>
				<comm cntt="add user hooks if any"/>
				<comm cntt="end of while"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.processServerHooks(int)" access="priv" jdoc="@since 1.3.3">
				<param name="event"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.clone()" access="pub" jdoc="Creates and returns a copy of this object. @since 1.3.3">
				<comm cntt="should not happ"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setSecure(Secure)" access="pub" jdoc="Sets the Secure setting for QuickServer @since 1.4.0">
				<param name="secure"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getSecure()" access="pub" jdoc="Returns Secure setting for QuickServer @since 1.4.0">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.isRunningSecure()" access="pub" jdoc="&amp;lt;p&amp;gt;Returns if the server is running in Secure mode [SSL or TLS].&amp;lt; p&amp;gt; @since 1.4.0">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setRunningSecure(boolean)" access="pub" jdoc="&amp;lt;p&amp;gt;Sets the server mode if its running in Secure mode [SSL or TLS].&amp;lt; p&amp;gt; @since 1.4.0">
				<param name="runningSecure"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.makeAbsoluteToConfig(String)" access="priv" jdoc="">
				<param name="fileName"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.makeServerSocket()" access="prot" jdoc="Returns a ServerSocket object to be used for listening. @since 1.4.0">
				<comm cntt="ignore"/>
				<comm cntt="ignore"/>
				<comm cntt="for non-blocking"/>
				<comm cntt="for blocking"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setBasicConfig(BasicServerConfig)" access="pub" jdoc="Sets the basic confiuration of the QuickServer. @since 1.4.0">
				<param name="basicConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getBasicConfig()" access="pub" jdoc="Returns the basic confiuration of the QuickServer. @since 1.4.0">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.loadSSLContext()" access="pub" jdoc="Loads the &amp;lt;code&amp;gt;SSLContext&amp;lt; code&amp;gt; from Secure configuring if set. @see #setSecure @since 1.4.0">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getSSLContext()" access="pub" jdoc="Returns the &amp;lt;code&amp;gt;SSLContext&amp;lt; code&amp;gt; from Secure configuring. @see #loadSSLContext @since 1.4.0">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getSSLContext(String)" access="pub" jdoc="Returns the &amp;lt;code&amp;gt;SSLContext&amp;lt; code&amp;gt; object that implements the specified secure socket protocol from Secure configuring. @see #loadSSLContext @param protocol the standard name of the requested protocol. If &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; will use the protocol set in secure configuration of the server. @throws IOException @throws NoSuchAlgorithmException @throws KeyManagementException @since 1.4.0">
				<param name="protocol"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getSSLSocketFactory()" access="pub" jdoc="Returns a SSLSocketFactory object to be used for creating SSLSockets. Secure socket protocol will be picked from the Secure configuring. @see #setSecure @throws IOException @throws NoSuchAlgorithmException @throws KeyManagementException @since 1.4.0">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getSSLSocketFactory(String)" access="pub" jdoc="Returns a SSLSocketFactory object to be used for creating SSLSockets. @see #setSecure @param protocol the standard name of the requested protocol. If &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; will use the protocol set in secure configuration of the server. @throws IOException @throws NoSuchAlgorithmException @throws KeyManagementException @since 1.4.0">
				<param name="protocol"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setClientBinaryHandler(String)" access="pub" jdoc="Sets the ClientBinaryHandler class that interacts with client sockets to handle binary data. @param handler object the fully qualified name of the class that implements {@link ClientBinaryHandler} @see #getClientBinaryHandler @since 1.4">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getClientBinaryHandler()" access="pub" jdoc="Returns the ClientBinaryHandler class that interacts with client sockets. @see #setClientBinaryHandler @since 1.4">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setSelector(Selector)" access="pub" jdoc="Sets the Selector (NIO). @since 1.4.5">
				<param name="selector"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getSelector()" access="pub" jdoc="Returns the Selector (NIO),if any. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.runBlocking(TheClient)" access="priv" jdoc="Starts server in blocking mode. @since 1.4.5">
				<comm cntt="long stime = System.currentTimeMillis();"/>
				<comm cntt="long etime = System.currentTimeMillis();"/>
				<comm cntt="etime = System.currentTimeMillis();"/>
				<comm cntt="System.out.println(&amp;quot;Time Taken: &amp;quot;+(etime-stime));"/>
				<comm cntt="stime = System.currentTimeMillis();"/>
				<comm cntt="Client connected when server was about to be shutdown."/>
				<comm cntt="Check if max connection has reached"/>
				<comm cntt="mostly null"/>
				<comm cntt="logger.warning(&amp;quot;Closing Socket [&amp;quot;+client+&amp;quot;] since no Thread available.&amp;quot;);"/>
				<comm cntt="client.close();"/>
				<comm cntt="returnClientHandlerToPool(_chPolled);"/>
				<comm cntt="reset it back"/>
				<comm cntt="end of loop"/>
				<param name="theClient"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.runNonBlocking(TheClient)" access="priv" jdoc="Starts server in non-blocking mode. @since 1.4.5">
				<comm cntt="selectCount = selector.select(); for testing"/>
				<comm cntt="check for any pending registerChannel req."/>
				<comm cntt="if"/>
				<comm cntt="sync"/>
				<comm cntt="borrow a object from pool"/>
				<comm cntt="Check if max connection has reached"/>
				<comm cntt="logger.warning(&amp;quot;Closing SocketChannel [&amp;quot;+serverChannel.socket()+&amp;quot;] since no Thread available.&amp;quot;);"/>
				<comm cntt="socketChannel.close();"/>
				<comm cntt="returnClientHandlerToPool(_chPolled);"/>
				<comm cntt="reset it back"/>
				<comm cntt="_ch.setSelectionKey(key);"/>
				<comm cntt="no need to remove the key"/>
				<comm cntt="no need to remove the key"/>
				<comm cntt="remove OP_WRITE from interest set"/>
				<comm cntt="_ch.setSelectionKey(key);"/>
				<comm cntt="no need to remove the key"/>
				<comm cntt="we will not accept this key"/>
				<comm cntt="reset it back"/>
				<comm cntt="Remove key"/>
				<comm cntt="end of iterator"/>
				<comm cntt="end of loop"/>
				<param name="theClient"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.checkAccessConstraint(Socket)" access="priv" jdoc="">
				<param name="socket"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.registerChannel(SocketChannel, int, Object)" access="pub" jdoc="Register the given channel for the given operations. This adds the request to a list and will be processed after selector select wakes up. @return boolean flag to indicate if new entry was added to the list to register. @since 1.4.5">
				<comm cntt="logger.warning(&amp;quot;Before register...&amp;quot;); channel.register(getSelector(), ops, att); logger.warning(&amp;quot;Before wakeup and after register...&amp;quot;); getSelector().wakeup(); logger.warning(&amp;quot;After wakeup...&amp;quot;);"/>
				<param name="channel"/>
				<param name="ops"/>
				<param name="att"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.makeByteBufferPool(PoolConfig)" access="priv" jdoc="Makes the pool of ByteBuffer @since 1.4.5">
				<param name="opConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getByteBufferPool()" access="pub" jdoc="Returns ObjectPool of java.nio.ByteBuffer class. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.makeClientPool(PoolConfig)" access="priv" jdoc="Makes the pool of ByteBuffer @since 1.4.5">
				<param name="opConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setClientWriteHandler(String)" access="pub" jdoc="Sets the ClientWriteHandler class that interacts with client sockets to handle data write (only used in non-blocking mode). @param handler object the fully qualified name of the class that implements {@link ClientWriteHandler} @see #getClientWriteHandler @since 1.4.5">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getClientWriteHandler()" access="pub" jdoc="Returns the ClientWriteHandler class that interacts with client sockets (only used in non-blocking mode). @see #setClientWriteHandler @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getLastStartTime()" access="pub" jdoc="Returns the date time when the server was last started. @return last started time. Will be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; if never started. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setDebugNonBlockingMode(boolean)" access="pub" jdoc="Sets the debug flag to ByteBufferOutputStream and ByteBufferInputStream class that are used in non-blcking mode @since 1.4.5">
				<param name="flag"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getClientIdentifier()" access="pub" jdoc="Returns the implementation that is used to do Client Identification. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.makeQSObjectPool(ObjectPool)" access="priv" jdoc="Makes QSObjectPool from ObjectPool @since 1.4.5">
				<param name="objectPool"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getBlockingMode()" access="pub" jdoc="Returns the current blocking mode of the server. @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.loadBusinessLogic()" access="prot" jdoc="Loads all the Business Logic class @since 1.4.6">
				<comm cntt="end of != null"/>
				<comm cntt="end of != null"/>
				<comm cntt="end of != null"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setClientEventHandler(String)" access="pub" jdoc="Sets the ClientEventHandler class that gets notified of client events. @param handler the fully qualified name of the class that implements {@link ClientEventHandler} @see #getClientEventHandler @since 1.4.6">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getClientEventHandler()" access="pub" jdoc="Returns the ClientEventHandler class that gets notified of client events. @see #setClientEventHandler @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setDefaultDataMode(DataMode, DataType)" access="pub" jdoc="Sets the default {@link DataMode} for the ClientHandler @since 1.4.6">
				<param name="dataMode"/>
				<param name="dataType"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setDefaultDataMode(DefaultDataMode)" access="pub" jdoc="Sets the default {@link DataMode} for the ClientHandler @since 1.4.6">
				<param name="defaultDataMode"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getDefaultDataMode(DataType)" access="pub" jdoc="Returns the default {@link DataMode} for the ClientHandler @since 1.4.6">
				<param name="dataType"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.setClientExtendedEventHandler(String)" access="pub" jdoc="Sets the ClientExtendedEventHandler class that gets notified of extended client events. @param handler the fully qualified name of the class that implements {@link ClientExtendedEventHandler} @see #getClientExtendedEventHandler @since 1.4.6">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.getClientExtendedEventHandler()" access="pub" jdoc="Returns the ClientExtendedEventHandler class that gets notified of extended client events. @see #setClientExtendedEventHandler @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.net.server.QuickServer.loadApplicationClasses()" access="priv" jdoc="If Application Jar Path was set, load the jars @since 1.4.6">
				<comm cntt="update qsadmin to use the same"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.TheClient" intfc="n" abs="n" inn="n" sloc="153" jdoc="Encapsulates client socket and its configuration details. Used by{@link QuickServer} and {@link ClientHandler} classes. @author Akshathkumar Shetty">
			<comm cntt="v1.4.6"/>
			<comm cntt="v1.4.6"/>
			<comm cntt="v1.4.6"/>
			<comm cntt="v1.2"/>
			<comm cntt="v1.4"/>
			<comm cntt="--v1.3.2"/>
			<comm cntt="--v1.4.5"/>
			<field name="timeoutMsg" access="priv" jdoc=""/>
			<field name="maxAuthTryMsg" access="priv" jdoc=""/>
			<field name="maxAuthTry" access="priv" jdoc=""/>
			<field name="socket" access="priv" jdoc=""/>
			<field name="authenticator" access="priv" jdoc=""/>
			<field name="clientAuthenticationHandler" access="priv" jdoc=""/>
			<field name="eventHandler" access="priv" jdoc=""/>
			<field name="extendedEventHandler" access="priv" jdoc=""/>
			<field name="commandHandler" access="priv" jdoc=""/>
			<field name="objectHandler" access="priv" jdoc=""/>
			<field name="binaryHandler" access="priv" jdoc=""/>
			<field name="quickServer" access="priv" jdoc=""/>
			<field name="clientData" access="priv" jdoc=""/>
			<field name="trusted" access="priv" jdoc=""/>
			<field name="communicationLogging" access="priv" jdoc=""/>
			<field name="socketTimeout" access="priv" jdoc=""/>
			<field name="maxConnectionMsg" access="priv" jdoc=""/>
			<field name="event" access="priv" jdoc=""/>
			<field name="socketChannel" access="priv" jdoc=""/>
			<field name="writeHandler" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.server.TheClient.setServer(QuickServer)" access="pub" jdoc="Sets the QuickServer object associated with this Client @see #getServer">
				<param name="server"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getServer()" access="pub" jdoc="Gets the QuickServer object associated with this Client @see #getServer">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setSocket(Socket)" access="pub" jdoc="Sets client socket associated.">
				<param name="socket"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getSocket()" access="pub" jdoc="Returns client socket associated.">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setAuthenticator(Authenticator)" access="pub" jdoc="Sets the Authenticator class that handles the authentication of a client. @param authenticator object that implements {@link Authenticator}. @see #getAuthenticator @since 1.3 @deprecated As of 1.4.6 use {@link #setClientAuthenticationHandler}">
				<param name="authenticator"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getAuthenticator()" access="pub" jdoc="Returns the Authenticator object that handles the authentication of a client. @see #setAuthenticator @since 1.3 @deprecated As of 1.4.6 use {@link #getClientAuthenticationHandler}">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setClientAuthenticationHandler(ClientAuthenticationHandler)" access="pub" jdoc="Sets the ClientAuthenticationHandler class that handles the authentication of a client. @param clientAuthenticationHandler object that implements {@link ClientAuthenticationHandler}. @see #getClientAuthenticationHandler @since 1.4.6">
				<param name="clientAuthenticationHandler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getClientAuthenticationHandler()" access="pub" jdoc="Returns the ClientAuthenticationHandler object that handles the authentication of a client. @see #setClientAuthenticationHandler @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setClientData(ClientData)" access="pub" jdoc="Sets the ClientData object that carries client data. @param data object of the class that extends {@link ClientData}. @see #getClientData">
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getClientData()" access="pub" jdoc="Returns the ClientData object that carries client data. @return object of the class that implements {@link ClientData}. @see #setClientData">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setMaxAuthTry(int)" access="pub" jdoc="Sets maximum allowed login attempts. @since 1.2">
				<param name="authTry"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getMaxAuthTry()" access="pub" jdoc="Returns maximum allowed login attempts. @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setMaxAuthTryMsg(String)" access="pub" jdoc="Sets message to be displayed when max login attempt reaches.">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getMaxAuthTryMsg()" access="pub" jdoc="Returns message to be displayed to the client when maximum allowed login attempts reaches.">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setTimeoutMsg(String)" access="pub" jdoc="Sets timeout message.">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getTimeoutMsg()" access="pub" jdoc="Returns timeout message.">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setClientEventHandler(ClientEventHandler)" access="pub" jdoc="Sets the ClientEventHandler objects class that gets notified of client events. @param handler object that implements {@link ClientEventHandler} @see #getClientEventHandler @since 1.4.6">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getClientEventHandler()" access="pub" jdoc="Returns the ClientEventHandler object that gets notified of client events. @see #setClientEventHandler @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setClientExtendedEventHandler(ClientExtendedEventHandler)" access="pub" jdoc="Sets the ClientExtendedEventHandler objects class that gets notified of extended client events. @param handler object that implements {@link ClientExtendedEventHandler} @see #getClientExtendedEventHandler @since 1.4.6">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getClientExtendedEventHandler()" access="pub" jdoc="Returns the ClientExtendedEventHandler object that gets notified of client events. @see #setClientExtendedEventHandler @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setClientCommandHandler(ClientCommandHandler)" access="pub" jdoc="Sets the ClientCommandHandler objects that interacts with client sockets. @param handler object that implements {@link ClientCommandHandler} @see #getClientCommandHandler">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getClientCommandHandler()" access="pub" jdoc="Returns the ClientCommandHandler object that interacts with client sockets. @see #setClientCommandHandler">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setClientObjectHandler(ClientObjectHandler)" access="pub" jdoc="Sets the ClientObjectHandler object that interacts with client sockets. @param handler object that implements {@link ClientObjectHandler} @see #getClientObjectHandler @since 1.2">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getClientObjectHandler()" access="pub" jdoc="Returns the ClientObjectHandler object that interacts with client sockets. @see #setClientObjectHandler @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getTrusted()" access="pub" jdoc="Returns flag to skip timeout setting and authentication of this client. @since 1.3.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setTrusted(boolean)" access="pub" jdoc="Sets flag to skip timeout setting and authentication of this client. @since 1.3.2">
				<param name="flag"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setCommunicationLogging(boolean)" access="pub" jdoc="Sets the communication logging flag. @see #getCommunicationLogging @since 1.3.2">
				<param name="communicationLogging"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getCommunicationLogging()" access="pub" jdoc="Returns the communication logging flag. @see #setCommunicationLogging @since 1.3.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setClientBinaryHandler(ClientBinaryHandler)" access="pub" jdoc="Sets the ClientBinaryHandler object that interacts with client sockets. @param handler object that implements {@link ClientBinaryHandler} @see #getClientBinaryHandler @since 1.4">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getClientBinaryHandler()" access="pub" jdoc="Returns the ClientBinaryHandler object that interacts with client sockets. @see #setClientBinaryHandler @since 1.4">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setTimeout(int)" access="pub" jdoc="Sets the client socket&amp;apos;s timeout. @param time client socket timeout in milliseconds. @see #getTimeout @since 1.4.5">
				<param name="time"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getTimeout()" access="pub" jdoc="Returns the Client socket timeout in milliseconds. @see #setTimeout @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setClientEvent(ClientEvent)" access="pub" jdoc="Sets ClientEvent. @since 1.4.5">
				<param name="event"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getClientEvent()" access="pub" jdoc="Returns ClientEvent. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setMaxConnectionMsg(String)" access="pub" jdoc="Sets message to be displayed when maximum connection reaches. @since 1.4.5">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getMaxConnectionMsg()" access="pub" jdoc="Returns message to be displayed to the client when maximum connection reaches. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setSocketChannel(SocketChannel)" access="pub" jdoc="Sets client socket channel associated, if any. @since 1.4.5">
				<param name="socketChannel"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getSocketChannel()" access="pub" jdoc="Returns client socket channel associated, if any. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.setClientWriteHandler(ClientWriteHandler)" access="pub" jdoc="Sets the ClientWriteHandler object that interacts with client sockets. @param handler object that implements {@link ClientWriteHandler} @see #getClientWriteHandler @since 1.4.5">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.getClientWriteHandler()" access="pub" jdoc="Returns the ClientWriteHandler object that interacts with client sockets. @see #setClientWriteHandler @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.TheClient.toString()" access="pub" jdoc="Returns client info. @since 1.4.5">
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.DataType" intfc="n" abs="n" inn="n" sloc="11" jdoc="This class defines the type(direction) of data exchanging between QuickServer and client socket. @since 1.2">
			<field name="type" access="priv" jdoc=""/>
			<const name="IN" access="pub" jdoc="Incoming data type for {@link ClientHandler}"/>
			<const name="OUT" access="pub" jdoc="Outgoing data type for {@link ClientHandler}"/>
			<mth name="/main/:org.quickserver.net.server.DataType.DataType(String)" access="priv" jdoc="">
				<param name="type"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.DataType.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.Authenticator" intfc="y" abs="n" inn="n" sloc="4" jdoc="This interface defines a class that can be used by QuickServer to authenticate a client when new connection is made to QuickServer. Should have a default constructor. @author Akshathkumar Shetty @deprecated As of 1.4.6 use {@link ClientAuthenticationHandler}">
			<mth name="/main/:org.quickserver.net.server.Authenticator.askAuthorisation(ClientHandler)" access="pub" jdoc="This method is called by {@link QuickServer} if Authenticator was set, to authenticate any client connection. @return result of authentication. @exception org.quickserver.net.AppException if ServerAuthenticator wants QuickServer to close the client connection. &amp;lt;br&amp;gt; Can be used for exiting on Timeouts&amp;lt;br&amp;gt; Can be used when Quit commands is received when Authenticating. @exception java.io.IOException if there is socket error">
				<param name="clientHandler"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.ClientCommandHandler" intfc="y" abs="n" inn="n" sloc="4" jdoc="This interface defines the methods that should be implemented by any class that wants to handle character string data from client. &amp;lt;p&amp;gt; Recommendations to be followed when implementing ClientCommandHandler &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Should have a default constructor. &amp;lt;li&amp;gt;Should be thread safe. &amp;lt;li&amp;gt;It should not store any data that may is associated with a particular client. &amp;lt;li&amp;gt;If any client data is need to be saved from the client session, it should be saved to a {@link ClientData} class, which can be retrieved using handler.getClientData() method. &amp;lt; ul&amp;gt; &amp;lt; p&amp;gt; &amp;lt;p&amp;gt; Ex: &amp;lt;code&amp;gt;&amp;lt;BLOCKQUOTE&amp;gt;&amp;lt;pre&amp;gt; package echoserver; import java.net. ; import java.io. ; import org.quickserver.net.server.ClientCommandHandler; import org.quickserver.net.server.ClientHandler; public class EchoCommandHandler implements ClientCommandHandler { public void handleCommand(ClientHandler handler, String command) throws SocketTimeoutException, IOException { if(command.toLowerCase().equals(&amp;quot;quit&amp;quot;)) { handler.sendClientMsg(&amp;quot;Bye ;-)&amp;quot;); handler.closeConnection(); } else { handler.sendClientMsg(&amp;quot;Echo : &amp;quot; + command); } } } &amp;lt; pre&amp;gt;&amp;lt; BLOCKQUOTE&amp;gt;&amp;lt; code&amp;gt;&amp;lt; p&amp;gt; @author Akshathkumar Shetty">
			<mth name="/main/:org.quickserver.net.server.ClientCommandHandler.handleCommand(ClientHandler, String)" access="pub" jdoc="Method called every time client sends character string data. Should be used to handle the command sent and send any requested data. @exception java.net.SocketTimeoutException if socket times out @exception java.io.IOException if io error in socket">
				<param name="handler"/>
				<param name="command"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.ClientData" intfc="y" abs="n" inn="n" sloc="2" jdoc="This is a marker interface, which a class can implement to act has a client data carrier. This class stores any data associated a client during its session with the QuickServer. This class can be used by {@link ClientCommandHandler} class to store any data about the client it may need in the next call to {@link ClientCommandHandler#handleCommand} from the same client. Note: It is recommended the ClientData implementation also implement {@link org.quickserver.util.pool.PoolableObject} so that QuickServer can create a pool of objects and reuse objects from that pool, instead of creating an new instance for every client.">
		</class>
		<class name="/main/:org.quickserver.net.server.DataMode" intfc="n" abs="n" inn="n" sloc="13" jdoc="This class defines the mode(format) of data exchange between QuickServer and client socket. &amp;lt;p&amp;gt; Contributions By: Martin Benns : BYTE Mode &amp;lt; p&amp;gt; @since 1.2 @author Akshathkumar Shetty">
			<field name="mode" access="priv" jdoc=""/>
			<const name="STRING" access="pub" jdoc="String (default) data mode for {@link ClientHandler} - Receive data as String terminated by &amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt When {@link ClientHandler} receives any String it calls{@link ClientCommandHandler#handleCommand} method"/>
			<const name="OBJECT" access="pub" jdoc="Object data mode for {@link ClientHandler} - Receive java objects. When {@link ClientHandler} receives any Object it calls{@link ClientObjectHandler#handleObject} method."/>
			<const name="BYTE" access="pub" jdoc="Byte data mode for {@link ClientHandler}- Receive byte character data stream When {@link ClientHandler} receives any bytes it calls{@link ClientCommandHandler#handleCommand} method passing the character bytes received has a String object. This can be used to receive String data that are not terminated by &amp;lt;CR&amp;gt; and or &amp;lt;LF&amp;gt or have &amp;lt;CR&amp;gt; and or &amp;lt;LF&amp;gt in them."/>
			<const name="BINARY" access="pub" jdoc="Binary data mode for {@link ClientHandler} - Receive binary data [byte] When {@link ClientHandler} receives any binary it calls{@link ClientBinaryHandler#handleBinary} method. @since 1.4"/>
			<mth name="/main/:org.quickserver.net.server.DataMode.DataMode(String)" access="priv" jdoc="">
				<param name="mode"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.DataMode.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.ClientEvent" intfc="n" abs="n" inn="n" sloc="17" jdoc="Encapsulates client event. @since 1.4.5 @author Akshathkumar Shetty">
			<const name="RUN_BLOCKING" access="pub" jdoc=""/>
			<const name="ACCEPT" access="pub" jdoc=""/>
			<const name="READ" access="pub" jdoc=""/>
			<const name="WRITE" access="pub" jdoc=""/>
			<const name="MAX_CON" access="pub" jdoc=""/>
			<const name="MAX_CON_BLOCKING" access="pub" jdoc=""/>
			<const name="LOST_CON" access="pub" jdoc=""/>
			<const name="CLOSE_CON" access="pub" jdoc=""/>
			<field name="event" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.server.ClientEvent.ClientEvent(String)" access="priv" jdoc="">
				<param name="eventName"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientEvent.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.ClientIdentifier" intfc="y" abs="n" inn="n" sloc="10" jdoc="Client Identifier interface. @author Akshathkumar Shetty @since 1.4.5">
			<mth name="/main/:org.quickserver.net.server.ClientIdentifier.setQuickServer(QuickServer)" access="pub" jdoc="">
				<param name="quickserver"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientIdentifier.setClientHandlerPool(QSObjectPool)" access="pub" jdoc="">
				<param name="clientHandlerPool"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientIdentifier.getObjectToSynchronize()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientIdentifier.findAllClient()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientIdentifier.findFirstClientById(String)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientIdentifier.findAllClientById(String)" access="pub" jdoc="">
				<param name="pattern"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientIdentifier.findClientByKey(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientIdentifier.findAllClientByKey(String)" access="pub" jdoc="">
				<param name="pattern"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.ClientObjectHandler" intfc="y" abs="n" inn="n" sloc="4" jdoc="This interface defines the methods that should be implemented by any class that wants to handle java Objects from a client. &amp;lt;p&amp;gt; Recommendations to be followed when implementing ClientObjectHandler &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Should have a default constructor. &amp;lt;li&amp;gt;Should be thread safe. &amp;lt;li&amp;gt;It should not store any client data that may be needed in the implementation. &amp;lt;li&amp;gt;If any client data is need to be saved from the client session, it should be saved to a {@link ClientData} class, which can be retrieved using handler.getClientData() method. &amp;lt; ul&amp;gt; &amp;lt; p&amp;gt; &amp;lt;p&amp;gt; Ex: &amp;lt;code&amp;gt;&amp;lt;BLOCKQUOTE&amp;gt;&amp;lt;pre&amp;gt; package dateserver; import java.net. ; import java.io. ; import java.util.Date; import org.quickserver.net.server. ; public class ObjectHandler implements ClientObjectHandler { public void handleObject(ClientHandler handler, Object command) throws SocketTimeoutException, IOException { handler.sendSystemMsg(&amp;quot;Got Object : &amp;quot; + command.toString()); handler.setDataMode(DataMode.STRING); } } &amp;lt; pre&amp;gt;&amp;lt; BLOCKQUOTE&amp;gt;&amp;lt; code&amp;gt;&amp;lt; p&amp;gt; @author Akshathkumar Shetty">
			<mth name="/main/:org.quickserver.net.server.ClientObjectHandler.handleObject(ClientHandler, Object)" access="pub" jdoc="Method called every time client sends an Object. Should be used to handle the Object sent. @exception java.net.SocketTimeoutException if socket times out @exception java.io.IOException if io error in socket @since v1.2">
				<param name="handler"/>
				<param name="command"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.ClientBinaryHandler" intfc="y" abs="n" inn="n" sloc="4" jdoc="This interface defines the methods that should be implemented by any class that wants to handle java Objects from a client. &amp;lt;p&amp;gt; Recommendations to be followed when implementing ClientBinaryHandler &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Should have a default constructor. &amp;lt;li&amp;gt;Should be thread safe. &amp;lt;li&amp;gt;It should not store any data that may is associated with a particular client. &amp;lt;li&amp;gt;If any client data is need to be saved from the client session, it should be saved to a {@link ClientData} class, which can be retrieved using handler.getClientData() method. &amp;lt; ul&amp;gt; &amp;lt; p&amp;gt; &amp;lt;p&amp;gt; Ex: &amp;lt;code&amp;gt;&amp;lt;BLOCKQUOTE&amp;gt;&amp;lt;pre&amp;gt; package dateserver; import java.net. ; import java.io. ; import java.util.Date; import org.quickserver.net.server. ; public class BinaryHandler implements ClientBinaryHandler { public void handleBinary(ClientHandler handler, byte command[])) throws SocketTimeoutException, IOException { handler.sendSystemMsg(&amp;quot;Got Binary : &amp;quot; + new String(command)); } } &amp;lt; pre&amp;gt;&amp;lt; BLOCKQUOTE&amp;gt;&amp;lt; code&amp;gt;&amp;lt; p&amp;gt; @author Akshathkumar Shetty @since 1.4">
			<mth name="/main/:org.quickserver.net.server.ClientBinaryHandler.handleBinary(ClientHandler, byte)" access="pub" jdoc="Method called every time client sends an binary data. Should be used to handle the binary data sent. @exception java.net.SocketTimeoutException if socket times out @exception java.io.IOException if io error in socket">
				<param name="handler"/>
				<param name="command"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.ClientWriteHandler" intfc="y" abs="n" inn="n" sloc="4" jdoc="This interface defines the methods that should be implemented by any class that needs to be notified when its ready to accept more data. &amp;lt;p&amp;gt; Recommendations to be followed when implementing ClientWriteHandler &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Should have a default constructor. &amp;lt;li&amp;gt;Should be thread safe. &amp;lt;li&amp;gt;It should not store any data that may is associated with a particular client. &amp;lt;li&amp;gt;If any client data is need to be saved from the client session, it should be saved to a {@link ClientData} class, which can be retrieved using handler.getClientData() method. &amp;lt; ul&amp;gt; &amp;lt; p&amp;gt; @since 1.4.5 @author Akshathkumar Shetty">
			<mth name="/main/:org.quickserver.net.server.ClientWriteHandler.handleWrite(ClientHandler)" access="pub" jdoc="Method called every time client is ready to receive for more data. Should be used to handle the write any requested data. @exception java.io.IOException if io error in socket Channel.">
				<param name="handler"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.ClientIdentifiable" intfc="y" abs="n" inn="n" sloc="5" jdoc="This is an interface that can be implemented by {@link ClientData}so that the client connected can be identified. One can search an client by using{@link QuickServer#findFirstClientById}, {@link QuickServer#findAllClientById}, {@link QuickServer#findClientByKey}, {@link QuickServer#findAllClientByKey}, {@link QuickServer#findAllClient} @since 1.3.1">
			<mth name="/main/:org.quickserver.net.server.ClientIdentifiable.getClientId()" access="pub" jdoc="Returns string (hash code) unique for that user connected.">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientIdentifiable.getClientKey()" access="pub" jdoc="Returns string (hash code) unique for that client connected. used to differentiate client that share same user ids.">
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientIdentifiable.getClientInfo()" access="pub" jdoc="Returns some inforamtion for that client connected.">
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.ClientExtendedEventHandler" intfc="y" abs="n" inn="n" sloc="5" jdoc="This interface defines the methods that should be implemented by any class that wants to handle extended client events. &amp;lt;p&amp;gt; Recommendations to be followed when implementing ClientExtendedEventHandler &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Should have a default constructor. &amp;lt;li&amp;gt;Should be thread safe. &amp;lt;li&amp;gt;It should not store any data that may is associated with a particular client. &amp;lt;li&amp;gt;If any client data is need to be saved from the client session, it should be saved to a {@link ClientData} class, which can be retrieved using handler.getClientData() method. &amp;lt; ul&amp;gt; &amp;lt; p&amp;gt; &amp;lt;p&amp;gt; Ex: &amp;lt;code&amp;gt;&amp;lt;BLOCKQUOTE&amp;gt;&amp;lt;pre&amp;gt; package echoserver; import java.net. ; import java.io. ; import org.quickserver.net.server.ClientExtendedEventHandler; import org.quickserver.net.server.ClientHandler; public class EchoExtendedEventHandler implements ClientExtendedEventHandler { public void handleTimeout(ClientHandler handler) throws SocketException, IOException { handler.sendClientMsg(&amp;quot;-ERR Timeout&amp;quot;); if(true) throw new SocketException(); } public void handleMaxAuthTry(ClientHandler handler) throws IOException { handler.sendClientMsg(&amp;quot;-ERR Max Auth Try Reached&amp;quot;); } public boolean handleMaxConnection(ClientHandler handler) throws IOException { for now lets reject all excess clients if(true) { handler.sendClientMsg(&amp;quot;Server Busy - Max Connection Reached&amp;quot;); return false; } } } &amp;lt; pre&amp;gt;&amp;lt; BLOCKQUOTE&amp;gt;&amp;lt; code&amp;gt;&amp;lt; p&amp;gt; @since 1.4.6 @author Akshathkumar Shetty">
			<mth name="/main/:org.quickserver.net.server.ClientExtendedEventHandler.handleTimeout(ClientHandler)" access="pub" jdoc="Method called when client timeouts. @exception java.net.SocketException if client socket needs to be closed. @exception java.io.IOException if io error in socket">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientExtendedEventHandler.handleMaxAuthTry(ClientHandler)" access="pub" jdoc="Method called when client has reached maximum auth tries. After this method call QuickServer will close the clients socket. Should be used to give error information to the client. @exception java.io.IOException if io error in socket">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientExtendedEventHandler.handleMaxConnection(ClientHandler)" access="pub" jdoc="Method called when maximum number of clients has been reached and a new client connects. If this method return &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; the client is accepted else client connection is closed. @exception java.io.IOException if io error in socket">
				<param name="handler"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.PoolManager" intfc="y" abs="n" inn="n" sloc="7" jdoc="PoolManager interface. @author Akshathkumar Shetty @since 1.4.5">
			<mth name="/main/:org.quickserver.net.server.PoolManager.makeByteBufferPool(PoolableObjectFactory, PoolConfig)" access="pub" jdoc="">
				<param name="factory"/>
				<param name="opConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.PoolManager.makeClientPool(PoolableObjectFactory, PoolConfig)" access="pub" jdoc="">
				<param name="factory"/>
				<param name="opConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.PoolManager.makeClientHandlerPool(PoolableObjectFactory, PoolConfig)" access="pub" jdoc="">
				<param name="factory"/>
				<param name="opConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.PoolManager.makeClientDataPool(PoolableObjectFactory, PoolConfig)" access="pub" jdoc="">
				<param name="factory"/>
				<param name="opConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.PoolManager.initPool(ObjectPool, PoolConfig)" access="pub" jdoc="">
				<param name="objectPool"/>
				<param name="opConfig"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.ClientEventHandler" intfc="y" abs="n" inn="n" sloc="8" jdoc="This interface defines the methods that should be implemented by any class that wants to handle client events. &amp;lt;p&amp;gt; Recommendations to be followed when implementing ClientEventHandler &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Should have a default constructor. &amp;lt;li&amp;gt;Should be thread safe. &amp;lt;li&amp;gt;It should not store any data that may is associated with a particular client. &amp;lt;li&amp;gt;If any client data is need to be saved from the client session, it should be saved to a {@link ClientData} class, which can be retrieved using handler.getClientData() method. &amp;lt; ul&amp;gt; &amp;lt; p&amp;gt; &amp;lt;p&amp;gt;If not ClientEventHandler is set for QuickServer then a default implementation {@link org.quickserver.net.server.impl.DefaultClientEventHandler} is used. &amp;lt; p&amp;gt; &amp;lt;p&amp;gt; Ex: &amp;lt;code&amp;gt;&amp;lt;BLOCKQUOTE&amp;gt;&amp;lt;pre&amp;gt; package echoserver; import java.net. ; import java.io. ; import org.quickserver.net.server.ClientEventHandler; import org.quickserver.net.server.ClientHandler; public class EchoEventHandler implements ClientEventHandler { public void gotConnected(ClientHandler handler) throws SocketTimeoutException, IOException { handler.sendSystemMsg(&amp;quot;Connection opened : &amp;quot;+ handler.getSocket().getInetAddress()); handler.sendClientMsg(&amp;quot;Welcome to EchoServer v1.0 &amp;quot;); handler.sendClientMsg(&amp;quot;Note: Password = Username&amp;quot;); handler.sendClientMsg(&amp;quot;Send &amp;apos;Quit&amp;apos; to exit&amp;quot;); } public void lostConnection(ClientHandler handler) throws IOException { handler.sendSystemMsg(&amp;quot;Connection lost : &amp;quot; + handler.getSocket().getInetAddress()); } public void closingConnection(ClientHandler handler) throws IOException { handler.sendSystemMsg(&amp;quot;Connection closing : &amp;quot; + handler.getSocket().getInetAddress()); } } &amp;lt; pre&amp;gt;&amp;lt; BLOCKQUOTE&amp;gt;&amp;lt; code&amp;gt;&amp;lt; p&amp;gt; @since 1.4.5 @author Akshathkumar Shetty">
			<mth name="/main/:org.quickserver.net.server.ClientEventHandler.gotConnected(ClientHandler)" access="pub" jdoc="Method called when there is a new client connects to the QuickServer. Can be used to send welcome message to the client and logging. @exception java.net.SocketTimeoutException if socket times out @exception java.io.IOException if io error in socket">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientEventHandler.lostConnection(ClientHandler)" access="pub" jdoc="Method called when client connection is lost. Don&amp;apos;t write to the connection in this method. Its just information, to be used at the Server end. It can be caused due to network errors. @exception java.io.IOException if io error in socket">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.ClientEventHandler.closingConnection(ClientHandler)" access="pub" jdoc="Method called when client connection is closed. Don&amp;apos;t write to the connection in this method. Its just information, you can use to log time and ip of client closing connection. @exception java.io.IOException if io error in socket">
				<param name="handler"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/main/:org.quickserver.net.server.gui">
		<class name="/main/:org.quickserver.net.server.gui.About" intfc="n" abs="n" inn="n" sloc="137" jdoc="About Panel for QuickServer - GUI Component @author Akshathkumar Shetty">
			<comm cntt="JFrame"/>
			<comm cntt="private JLabel authorText = new JLabel(html+&amp;quot;Author&amp;quot;,ball,JLabel.LEFT);"/>
			<comm cntt="private JLabel author = new JLabel(html+&amp;quot;: Akshathkumar Shetty&amp;quot;, JLabel.LEFT);"/>
			<field name="classLoader" access="priv" jdoc=""/>
			<field name="logo" access="pub" jdoc=""/>
			<field name="logoAbout" access="pub" jdoc=""/>
			<field name="ball" access="pub" jdoc=""/>
			<field name="centerPanel" access="priv" jdoc=""/>
			<field name="topPanel" access="priv" jdoc=""/>
			<field name="productName" access="priv" jdoc=""/>
			<field name="readme" access="priv" jdoc=""/>
			<field name="jsp" access="priv" jdoc=""/>
			<field name="html" access="pub" jdoc=""/>
			<field name="versionText" access="priv" jdoc=""/>
			<field name="version" access="priv" jdoc=""/>
			<field name="licenseText" access="priv" jdoc=""/>
			<field name="license" access="priv" jdoc=""/>
			<field name="copyrightText" access="priv" jdoc=""/>
			<field name="websiteText" access="priv" jdoc=""/>
			<field name="website" access="priv" jdoc=""/>
			<field name="readmeText" access="priv" jdoc=""/>
			<field name="gbc" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.server.gui.About.About()" access="pub" jdoc="">
				<comm cntt="Container cp = getContentPane();"/>
				<comm cntt="gbc.gridwidth = 1; gbc.gridx = 2; gbc.weightx = 1.0; gbc.fill = GridBagConstraints.HORIZONTAL; topPanel.add(Box.createHorizontalGlue(), gbc);"/>
				<comm cntt="= 1;"/>
				<comm cntt="= 2;"/>
				<comm cntt="1.0"/>
				<comm cntt="gbc.gridy++; = 3; gbc.gridx = 0; gbc.weightx = 0.0; topPanel.add(authorText, gbc); gbc.gridx = 1; topPanel.add(author, gbc); gbc.gridx = 2; gbc.weightx = 1.0; gbc.fill = GridBagConstraints.HORIZONTAL; topPanel.add(Box.createHorizontalGlue(), gbc);"/>
				<comm cntt="= 4;"/>
				<comm cntt="= 5;"/>
				<comm cntt="= 6;"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.gui.About.showAbout()" access="pub" jdoc="Displays the about box with in a JFrame.">
			</mth>
			<mth name="/main/:org.quickserver.net.server.gui.About.main(String)" access="pub" jdoc="">
				<param name="args"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/main/:org.quickserver.net.server.impl">
		<class name="/main/:org.quickserver.net.server.impl.OptimisticClientIdentifier" intfc="n" abs="n" inn="n" sloc="109" jdoc="Optimistic Client Identifier implementation. @author Akshathkumar Shetty @since 1.4.5">
			<const name="logger" access="priv" jdoc=""/>
			<field name="backupClientIdentifier" access="priv" jdoc=""/>
			<const name="MAX_TRY_COUNT" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.server.impl.OptimisticClientIdentifier.findFirstClientById(String)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.OptimisticClientIdentifier.findFirstClientById(String, int)" access="priv" jdoc="">
				<comm cntt="endof while"/>
				<comm cntt="start over again."/>
				<param name="id"/>
				<param name="callCount"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.OptimisticClientIdentifier.findAllClientById(String)" access="pub" jdoc="">
				<param name="pattern"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.OptimisticClientIdentifier.findAllClientById(String, int)" access="priv" jdoc="">
				<comm cntt="endof while"/>
				<comm cntt="start over again."/>
				<param name="pattern"/>
				<param name="callCount"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.OptimisticClientIdentifier.findClientByKey(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.OptimisticClientIdentifier.findClientByKey(String, int)" access="priv" jdoc="">
				<comm cntt="endof while"/>
				<comm cntt="start over again."/>
				<param name="key"/>
				<param name="callCount"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.OptimisticClientIdentifier.findAllClientByKey(String)" access="pub" jdoc="">
				<param name="pattern"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.OptimisticClientIdentifier.findAllClientByKey(String, int)" access="priv" jdoc="">
				<comm cntt="endof while"/>
				<comm cntt="start over again."/>
				<param name="pattern"/>
				<param name="callCount"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.OptimisticClientIdentifier.getBackupClientIdentifier()" access="priv" jdoc="">
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler" intfc="n" abs="n" inn="n" sloc="764" jdoc="">
			<comm cntt="v1.4.5"/>
			<comm cntt="one for each event ACCEPT, WRITE, READ"/>
			<comm cntt="v1.4.7"/>
			<const name="logger" access="priv" jdoc=""/>
			<field name="clientWriteHandler" access="prot" jdoc=""/>
			<field name="socketChannel" access="priv" jdoc=""/>
			<field name="readByteBuffer" access="prot" jdoc=""/>
			<field name="writeByteBuffer" access="prot" jdoc=""/>
			<field name="selectionKey" access="prot" jdoc=""/>
			<field name="threadAccessCount" access="prot" jdoc=""/>
			<field name="willReturn" access="prot" jdoc=""/>
			<field name="waitingForFinalWrite" access="prot" jdoc=""/>
			<field name="maxThreadAccessCount" access="priv" jdoc=""/>
			<field name="wakeupSelectorAfterRegisterWrite" access="priv" jdoc=""/>
			<field name="wakeupSelectorAfterRegisterRead" access="priv" jdoc=""/>
			<field name="byteBufferOutputStream" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(boolean)" access="pub" jdoc="Sets the flag to wakeup Selector After RegisterForWrite is called. @since 1.4.7">
				<param name="flag"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite()" access="pub" jdoc="Returns wakeupSelectorAfterRegisterWrite the flag that controls if wakeup is called on Selector after RegisterForWrite is called. @since 1.4.7">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(boolean)" access="pub" jdoc="Sets the flag to wakeup Selector After RegisterForRead is called. @since 1.4.7">
				<param name="flag"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead()" access="pub" jdoc="Returns wakeupSelectorAfterRegisterRead the flag that controls if wakeup is called on Selector after RegisterForRead is called. @since 1.4.7">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.setMaxThreadAccessCount(int)" access="pub" jdoc="Sets the maximum count of thread allowed to run objects of this class at a time. @since 1.4.7">
				<param name="count"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.getMaxThreadAccessCount()" access="pub" jdoc="Returns the maximum count of thread allowed to run objects of this class at a time. @since 1.4.7">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.NonBlockingClientHandler(int)" access="pub" jdoc="">
				<param name="instanceCount"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.NonBlockingClientHandler()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.clean()" access="pub" jdoc="">
				<comm cntt="1.4.5"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.finalize()" access="prot" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.handleClient(TheClient)" access="pub" jdoc="">
				<comm cntt="v1.4.5"/>
				<comm cntt="1.4.5"/>
				<param name="theClient"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.setInputStream(InputStream)" access="prot" jdoc="">
				<param name="in"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.getBufferedReader()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.closeConnection()" access="pub" jdoc="">
				<comm cntt="end of waitingForFinalWrite"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.waitTillFullyWritten()" access="pub" jdoc="waitTillFullyWritten @since 1.4.7">
				<comm cntt="2 min max"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.run()" access="pub" jdoc="">
				<comm cntt="end authorised"/>
				<comm cntt="return thread to pool"/>
				<comm cntt="e.printStackTrace();"/>
				<comm cntt="errors from Application"/>
				<comm cntt="end synchronized"/>
				<comm cntt="return to pool"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.checkReturnClientHandler()" access="prot" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.processRead()" access="priv" jdoc="Process read @return value indicates if the thread should return form run()">
				<comm cntt="logger.finest(&amp;quot;SocketChannel read was &amp;quot;+count+&amp;quot;!&amp;quot;);"/>
				<comm cntt="Make readable"/>
				<comm cntt="end while"/>
				<comm cntt="if any are waiting"/>
				<comm cntt="check if any data was read but not yet processed"/>
				<comm cntt="getSelectionKey().selector().wakeup();"/>
				<comm cntt="return to pool"/>
				<comm cntt="end of else"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.processWrite()" access="priv" jdoc="Process write @return value indicates if the thread should return form run()">
				<comm cntt="flag==true &amp;&amp;"/>
				<comm cntt="return to pool"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.returnThread()" access="prot" jdoc="">
				<comm cntt="return is done at ClientThread end"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.returnClientHandler()" access="prot" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.setDataMode(DataMode, DataType)" access="pub" jdoc="">
				<param name="dataMode"/>
				<param name="dataType"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.setDataModeNonBlocking(DataMode, DataType)" access="priv" jdoc="">
				<comm cntt="input stream will work"/>
				<comm cntt="we will disable this for now"/>
				<comm cntt="else if(dataType == DataType.IN) { dataModeIN = dataMode; b_in = null; bufferedReader = null; registerForRead(); o_in = new ObjectInputStream(in); will block Assertion.affirm(o_in!=null, &amp;quot;ObjectInputStream is still null!&amp;quot;); }"/>
				<comm cntt="input stream will work"/>
				<param name="dataMode"/>
				<param name="dataType"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.readInputStream()" access="prot" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.updateInputOutputStreams()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.setSocketChannel(SocketChannel)" access="pub" jdoc="">
				<param name="socketChannel"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.getSocketChannel()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.setSelectionKey(SelectionKey)" access="pub" jdoc="">
				<param name="selectionKey"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.getSelectionKey()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.processGotDataInBuffers()" access="priv" jdoc="">
				<comm cntt="--For debug"/>
				<comm cntt="((ByteBufferInputStream) getInputStream()).dumpContent();"/>
				<comm cntt="updateLastCommunicationTime();"/>
				<comm cntt="end of while"/>
				<comm cntt="} else if(dataModeIN == DataMode.OBJECT) {"/>
				<comm cntt="while(dataModeIN == DataMode.OBJECT &amp;&amp; o_in!=null) { recObject = o_in.readObject(); if(recObject==null) { lost = true; return; } if(getCommunicationLogging() &amp;&amp; authorised == true) { appLogger.fine(&amp;quot;Got OBJECT [&amp;quot;+getHostAddress()+&amp;quot;] : &amp;quot;+ recObject.toString()); } if(authorised == false) authStatus = clientAuthenticationHandler.handleAuthentication(this, recObject); else clientObjectHandler.handleObject(this, recObject); if(isClosed()==true) return; while(authStatus==AuthStatus.FAILURE) authStatus = processAuthorisation(); if(authStatus==AuthStatus.SUCCESS) authorised = true; }"/>
				<comm cntt="} else if(dataModeIN == DataMode.BYTE) {"/>
				<comm cntt="} else if(dataModeIN == DataMode.BINARY) {"/>
				<comm cntt="} else {"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.registerForRead()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.registerForWrite()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.registerWrite()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.setClientWriteHandler(ClientWriteHandler)" access="prot" jdoc="">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.NonBlockingClientHandler.getThreadAccessCount()" access="pub" jdoc="Returns number of thread currently in this object. @since 1.4.6">
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.impl.RegisterChannelRequest" intfc="n" abs="n" inn="n" sloc="44" jdoc="RegisterChannel request object. @author Akshathkumar Shetty @since 1.4.7">
			<const name="logger" access="priv" jdoc=""/>
			<field name="channel" access="priv" jdoc=""/>
			<field name="ops" access="priv" jdoc=""/>
			<field name="att" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.server.impl.RegisterChannelRequest.RegisterChannelRequest(SelectableChannel, int, Object)" access="pub" jdoc="">
				<param name="channel"/>
				<param name="ops"/>
				<param name="att"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.RegisterChannelRequest.register(Selector)" access="pub" jdoc="">
				<param name="selector"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.RegisterChannelRequest.getChannel()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.RegisterChannelRequest.setChannel(SelectableChannel)" access="pub" jdoc="">
				<param name="channel"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.RegisterChannelRequest.getOps()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.RegisterChannelRequest.setOps(int)" access="pub" jdoc="">
				<param name="ops"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.RegisterChannelRequest.getAtt()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.RegisterChannelRequest.setAtt(Object)" access="pub" jdoc="">
				<param name="att"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.RegisterChannelRequest.equals(Object)" access="pub" jdoc="">
				<param name="obj"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.impl.BasicClientIdentifier" intfc="n" abs="y" inn="n" sloc="83" jdoc="Client Identifier interface. @author Akshathkumar Shetty @since 1.4.5">
			<const name="logger" access="priv" jdoc=""/>
			<field name="clientHandlerPool" access="prot" jdoc=""/>
			<field name="quickserver" access="prot" jdoc=""/>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientIdentifier.setQuickServer(QuickServer)" access="pub" jdoc="">
				<param name="quickserver"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientIdentifier.setClientHandlerPool(QSObjectPool)" access="pub" jdoc="">
				<param name="clientHandlerPool"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientIdentifier.getObjectToSynchronize()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientIdentifier.findAllClient()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientIdentifier.getClientIdentifiable(ClientHandler)" access="prot" jdoc="">
				<param name="foundClientHandler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientIdentifier.checkClientId(ClientHandler, String)" access="prot" jdoc="">
				<comm cntt="logger.finest(&amp;quot;Found id: &amp;quot;+foundId+&amp;quot;, id: &amp;quot;+id);"/>
				<comm cntt="throw new NullPointerException(&amp;quot;Id returned by ClientData was null!&amp;quot;);"/>
				<param name="foundClientHandler"/>
				<param name="id"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientIdentifier.checkClientId(ClientHandler, Pattern)" access="prot" jdoc="">
				<comm cntt="logger.finest(&amp;quot;Found id: &amp;quot;+foundId+&amp;quot;, pattern: &amp;quot;+pattern);"/>
				<comm cntt="throw new NullPointerException(&amp;quot;Id returned by ClientData was null!&amp;quot;);"/>
				<param name="foundClientHandler"/>
				<param name="pattern"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientIdentifier.checkClientKey(ClientHandler, String)" access="prot" jdoc="">
				<comm cntt="logger.finest(&amp;quot;Found key: &amp;quot;+foundKey+&amp;quot;, key: &amp;quot;+key);"/>
				<comm cntt="throw new NullPointerException(&amp;quot;Key returned by ClientData was null!&amp;quot;);"/>
				<param name="foundClientHandler"/>
				<param name="key"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientIdentifier.checkClientKey(ClientHandler, Pattern)" access="prot" jdoc="">
				<comm cntt="logger.finest(&amp;quot;Found key: &amp;quot;+foundKey+&amp;quot;, pattern: &amp;quot;+pattern);"/>
				<comm cntt="throw new NullPointerException(&amp;quot;Key returned by ClientData was null!&amp;quot;);"/>
				<param name="foundClientHandler"/>
				<param name="pattern"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.impl.DefaultClientEventHandler" intfc="n" abs="n" inn="n" sloc="73" jdoc="Default ClientEventHandler implementation. &amp;lt;p&amp;gt;This implementation will try to provide a default ClientEventHandler implementation. If a ClientCommandHandler is known to have been set then this implementation will look for ClientEventHandler methods in that implementation and pass the corresponding call to that method. This was done to provide backward compatibility with v1.4.5 and prior version of ClientCommandHandler.&amp;lt; p&amp;gt; @author Akshathkumar Shetty @since 1.4.6">
			<field name="logger" access="priv" jdoc=""/>
			<field name="clientCommandHandler" access="priv" jdoc=""/>
			<field name="gotConnectedMethod" access="priv" jdoc=""/>
			<field name="lostConnectionMethod" access="priv" jdoc=""/>
			<field name="closingConnectionMethod" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.server.impl.DefaultClientEventHandler.setClientCommandHandler(ClientCommandHandler)" access="pub" jdoc="Sets ClientCommandHandler that should be examined to find any ClientEventHandler methods">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.DefaultClientEventHandler.gotConnected(ClientHandler)" access="pub" jdoc="">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.DefaultClientEventHandler.lostConnection(ClientHandler)" access="pub" jdoc="">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.DefaultClientEventHandler.closingConnection(ClientHandler)" access="pub" jdoc="">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.DefaultClientEventHandler.loadMethods()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.DefaultClientEventHandler.invoke(Method, ClientHandler)" access="priv" jdoc="">
				<param name="method"/>
				<param name="handler"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.impl.BlockingClientHandler" intfc="n" abs="n" inn="n" sloc="440" jdoc="">
			<const name="logger" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.BlockingClientHandler(int)" access="pub" jdoc="">
				<param name="instanceCount"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.BlockingClientHandler()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.clean()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.finalize()" access="prot" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.handleClient(TheClient)" access="pub" jdoc="">
				<param name="theClient"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.setInputStream(InputStream)" access="prot" jdoc="">
				<param name="in"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.getBufferedReader()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.closeConnection()" access="pub" jdoc="">
				<comm cntt="if(socket!=null) socket.shutdownInput();"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.run()" access="pub" jdoc="">
				<comm cntt="end of authorised"/>
				<comm cntt="e.printStackTrace();"/>
				<comm cntt="errors from Application"/>
				<comm cntt="end synchronized"/>
				<comm cntt="return to pool"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.checkReturnClientHandler()" access="prot" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.processRead()" access="priv" jdoc="">
				<comm cntt="v1.2"/>
				<comm cntt="1.4"/>
				<comm cntt="end of while"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.returnClientHandler()" access="prot" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.setDataMode(DataMode, DataType)" access="pub" jdoc="">
				<param name="dataMode"/>
				<param name="dataType"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.setDataModeBlocking(DataMode, DataType)" access="priv" jdoc="">
				<comm cntt="will block"/>
				<param name="dataMode"/>
				<param name="dataType"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.readInputStream()" access="prot" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.updateInputOutputStreams()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.setSocketChannel(SocketChannel)" access="pub" jdoc="">
				<param name="socketChannel"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.getSocketChannel()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.setSelectionKey(SelectionKey)" access="pub" jdoc="">
				<param name="selectionKey"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.getSelectionKey()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.registerForRead()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.registerForWrite()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BlockingClientHandler.setClientWriteHandler(ClientWriteHandler)" access="prot" jdoc="">
				<param name="handler"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.impl.SyncClientIdentifier" intfc="n" abs="n" inn="n" sloc="58" jdoc="Synchronized Client Identifier implementation. @author Akshathkumar Shetty @since 1.4.5">
			<const name="logger" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.server.impl.SyncClientIdentifier.findFirstClientById(String)" access="pub" jdoc="">
				<comm cntt="endof while"/>
				<param name="id"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.SyncClientIdentifier.findAllClientById(String)" access="pub" jdoc="">
				<comm cntt="endof while"/>
				<param name="pattern"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.SyncClientIdentifier.findClientByKey(String)" access="pub" jdoc="">
				<comm cntt="endof while"/>
				<param name="key"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.SyncClientIdentifier.findAllClientByKey(String)" access="pub" jdoc="">
				<comm cntt="endof while"/>
				<param name="pattern"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.net.server.impl.BasicClientHandler" intfc="n" abs="y" inn="n" sloc="718" jdoc="Basic implementation of ClientHandler that handles clients for QuickServer. &amp;lt;p&amp;gt; This class is used by {@link QuickServer} to handle each new client connected. This class is responsible to handle client sockets. It can operate in both blocking mode and non-blocking mode (java nio).&amp;lt; p&amp;gt; &amp;lt;p&amp;gt; Contributions By: Martin Benns : BYTE Mode &amp;lt; p&amp;gt; @author Akshathkumar Shetty @author Martin Benns : Added BYTE mode">
			<comm cntt="Some variable are not initialised to any value because the"/>
			<comm cntt="default java value was desired initial value."/>
			<comm cntt="false"/>
			<comm cntt="false"/>
			<comm cntt="v1.3"/>
			<comm cntt="v1.4.6"/>
			<comm cntt="v1.4.6"/>
			<comm cntt="v1.4.6"/>
			<comm cntt="v1.2"/>
			<comm cntt="1.4"/>
			<comm cntt="if DataMode.OBJECT"/>
			<comm cntt="v1.2"/>
			<comm cntt="v1.2"/>
			<comm cntt="added for BYTE mode and BINARY mode"/>
			<comm cntt="logger for the application using this QuickServer"/>
			<comm cntt="--v1.4.5"/>
			<const name="logger" access="priv" jdoc=""/>
			<const name="NEW_LINE" access="prot" jdoc=""/>
			<const name="NEW_LINE_BYTES" access="prot" jdoc=""/>
			<field name="socket" access="prot" jdoc="Client socket"/>
			<field name="authorised" access="prot" jdoc="Client authorisation status"/>
			<field name="counAuthTry" access="prot" jdoc="Count of client login attempts"/>
			<field name="maxAuthTry" access="prot" jdoc="max allowed login attempts"/>
			<field name="timeoutMsg" access="prot" jdoc="timeout message"/>
			<field name="maxAuthTryMsg" access="prot" jdoc="Message to be displayed when max login attempt reaches."/>
			<field name="socketTimeout" access="prot" jdoc=""/>
			<field name="connection" access="prot" jdoc=""/>
			<field name="lost" access="prot" jdoc=""/>
			<field name="quickServer" access="prot" jdoc=""/>
			<field name="authenticator" access="prot" jdoc=""/>
			<field name="clientAuthenticationHandler" access="prot" jdoc=""/>
			<field name="clientEventHandler" access="prot" jdoc=""/>
			<field name="clientExtendedEventHandler" access="prot" jdoc=""/>
			<field name="clientCommandHandler" access="prot" jdoc=""/>
			<field name="clientObjectHandler" access="prot" jdoc=""/>
			<field name="clientBinaryHandler" access="prot" jdoc=""/>
			<field name="clientData" access="prot" jdoc=""/>
			<field name="in" access="prot" jdoc=""/>
			<field name="out" access="prot" jdoc=""/>
			<field name="bufferedReader" access="prot" jdoc=""/>
			<field name="o_out" access="prot" jdoc=""/>
			<field name="o_in" access="prot" jdoc=""/>
			<field name="b_in" access="prot" jdoc=""/>
			<field name="b_out" access="prot" jdoc=""/>
			<field name="appLogger" access="prot" jdoc=""/>
			<field name="dataModeIN" access="prot" jdoc=""/>
			<field name="dataModeOUT" access="prot" jdoc=""/>
			<field name="communicationLogging" access="prot" jdoc=""/>
			<field name="clientConnectedTime" access="prot" jdoc=""/>
			<field name="lastCommunicationTime" access="prot" jdoc=""/>
			<field name="secure" access="prot" jdoc=""/>
			<const name="threadEvent" access="prot" jdoc=""/>
			<field name="maxConnectionMsg" access="prot" jdoc=""/>
			<field name="clientEvents" access="prot" jdoc=""/>
			<field name="unprocessedClientEvents" access="prot" jdoc=""/>
			<field name="closeOrLostNotified" access="prot" jdoc=""/>
			<field name="lockObj" access="prot" jdoc=""/>
			<field name="willClean" access="prot" jdoc=""/>
			<field name="charset" access="prot" jdoc=""/>
			<field name="idMap" access="priv" jdoc=""/>
			<field name="instanceCount" access="priv" jdoc=""/>
			<field name="id" access="priv" jdoc=""/>
			<field name="name" access="priv" jdoc=""/>
			<field name="hostAddress" access="priv" jdoc=""/>
			<field name="port" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getNewId(int)" access="priv" jdoc="">
				<param name="instanceCount"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.BasicClientHandler(int)" access="pub" jdoc="">
				<param name="instanceCount"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getInstanceCount()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.BasicClientHandler()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.clean()" access="pub" jdoc="">
				<comm cntt="1.4.6"/>
				<comm cntt="1.4"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.finalize()" access="prot" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.handleClient(TheClient)" access="pub" jdoc="Associates the ClientHanlder with the client encapsulated by &amp;lt;code&amp;gt;theClient&amp;lt; code&amp;gt;. @param theClient object that encapsulates client socket and its configuration details.">
				<comm cntt="v1.4"/>
				<comm cntt="v1.2"/>
				<comm cntt="v1.2"/>
				<comm cntt="v1.3.2"/>
				<comm cntt="1.4.5"/>
				<comm cntt="1.4.5"/>
				<param name="theClient"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getServer()" access="pub" jdoc="Returns the QuickServer object that created it. @see #setServer">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setServer(QuickServer)" access="prot" jdoc="Sets the QuickServer object associated with this ClientHandler. @see #getServer">
				<param name="server"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setClientData(ClientData)" access="prot" jdoc="Sets the ClientData object associated with this ClientHandler @see ClientData @see #getClientData">
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getClientData()" access="pub" jdoc="Returns the ClientData object associated with this ClientHandler, if not set will return &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @see ClientData @see #setClientData">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setClientAuthenticationHandler(ClientAuthenticationHandler)" access="prot" jdoc="Sets the ClientAuthenticationHandler class that handles the authentication of a client. @param clientAuthenticationHandler fully qualified name of the class that implements {@link ClientAuthenticationHandler}. @since 1.4.6">
				<param name="clientAuthenticationHandler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setAuthenticator(Authenticator)" access="prot" jdoc="Sets the Authenticator class that handles the authentication of a client. @param authenticator fully qualified name of the class that implements {@link Authenticator}. @since 1.3">
				<param name="authenticator"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getInputStream()" access="pub" jdoc="Returns the {@link java.io.InputStream} associated with the Client being handled. @see #setInputStream">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setInputStream(InputStream)" access="prot" jdoc="Sets the {@link java.io.InputStream} associated with the Client being handled. @since 1.1 @see #getInputStream">
				<param name="in"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getOutputStream()" access="pub" jdoc="Returns the {@link java.io.OutputStream} associated with the Client being handled. @see #setOutputStream">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setOutputStream(OutputStream)" access="pub" jdoc="Set the {@link java.io.OutputStream} associated with the Client being handled. @since 1.1 @see #getOutputStream @exception IOException if ObjectOutputStream could not be created.">
				<param name="out"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getBufferedReader()" access="pub" jdoc="Returns the {@link java.io.BufferedReader} associated with the Client being handled. Note that this is only available under blocking mode. @see #getBufferedWriter">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getBufferedWriter()" access="pub" jdoc="Returns the {@link java.io.BufferedWriter} associated with the Client being handled. @deprecated since 1.4.5 use getOutputStream()">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getObjectOutputStream()" access="pub" jdoc="Returns the {@link java.io.ObjectOutputStream} associated with the Client being handled. It will be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; if no {@link ClientObjectHandler} was set in {@link QuickServer}. @see #getObjectInputStream @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getObjectInputStream()" access="pub" jdoc="Returns the {@link java.io.ObjectInputStream} associated with the Client being handled. It will be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; if no {@link ClientObjectHandler} was set in {@link QuickServer}. @see #getObjectOutputStream @since 1.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setClientEventHandler(ClientEventHandler)" access="prot" jdoc="Sets the ClientEventHandler class that gets notified of client events. @since 1.4.6">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setClientExtendedEventHandler(ClientExtendedEventHandler)" access="prot" jdoc="Sets the ClientExtendedEventHandler class that gets notified of extended client events. @since 1.4.6">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setClientCommandHandler(ClientCommandHandler)" access="prot" jdoc="Sets the ClientCommandHandler class that interacts with client sockets.">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setClientObjectHandler(ClientObjectHandler)" access="prot" jdoc="Sets the ClientObjectHandler class that interacts with client sockets. @param handler fully qualified name of the class that implements {@link ClientObjectHandler} @since 1.2">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.closeConnection()" access="pub" jdoc="Closes client socket associated.">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getSocket()" access="pub" jdoc="Returns client socket associated.">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setSocket(Socket)" access="pub" jdoc="Returns client socket associated. @since 1.4.0 @see #updateInputOutputStreams">
				<param name="socket"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.isConected()" access="pub" jdoc="Checks if the client is still connected. @exception SocketException if Socket is not open. @deprecated since 1.4.5 Use {@link #isConnected}">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.isConnected()" access="pub" jdoc="Checks if the client is still connected. @exception SocketException if Socket is not open. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.isOpen()" access="pub" jdoc="Checks if the client is still connected and if socket is open. This is same as isConnected() but does not throw SocketException. @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.isClosed()" access="pub" jdoc="Checks if the client is closed. @since 1.4.1">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.sendClientMsg(String)" access="pub" jdoc="Send a String message to the connected client it adds a new line{\r\n} to the end of the string. If client is not connected it will just return. @exception IOException if Socket IO Error or Socket was closed by the client.">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.sendClientBytes(String)" access="pub" jdoc="Send a String message to the connected client as a string of bytes. If client is not connected it will just return. @since 1.3.1 @exception IOExceptionif Socket IO Error or Socket was closed by the client.">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.sendClientObject(Object)" access="pub" jdoc="Send a Object message to the connected client. The message Object passed must be serializable. If client is not connected it will just return. @exception IOException if Socket IO Error or Socket was closed by the client. @exception IllegalStateException if DataType.OUT is not in DataMode.OBJECT @see #setDataMode @since 1.2">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.sendSystemMsg(String)" access="pub" jdoc="Send a String message to the logger associated with {@link QuickServer#getAppLogger} with Level.INFO as its level.">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.sendSystemMsg(String, Level)" access="pub" jdoc="Send a String message to the logger associated with {@link QuickServer#getAppLogger}. @since 1.2">
				<param name="msg"/>
				<param name="level"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.sendSystemMsg(String, boolean)" access="pub" jdoc="Send a String message to the system output stream. @param newline indicates if new line required at the end. @deprecated Use {@link #sendSystemMsg(java.lang.String)}, since it uses Logging.">
				<param name="msg"/>
				<param name="newline"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.run()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.prepareForRun()" access="prot" jdoc="">
				<comm cntt="v1.3.2"/>
				<comm cntt="v1.3.3"/>
				<comm cntt="1.4.5"/>
				<comm cntt="1.4.5"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.processMaxConnection(ClientEvent)" access="prot" jdoc="">
				<param name="currentEvent"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.processAuthorisation()" access="prot" jdoc="">
				<comm cntt="end of auth while"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.processMaxAuthTry()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.notifyCloseOrLost()" access="prot" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.returnClientData()" access="prot" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.returnClientHandler()" access="prot" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getName()" access="pub" jdoc="Returns the ClientHandler name @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.info()" access="pub" jdoc="Returns the ClientHandler detailed information. If ClientData is present and is ClientIdentifiable will return ClientInfo else it will return Clients InetAddress and port information.">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.toString()" access="pub" jdoc="Returns the ClientHandler information. If ClientData is present and is ClientIdentifiable will return ClientInfo else it will return Clients InetAddress and port information.">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getClientIdentifiable(ClientHandler)" access="prot" jdoc="">
				<param name="foundClientHandler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setDataMode(DataMode, DataType)" access="pub" jdoc="Sets the {@link DataMode} for the ClientHandler Note: When mode is DataMode.OBJECT and type is DataType.IN this call will block until the client ObjectOutputStream has written and flushes the header. @since 1.2 @exception IOException if mode could not be changed. @param dataMode mode of data exchange - String or Object. @param dataType type of data for which mode has to be set.">
				<param name="dataMode"/>
				<param name="dataType"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.checkDataModeSet(DataMode, DataType)" access="prot" jdoc="">
				<param name="dataMode"/>
				<param name="dataType"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getDataMode(DataType)" access="pub" jdoc="Returns the {@link DataMode} of the ClientHandler for the DataType. @since 1.2">
				<param name="dataType"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getConnection(String)" access="pub" jdoc="Returns the {@link java.sql.Connection} object for the DatabaseConnection that is identified by id passed. If id passed does not match with any connection loaded by this class it will return &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;. This just calls &amp;lt;code&amp;gt;getServer().getDBPoolUtil().getConnection(id)&amp;lt; code&amp;gt; @since 1.3 @deprecated as of v1.4.5 use &amp;lt;code&amp;gt;getServer().getDBPoolUtil().getConnection(id)&amp;lt; code&amp;gt;">
				<param name="id"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getClientConnectedTime()" access="pub" jdoc="Returns the date time when the client socket was assigned to this ClientHanlder. If no client is currently connected it will return &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @since 1.3.1">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.readInputStream()" access="prot" jdoc="Read the byte input. This will block till some data is received from the stream. @return The data as a String @since 1.3.1">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.readInputStream(InputStream)" access="prot" jdoc="">
				<comm cntt="Connection lost"/>
				<param name="_in"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.readBytes()" access="pub" jdoc="Read the byte input. This will block till some data is received from the stream. Allowed only when &amp;lt;code&amp;gt;DataType.IN&amp;lt; code&amp;gt; is in &amp;lt;code&amp;gt;DataMode.BYTE&amp;lt; code&amp;gt; mode. @return The data as a String @since 1.3.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setCommunicationLogging(boolean)" access="pub" jdoc="Sets the communication logging flag. @see #getCommunicationLogging @since 1.3.2">
				<param name="communicationLogging"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getCommunicationLogging()" access="pub" jdoc="Returns the communication logging flag. @see #setCommunicationLogging @since 1.3.2">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getLastCommunicationTime()" access="pub" jdoc="Returns the date time when the client socket last sent a data to this ClientHanlder. If no client is currently connected it will return &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @since 1.3.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.updateLastCommunicationTime()" access="pub" jdoc="Updates the last communication time for this client @since 1.3.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.forceClose()" access="pub" jdoc="Force the closing of the client by closing the associated socket. @since 1.3.3">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.isSecure()" access="pub" jdoc="Returns flag indicating if the client is connected in secure mode (SSL or TLS). @return secure flag @since 1.4.0">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setSecure(boolean)" access="pub" jdoc="Sets flag indicating if the client is connected in secure mode (SSL or TLS). @param secure @since 1.4.0">
				<param name="secure"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.updateInputOutputStreams()" access="pub" jdoc="Updates the InputStream and OutputStream for the ClientHandler for the set Socket. @since 1.4.0 @see #setSocket">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.makeSecure()" access="pub" jdoc="Makes current Client connection to secure protocol based on the secure configuration set to the server. This method will just call &amp;lt;code&amp;gt;makeSecure(false, false, true, null)&amp;lt; code&amp;gt;. @throws IOException @throws NoSuchAlgorithmException @throws KeyManagementException @since 1.4.0">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.makeSecure(String)" access="pub" jdoc="Makes current Client connection to secure protocol. This method will just call &amp;lt;code&amp;gt;makeSecure(false, false, true, protocol)&amp;lt; code&amp;gt;. @throws IOException @throws NoSuchAlgorithmException @throws KeyManagementException @since 1.4.0">
				<param name="protocol"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.makeSecure(boolean, boolean, boolean, String)" access="pub" jdoc="Makes current Client connection to secure protocol. @param useClientMode falg if the socket should start its first handshake in &amp;quot;client&amp;quot; mode. @param needClientAuth flag if the clients must authenticate themselves. @param autoClose close the underlying socket when this socket is closed @param protocol the standard name of the requested protocol. If &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; will use the protocol set in secure configuration of the server. @throws IOException @throws NoSuchAlgorithmException @throws KeyManagementException @since 1.4.0">
				<param name="useClientMode"/>
				<param name="needClientAuth"/>
				<param name="autoClose"/>
				<param name="protocol"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.sendClientBinary(byte)" access="pub" jdoc="Send a binary data to the connected client. If client is not connected it will just return. @since 1.4 @exception IOExceptionif Socket IO Error or Socket was closed by the client.">
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.sendClientBinary(byte, int, int)" access="pub" jdoc="Send a binary data to the connected client. If client is not connected it will just return. @since 1.4.5 @exception IOExceptionif Socket IO Error or Socket was closed by the client.">
				<param name="data"/>
				<param name="off"/>
				<param name="len"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.readBinary()" access="pub" jdoc="Read the binary input. This will block till some data is received from the stream. Allowed only when &amp;lt;code&amp;gt;DataType.IN&amp;lt; code&amp;gt; is in &amp;lt;code&amp;gt;DataMode.BINARY&amp;lt; code&amp;gt; mode. @return The data as a String @since 1.4">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setClientBinaryHandler(ClientBinaryHandler)" access="prot" jdoc="Sets the ClientBinaryHandler class that interacts with client sockets. @param handler fully qualified name of the class that implements {@link ClientBinaryHandler} @since 1.4">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getAppLogger()" access="pub" jdoc="Returns client SelectionKey associated, if any. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setTimeout(int)" access="pub" jdoc="Sets the client socket&amp;apos;s timeout. @param time client socket timeout in milliseconds. @see #getTimeout @since 1.4.5">
				<param name="time"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getTimeout()" access="pub" jdoc="Returns the Client socket timeout in milliseconds. @see #setTimeout @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.hasEvent(ClientEvent)" access="pub" jdoc="Checks if this client has the event. @since 1.4.5">
				<param name="event"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.addEvent(ClientEvent)" access="pub" jdoc="Adds the ClientEvent. @since 1.4.5">
				<param name="event"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.removeEvent(ClientEvent)" access="pub" jdoc="Removes the ClientEvent. @since 1.4.5">
				<param name="event"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getThreadEvent()" access="prot" jdoc="Returns threads current event for this client. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setMaxConnectionMsg(String)" access="pub" jdoc="Sets message to be displayed when maximum connection reaches. @since 1.4.5">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getMaxConnectionMsg()" access="pub" jdoc="Returns message to be displayed to the client when maximum connection reaches. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setSocketChannel(SocketChannel)" access="pub" jdoc="Sets client socket channel associated, if any. @since 1.4.5">
				<param name="socketChannel"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getSocketChannel()" access="pub" jdoc="Returns client socket channel associated, if any. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setSelectionKey(SelectionKey)" access="pub" jdoc="Sets client SelectionKey associated, if any. @since 1.4.5">
				<param name="selectionKey"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getSelectionKey()" access="pub" jdoc="Returns client SelectionKey associated, if any. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getWillClean()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.registerForRead()" access="pub" jdoc="Register OP_READ with the SelectionKey associated with the channel. If SelectionKey is not set then it registers the channel with the Selector. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.registerForWrite()" access="pub" jdoc="Register OP_WRITE with the SelectionKey associated with the channel. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setClientWriteHandler(ClientWriteHandler)" access="prot" jdoc="Sets the ClientWriteHandler class that interacts with client sockets. @param handler fully qualified name of the class that implements {@link ClientWriteHandler} @since 1.4.5">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.setCharset(String)" access="pub" jdoc="Sets the Charset to be used for String decoding and encoding. @param charset to be used for String decoding and encoding @see #getCharset @since 1.4.5">
				<param name="charset"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getCharset()" access="pub" jdoc="Returns Charset to be used for String decoding and encoding.. @see #setCharset @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getHostAddress()" access="pub" jdoc="Returns cached socket host ip address. @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.assertionSystemExit()" access="prot" jdoc="">
				<comm cntt="it can help debug."/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.isClientEventNext(ClientEvent)" access="pub" jdoc="Checks if the passed ClientEvent is the one next for processing if a thread is allowed through this object. @since 1.4.6">
				<param name="clientEvent"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getBufferedInputStream()" access="pub" jdoc="Returns the {@link java.io.BufferedInputStream} associated with the Client being handled. Can be null if not available at the time of method call. @see #getBufferedOutputStream @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.getBufferedOutputStream()" access="pub" jdoc="Returns the {@link java.io.BufferedOutputStream} associated with the Client being handled. Can be null if not available at the time of method call. @see #getBufferedInputStream @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler.handleTimeout(SocketTimeoutException)" access="prot" jdoc="">
				<param name="e"/>
			</mth>
		<class name="/main/:org.quickserver.net.server.impl.BasicClientHandler$InstanceId" intfc="n" abs="n" inn="y" sloc="6" jdoc="">
			<field name="id" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.server.impl.BasicClientHandler$InstanceId.getNextId()" access="pub" jdoc="">
			</mth>
		</class>
		</class>
		<class name="/main/:org.quickserver.net.server.impl.BasicPoolManager" intfc="n" abs="n" inn="n" sloc="49" jdoc="BasicPoolManager class. @author Akshathkumar Shetty @since 1.4.5">
			<const name="logger" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.net.server.impl.BasicPoolManager.makeByteBufferPool(PoolableObjectFactory, PoolConfig)" access="pub" jdoc="">
				<param name="factory"/>
				<param name="opConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicPoolManager.makeClientPool(PoolableObjectFactory, PoolConfig)" access="pub" jdoc="">
				<param name="factory"/>
				<param name="opConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicPoolManager.makeClientHandlerPool(PoolableObjectFactory, PoolConfig)" access="pub" jdoc="">
				<param name="factory"/>
				<param name="opConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicPoolManager.makeClientDataPool(PoolableObjectFactory, PoolConfig)" access="pub" jdoc="">
				<param name="factory"/>
				<param name="opConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.net.server.impl.BasicPoolManager.initPool(ObjectPool, PoolConfig)" access="pub" jdoc="">
				<param name="objectPool"/>
				<param name="opConfig"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/main/:org.quickserver.security">
		<class name="/main/:org.quickserver.security.SecureStoreManager" intfc="n" abs="n" inn="n" sloc="184" jdoc="Class that loads Key Managers, Trust Managers, SSLContext and other secure objects from QuickServer configuration passed. See &amp;lt;secure-store-manager&amp;gt; in &amp;lt;secure-store&amp;gt; to set new manger to load your SecureStore. This class can be overridden to change the way QuickServer configures the secure mode. @see org.quickserver.util.xmlreader.SecureStore @author Akshathkumar Shetty @since 1.4">
			<field name="logger" access="priv" jdoc=""/>
			<field name="sensitiveInput" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.security.SecureStoreManager.loadKeyManagers(QuickServerConfig)" access="pub" jdoc="Loads KeyManagers. KeyManagers are responsible for managing the key material which is used to authenticate the local SSLSocket to its peer. Can return null.">
				<param name="config"/>
			</mth>
			<mth name="/main/:org.quickserver.security.SecureStoreManager.loadTrustManagers(QuickServerConfig)" access="pub" jdoc="Loads TrustManagers. TrustManagers are responsible for managing the trust material that is used when making trust decisions, and for deciding whether credentials presented by a peer should be accepted. Can return null.">
				<param name="config"/>
			</mth>
			<mth name="/main/:org.quickserver.security.SecureStoreManager.getSSLContext(String)" access="pub" jdoc="Generates a SSLContext object that implements the specified secure socket protocol.">
				<param name="protocol"/>
			</mth>
			<mth name="/main/:org.quickserver.security.SecureStoreManager.getKeyStoreForKey(String, String)" access="prot" jdoc="Generates a keystore object for the specified keystore type from the specified provider to be used for loading storeing keys. @param type the type of keystore @param provider the name of the provider if &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; any provider package that implements this type of key may be given based on the priority.">
				<param name="type"/>
				<param name="provider"/>
			</mth>
			<mth name="/main/:org.quickserver.security.SecureStoreManager.getKeyStoreForTrust(String, String)" access="prot" jdoc="Generates a keystore object for the specified keystore type from the specified provider to be used for loading storing trusted keys certificates. @param type the type of keystore @param provider the name of the provider if &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; any provider package that implements this type of key may be given based on the priority.">
				<param name="type"/>
				<param name="provider"/>
			</mth>
			<mth name="/main/:org.quickserver.security.SecureStoreManager.getSocketFactory(SSLContext)" access="pub" jdoc="Returns a SSLSocketFactory object to be used for creating SSLSockets.">
				<param name="context"/>
			</mth>
			<mth name="/main/:org.quickserver.security.SecureStoreManager.logSSLServerSocketInfo(SSLServerSocket)" access="pub" jdoc="Can be used to log details about the SSLServerSocket used to create a secure server [SSL TLS]. This method can also be overridden to change the enabled cipher suites and or enabled protocols.">
				<param name="sslServerSocket"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.security.AccessManager" intfc="n" abs="n" inn="n" sloc="37" jdoc="This is a simple SecurityManager template. @since 1.3.3">
			<mth name="/main/:org.quickserver.security.AccessManager.AccessManager()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkPermission(Permission)" access="pub" jdoc="">
				<param name="perm"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkPermission(Permission, Object)" access="pub" jdoc="">
				<param name="perm"/>
				<param name="context"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkPrintJobAccess()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkSecurityAccess(String)" access="pub" jdoc="">
				<param name="target"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkCreateClassLoader()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkMemberAccess(Class, int)" access="pub" jdoc="">
				<param name="clazz"/>
				<param name="which"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkPackageAccess(String)" access="pub" jdoc="">
				<param name="pkg"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkPackageDefinition(String)" access="pub" jdoc="">
				<param name="pkg"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkDelete(String)" access="pub" jdoc="">
				<param name="file"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkExec(String)" access="pub" jdoc="">
				<param name="cmd"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkExit(int)" access="pub" jdoc="">
				<param name="status"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkListen(int)" access="pub" jdoc="">
				<param name="port"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkAccept(String, int)" access="pub" jdoc="">
				<comm cntt="throw new SecurityException(&amp;quot;Accept denied from &amp;quot;+host+&amp;quot;:&amp;quot;+port);"/>
				<param name="host"/>
				<param name="port"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkConnect(String, int)" access="pub" jdoc="">
				<param name="host"/>
				<param name="port"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkConnect(String, int, Object)" access="pub" jdoc="">
				<param name="host"/>
				<param name="port"/>
				<param name="context"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkMulticast(InetAddress)" access="pub" jdoc="">
				<param name="maddr"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkSetFactory()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkSystemClipboardAccess()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkAccess(Thread)" access="pub" jdoc="">
				<param name="t"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkAccess(ThreadGroup)" access="pub" jdoc="">
				<param name="g"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkRead(String)" access="pub" jdoc="">
				<param name="str"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkRead(FileDescriptor)" access="pub" jdoc="">
				<param name="fd"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkRead(String, Object)" access="pub" jdoc="">
				<param name="file"/>
				<param name="context"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkWrite(FileDescriptor)" access="pub" jdoc="">
				<param name="f"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkWrite(String)" access="pub" jdoc="">
				<param name="s"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkLink(String)" access="pub" jdoc="">
				<param name="lib"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkPropertiesAccess()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkPropertyAccess(String)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkAwtEventQueueAccess()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.security.AccessManager.checkTopLevelWindow(Object)" access="pub" jdoc="">
				<param name="window"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/main/:org.quickserver.sql">
		<class name="/main/:org.quickserver.sql.DBPoolUtil" intfc="y" abs="n" inn="n" sloc="6" jdoc="This interface is used by {@link org.quickserver.net.server.QuickServer}load all db drivers. It is also used to get {@link java.sql.Connection} object by the QuickServer when it encounters &amp;lt;db-object-pool&amp;gt;...&amp;lt; db-object-pool&amp;gt; in its configuration file. @author Akshathkumar Shetty @since 1.3">
			<mth name="/main/:org.quickserver.sql.DBPoolUtil.setDatabaseConnections(Iterator)" access="pub" jdoc="QuickServer passes the an &amp;lt;code&amp;gt;iterator&amp;lt; code&amp;gt; containing{@link org.quickserver.util.xmlreader.DatabaseConnectionConfig}objects if any from the xml configuration it reads.">
				<param name="iterator"/>
			</mth>
			<mth name="/main/:org.quickserver.sql.DBPoolUtil.initPool()" access="pub" jdoc="This method will initilise and load all the db connection pools that was set using {@link #setDatabaseConnections}">
			</mth>
			<mth name="/main/:org.quickserver.sql.DBPoolUtil.clean()" access="pub" jdoc="This method will close all db connection pools that was set using {@link #setDatabaseConnections}">
			</mth>
			<mth name="/main/:org.quickserver.sql.DBPoolUtil.getConnection(String)" access="pub" jdoc="Returns the {@link java.sql.Connection} object for the DatabaseConnection that is identified by id passed. If id passed does not match with any connection loaded by this class it will return &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;.">
				<param name="id"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/main/:org.quickserver.swing">
		<class name="/main/:org.quickserver.swing.JFrameUtilities" intfc="n" abs="n" inn="n" sloc="59" jdoc="Swing utility class">
			<mth name="/main/:org.quickserver.swing.JFrameUtilities.title(Object)" access="pub" jdoc="Create a title string from the class name.">
				<comm cntt="Remove the word &amp;quot;class&amp;quot;:"/>
				<param name="o"/>
			</mth>
			<mth name="/main/:org.quickserver.swing.JFrameUtilities.run(JFrame, int, int)" access="pub" jdoc="">
				<param name="frame"/>
				<param name="width"/>
				<param name="height"/>
			</mth>
			<mth name="/main/:org.quickserver.swing.JFrameUtilities.run(JApplet, int, int)" access="pub" jdoc="">
				<param name="applet"/>
				<param name="width"/>
				<param name="height"/>
			</mth>
			<mth name="/main/:org.quickserver.swing.JFrameUtilities.run(JPanel, int, int)" access="pub" jdoc="">
				<param name="panel"/>
				<param name="width"/>
				<param name="height"/>
			</mth>
			<mth name="/main/:org.quickserver.swing.JFrameUtilities.setNativeLookAndFeel()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.swing.JFrameUtilities.setJavaLookAndFeel()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.swing.JFrameUtilities.setMotifLookAndFeel()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.swing.JFrameUtilities.centerWindow(Window)" access="pub" jdoc="">
				<param name="window"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.swing.SensitiveInput" intfc="n" abs="n" inn="n" sloc="130" jdoc="Simple GUI frame that prompts for masked input. @author Akshathkumar Shetty">
			<field name="logger" access="priv" jdoc=""/>
			<field name="inputLabel" access="priv" jdoc=""/>
			<field name="jPanel1" access="priv" jdoc=""/>
			<field name="passwordField" access="priv" jdoc=""/>
			<field name="submitButton" access="priv" jdoc=""/>
			<field name="gotInput" access="priv" jdoc=""/>
			<field name="input" access="priv" jdoc=""/>
			<field name="logo" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.swing.SensitiveInput.SensitiveInput()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.swing.SensitiveInput.SensitiveInput(String)" access="pub" jdoc="">
				<comm cntt="ignore"/>
				<param name="title"/>
			</mth>
			<mth name="/main/:org.quickserver.swing.SensitiveInput.initComponents(String)" access="priv" jdoc="">
				<comm cntt="setAlwaysOnTop(true);"/>
				<param name="title"/>
			</mth>
			<mth name="/main/:org.quickserver.swing.SensitiveInput.formWindowClosed(java.awt.event.WindowEvent)" access="priv" jdoc="">
				<param name="evt"/>
			</mth>
			<mth name="/main/:org.quickserver.swing.SensitiveInput.passwordFieldActionPerformed(java.awt.event.ActionEvent)" access="priv" jdoc="">
				<param name="evt"/>
			</mth>
			<mth name="/main/:org.quickserver.swing.SensitiveInput.submitButtonActionPerformed(java.awt.event.ActionEvent)" access="priv" jdoc="">
				<param name="evt"/>
			</mth>
			<mth name="/main/:org.quickserver.swing.SensitiveInput.loadPassword()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.swing.SensitiveInput.getInput(String)" access="pub" jdoc="">
				<param name="inputName"/>
			</mth>
			<mth name="/main/:org.quickserver.swing.SensitiveInput.main(String)" access="pub" jdoc="">
				<param name="args"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/main/:org.quickserver.util">
		<class name="/main/:org.quickserver.util.ClassUtil" intfc="n" abs="n" inn="n" sloc="53" jdoc="A utility class to load class. @author Akshathkumar Shetty @since 1.3.2">
			<field name="logger" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.ClassUtil.loadClass(ClassLoader, String)" access="pub" jdoc="Tries to load the classes present in the array passed has second parameter from the ClassLoader passed has first parameter. Returns the HashMap of all the classed successfully loaded. @param classLoader ClassLoader used to find the class @param classes[] array of classes to load.">
				<param name="classLoader"/>
				<param name="classNames"/>
			</mth>
			<mth name="/main/:org.quickserver.util.ClassUtil.getClassLoaderFromJars(String)" access="pub" jdoc="Returns the ClassLoader to all the jars present in the dir passed has first parameter. @param jarDir path to the directory containing the jars">
				<param name="jarDir"/>
			</mth>
			<mth name="/main/:org.quickserver.util.ClassUtil.getClassLoaderFromJar(String)" access="pub" jdoc="Returns the ClassLoader to a jar @since 1.3.3">
				<param name="jarPath"/>
			</mth>
			<mth name="/main/:org.quickserver.util.ClassUtil.getClassLoader(String)" access="pub" jdoc="Returns the ClassLoader @since 1.3.3">
				<param name="path"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.TextFile" intfc="n" abs="n" inn="n" sloc="68" jdoc="Static functions for reading and writing text files as a single string, and treating a file as an ArrayList.">
			<mth name="/main/:org.quickserver.util.TextFile.read(String)" access="pub" jdoc="Read file as single string.">
				<param name="fileName"/>
			</mth>
			<mth name="/main/:org.quickserver.util.TextFile.read(File)" access="pub" jdoc="Read file as single string.">
				<param name="fileName"/>
			</mth>
			<mth name="/main/:org.quickserver.util.TextFile.write(String, String)" access="pub" jdoc="Write file from a single string.">
				<param name="fileName"/>
				<param name="text"/>
			</mth>
			<mth name="/main/:org.quickserver.util.TextFile.write(File, String)" access="pub" jdoc="Write file from a single string.">
				<param name="file"/>
				<param name="text"/>
			</mth>
			<mth name="/main/:org.quickserver.util.TextFile.TextFile(String)" access="pub" jdoc="">
				<param name="fileName"/>
			</mth>
			<mth name="/main/:org.quickserver.util.TextFile.write(String)" access="pub" jdoc="Write file from a single string.">
				<param name="fileName"/>
			</mth>
			<mth name="/main/:org.quickserver.util.TextFile.read(String, Object)" access="pub" jdoc="Read file as single string.">
				<param name="fileName"/>
				<param name="parent"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.MyString" intfc="n" abs="n" inn="n" sloc="192" jdoc="Just a simple String utility class. @author Akshathkumar Shetty">
			<comm cntt="tags"/>
			<comm cntt="needs more work"/>
			<field name="runtime" access="priv" jdoc=""/>
			<field name="doublePrcNum" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.MyString.replace(String, String, String)" access="pub" jdoc="">
				<param name="source"/>
				<param name="key"/>
				<param name="with"/>
			</mth>
			<mth name="/main/:org.quickserver.util.MyString.replaceAll(String, String, String)" access="pub" jdoc="">
				<param name="source"/>
				<param name="key"/>
				<param name="with"/>
			</mth>
			<mth name="/main/:org.quickserver.util.MyString.replaceCount(String, String)" access="pub" jdoc="">
				<param name="source"/>
				<param name="key"/>
			</mth>
			<mth name="/main/:org.quickserver.util.MyString.replaceAllNo(String, String)" access="pub" jdoc="">
				<param name="source"/>
				<param name="with"/>
			</mth>
			<mth name="/main/:org.quickserver.util.MyString.removeAllHtmlSpChar(String)" access="pub" jdoc="">
				<param name="source"/>
			</mth>
			<mth name="/main/:org.quickserver.util.MyString.replaceTags(String, String)" access="pub" jdoc="">
				<param name="source"/>
				<param name="with"/>
			</mth>
			<mth name="/main/:org.quickserver.util.MyString.replaceAllTags(String, String)" access="pub" jdoc="">
				<param name="source"/>
				<param name="with"/>
			</mth>
			<mth name="/main/:org.quickserver.util.MyString.getStackTrace(Throwable)" access="pub" jdoc="Returns String form of an exception. @since 1.3.3">
				<param name="e"/>
			</mth>
			<mth name="/main/:org.quickserver.util.MyString.getMemInfo(float)" access="pub" jdoc="Returns formatted memory size. @since 1.4.5">
				<param name="bytes"/>
			</mth>
			<mth name="/main/:org.quickserver.util.MyString.getSystemInfo(String)" access="pub" jdoc="Returns System information. @since 1.4.5">
				<param name="version"/>
			</mth>
			<mth name="/main/:org.quickserver.util.MyString.alignRight(String, int)" access="pub" jdoc="">
				<param name="data"/>
				<param name="len"/>
			</mth>
			<mth name="/main/:org.quickserver.util.MyString.alignLeft(String, int)" access="pub" jdoc="">
				<param name="data"/>
				<param name="len"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.Assertion" intfc="n" abs="n" inn="n" sloc="15" jdoc="Class to encapsulate Assertion and allows any back ports. @since 1.4.6">
			<comm cntt="Back Port versions"/>
			<comm cntt="Make sure a AssertionError class is defined that extends from Error"/>
			<comm cntt="private static void assertBackport(boolean test, String msg) { if(enabled &amp;&amp; test==false) throw new AssertionError(msg); if(enabled &amp;&amp; test==false) throw new RuntimeException(&amp;quot;Assertion failed: &amp;quot;+msg); } private static void assertBackport(boolean test) { if(enabled &amp;&amp; test==false) throw new AssertionError(); if(enabled &amp;&amp; test==false) throw new RuntimeException(&amp;quot;Assertion failed!&amp;quot;); }"/>
			<field name="enabled" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.Assertion.isEnabled()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.Assertion.affirm(boolean)" access="pub" jdoc="">
				<comm cntt="assertBackport(test);"/>
				<param name="test"/>
			</mth>
			<mth name="/main/:org.quickserver.util.Assertion.affirm(boolean, String)" access="pub" jdoc="">
				<comm cntt="assertBackport(test, msg);"/>
				<param name="test"/>
				<param name="msg"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/main/:org.quickserver.util.io">
		<class name="/main/:org.quickserver.util.io.ByteBufferOutputStream" intfc="n" abs="n" inn="n" sloc="183" jdoc="This is an OutputStream constructed from list of ByteBuffers. This is used in non-blocking mode. @since 1.4.5 @author Akshathkumar Shetty">
			<comm cntt="returns flag indicating if full write was done"/>
			<field name="logger" access="priv" jdoc=""/>
			<field name="bufferList" access="priv" jdoc=""/>
			<field name="lastByteBuffer" access="priv" jdoc=""/>
			<field name="handler" access="priv" jdoc=""/>
			<field name="toNotify" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.io.ByteBufferOutputStream.setDebug(boolean)" access="pub" jdoc="Sets the debug flag. When debug is set to &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; one can see number of bytes written.">
				<param name="flag"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferOutputStream.isLoggable(Level)" access="pub" jdoc="@since 1.4.7">
				<param name="level"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferOutputStream.ByteBufferOutputStream(ArrayList, ClientHandler)" access="pub" jdoc="Creates a new ByteBufferOutputStream using the given list as its base and ClientHandler as the target channel.">
				<param name="bufferList"/>
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferOutputStream.close()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferOutputStream.flush()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferOutputStream.write(int)" access="pub" jdoc="">
				<param name="b"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferOutputStream.write(byte[])" access="pub" jdoc="">
				<param name="b"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferOutputStream.write(byte[], int, int)" access="pub" jdoc="">
				<param name="b"/>
				<param name="off"/>
				<param name="len"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferOutputStream.writeAllByteBuffer()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferOutputStream.writeLastByteBuffer()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferOutputStream.returnBufferBack(ByteBuffer)" access="priv" jdoc="">
				<param name="byteBuffer"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferOutputStream.forceNotify()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferOutputStream.isDataAvailableForWrite(Object)" access="pub" jdoc="">
				<param name="toNotify"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.io.DirFileList" intfc="n" abs="n" inn="n" sloc="5" jdoc="DirFileList Class @author Akshathkumar Shetty @version 1.3.2">
			<mth name="/main/:org.quickserver.util.io.DirFileList.accept(File)" access="pub" jdoc="">
				<param name="file"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.io.MaskingThread" intfc="n" abs="n" inn="n" sloc="27" jdoc="This class attempts to erase characters echoed to the console. @since 1.4">
			<comm cntt="private char echochar = &amp;apos; &amp;apos;;"/>
			<field name="stop" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.io.MaskingThread.MaskingThread(String)" access="pub" jdoc="@param prompt The prompt displayed to the user">
				<param name="prompt"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.MaskingThread.run()" access="pub" jdoc="Begin masking until asked to stop.">
				<comm cntt="+ echochar"/>
				<comm cntt="attempt masking at this rate"/>
				<comm cntt="restore the original priority"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.MaskingThread.stopMasking()" access="pub" jdoc="Instruct the thread to stop masking.">
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.io.JarFileList" intfc="n" abs="n" inn="n" sloc="8" jdoc="JarFileList Class @author Akshathkumar Shetty @version 1.3.2">
			<mth name="/main/:org.quickserver.util.io.JarFileList.accept(File)" access="pub" jdoc="">
				<param name="file"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.io.PasswordField" intfc="n" abs="n" inn="n" sloc="69" jdoc="This class prompts the user for a password and attempts to mask input. @since 1.4">
			<field name="logger" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.io.PasswordField.getPassword(String)" access="pub" jdoc="@param prompt The prompt to display to the user. @return The password as entered by the user.">
				<param name="prompt"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.PasswordField.getPassword(InputStream, String)" access="pub" jdoc="@param in input stream to be used (e.g. System.in) @param prompt The prompt to display to the user. @return The password as entered by the user.">
				<comm cntt="Code to clear doskey on win nt 2000 - Alt+F7"/>
				<param name="in"/>
				<param name="prompt"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.io.ByteBufferInputStream" intfc="n" abs="n" inn="n" sloc="321" jdoc="This is an InputStream constructed from list of ByteBuffers. This is used in non-blocking mode. @since 1.4.5 @author Akshathkumar Shetty">
			<comm cntt="-- extra helpers"/>
			<field name="logger" access="priv" jdoc=""/>
			<field name="bufferList" access="priv" jdoc=""/>
			<field name="handler" access="priv" jdoc=""/>
			<field name="decoder" access="priv" jdoc=""/>
			<field name="encoder" access="priv" jdoc=""/>
			<field name="strings" access="priv" jdoc=""/>
			<field name="pos" access="priv" jdoc=""/>
			<field name="index" access="priv" jdoc=""/>
			<field name="start" access="priv" jdoc=""/>
			<field name="lookingForLineFeed" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.io.ByteBufferInputStream.setDebug(boolean)" access="pub" jdoc="Sets the debug flag.">
				<param name="flag"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferInputStream.isLoggable(Level)" access="pub" jdoc="@since 1.4.7">
				<param name="level"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferInputStream.ByteBufferInputStream(ArrayList, ClientHandler, String)" access="pub" jdoc="">
				<param name="bufferList"/>
				<param name="handler"/>
				<param name="charset"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferInputStream.availableOnlyInByteBuffer()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferInputStream.available()" access="pub" jdoc="">
				<comm cntt="move position"/>
				<comm cntt="end of while"/>
				<comm cntt="logger.finest(&amp;quot;count: &amp;quot;+count);"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferInputStream.close()" access="pub" jdoc="">
				<comm cntt="handler.closeConnection();"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferInputStream.markSupported()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferInputStream.read()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferInputStream.read(byte[])" access="pub" jdoc="">
				<param name="b"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferInputStream.read(byte[], int, int)" access="pub" jdoc="">
				<comm cntt="ie.printStackTrace();"/>
				<comm cntt="move position"/>
				<param name="b"/>
				<param name="off"/>
				<param name="len"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferInputStream.skip(long)" access="pub" jdoc="">
				<param name="n"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferInputStream.addStringsBackAsBuffer()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferInputStream.returnBufferBack()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferInputStream.returnBufferBack(ByteBuffer)" access="priv" jdoc="">
				<param name="byteBuffer"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferInputStream.isLineReady()" access="pub" jdoc="Checks if a line of String is ready to be read. @throws IOException if connection is lost or closed.">
				<comm cntt="end of while"/>
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferInputStream.isLineReadyForStringBuffer()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferInputStream.readLine()" access="pub" jdoc="Reads a line of String if ready. If line is not yet ready this will block. To find out if the line is ready use &amp;lt;code&amp;gt;isLineReady()&amp;lt; code&amp;gt; @see #isLineReady()">
			</mth>
			<mth name="/main/:org.quickserver.util.io.ByteBufferInputStream.dumpContent()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/main/:org.quickserver.util.logging">
		<class name="/main/:org.quickserver.util.logging.MicroFormatter" intfc="n" abs="n" inn="n" sloc="18" jdoc="Formats the LogRecord as &amp;quot;LEVEL : MESSAGE&amp;quot;">
			<field name="lineSeparator" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.logging.MicroFormatter.format(LogRecord)" access="pub" jdoc="">
				<param name="record"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.logging.SimpleConsoleFormatter" intfc="n" abs="n" inn="n" sloc="33" jdoc="Formats the LogRecord as &amp;quot;hh:mm:ss,SSS [LEVEL] Class.method() - MESSAGE&amp;quot; @since 1.3.2">
			<field name="date" access="priv" jdoc=""/>
			<field name="df" access="priv" jdoc=""/>
			<field name="lineSeparator" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.logging.SimpleConsoleFormatter.format(LogRecord)" access="pub" jdoc="">
				<param name="record"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.logging.SimpleTextFormatter" intfc="n" abs="n" inn="n" sloc="41" jdoc="Formats the LogRecord as &amp;quot;MM-dd-yyyy hh:mm:ss,SSS [LEVEL] - Class.method() - MESSAGE&amp;quot; @since 1.3.2">
			<field name="date" access="priv" jdoc=""/>
			<field name="df" access="priv" jdoc=""/>
			<field name="lineSeparator" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.logging.SimpleTextFormatter.format(LogRecord)" access="pub" jdoc="">
				<param name="record"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.logging.MiniFormatter" intfc="n" abs="n" inn="n" sloc="23" jdoc="Formats the LogRecord as &amp;quot;MMM d, yyyy hh:mm a - LEVEL : MESSAGE&amp;quot;">
			<field name="date" access="priv" jdoc=""/>
			<field name="df" access="priv" jdoc=""/>
			<field name="lineSeparator" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.logging.MiniFormatter.format(LogRecord)" access="pub" jdoc="">
				<param name="record"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.logging.SimpleJDKLoggingHook" intfc="n" abs="n" inn="n" sloc="58" jdoc="&amp;lt;p&amp;gt;SimpleLoggingHook - may be used to setup quick logging for a server. &amp;lt; p&amp;gt; This will write log using {@link SimpleTextFormatter} to &amp;lt;code&amp;gt;log\&amp;lt;ServerName&amp;gt;_%u%g.txt&amp;lt; code&amp;gt; with maximum of 20 rolling files, each of 1MB. &amp;lt;code&amp;gt;-Dorg.quickserver.util.logging.SimpleJDKLoggingHook.Level=FINE&amp;lt; code&amp;gt; may be used to control the logging level to file. &amp;lt;code&amp;gt;-Dorg.quickserver.util.logging.SimpleJDKLoggingHook.Count=20&amp;lt; code&amp;gt; may be used to control the number of files to use. @author Akshathkumar Shetty @since 1.4.6">
			<field name="quickserver" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.logging.SimpleJDKLoggingHook.info()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.logging.SimpleJDKLoggingHook.handleInit(QuickServer)" access="pub" jdoc="">
				<comm cntt="Ignore"/>
				<param name="quickserver"/>
			</mth>
			<mth name="/main/:org.quickserver.util.logging.SimpleJDKLoggingHook.setLevel(FileHandler, String)" access="priv" jdoc="">
				<param name="target"/>
				<param name="temp"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/main/:org.quickserver.util.pool">
		<class name="/main/:org.quickserver.util.pool.ClientHandlerObjectFactory" intfc="n" abs="n" inn="n" sloc="37" jdoc="A factory for creating {@link org.quickserver.net.server.ClientHandler}instances. @author Akshathkumar Shetty @since 1.3">
			<comm cntt="Creates an instance that can be returned by the pool."/>
			<comm cntt="Uninitialize an instance to be returned to the pool."/>
			<comm cntt="Reinitialize an instance to be returned by the pool."/>
			<comm cntt="Destroys an instance no longer needed by the pool."/>
			<comm cntt="Ensures that the instance is safe to be returned by the pool."/>
			<field name="instanceCount" access="priv" jdoc=""/>
			<field name="id" access="priv" jdoc=""/>
			<field name="blocking" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.pool.ClientHandlerObjectFactory.ClientHandlerObjectFactory(boolean)" access="pub" jdoc="">
				<param name="blocking"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.ClientHandlerObjectFactory.makeObject()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.ClientHandlerObjectFactory.passivateObject(Object)" access="pub" jdoc="">
				<param name="obj"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.ClientHandlerObjectFactory.activateObject(Object)" access="pub" jdoc="">
				<param name="obj"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.ClientHandlerObjectFactory.destroyObject(Object)" access="pub" jdoc="">
				<param name="obj"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.ClientHandlerObjectFactory.validateObject(Object)" access="pub" jdoc="">
				<param name="obj"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.pool.PoolHelper" intfc="n" abs="n" inn="n" sloc="10" jdoc="Pool Helper class. @since 1.4.7">
			<mth name="/main/:org.quickserver.util.pool.PoolHelper.isPoolOpen(ObjectPool)" access="pub" jdoc="Check if Pool is open.">
				<param name="pool"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.pool.QSObjectPool" intfc="y" abs="n" inn="n" sloc="4" jdoc="This interface defines ObjectPool that QuickServer needs. @since 1.4.5">
			<mth name="/main/:org.quickserver.util.pool.QSObjectPool.getAllActiveObjects()" access="pub" jdoc="Returns the iterator of all active objects">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.QSObjectPool.getObjectToSynchronize()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.pool.ByteBufferObjectFactory" intfc="n" abs="n" inn="n" sloc="31" jdoc="A factory for creating java.nio.ByteBuffer instances. @author Akshathkumar Shetty @since 1.3">
			<comm cntt="Creates an instance that can be returned by the pool."/>
			<comm cntt="Uninitialize an instance to be returned to the pool."/>
			<comm cntt="Reinitialize an instance to be returned by the pool."/>
			<comm cntt="Destroys an instance no longer needed by the pool."/>
			<comm cntt="Ensures that the instance is safe to be returned by the pool."/>
			<field name="bufferSize" access="pub" jdoc=""/>
			<field name="useDirectByteBuffer" access="pub" jdoc=""/>
			<mth name="/main/:org.quickserver.util.pool.ByteBufferObjectFactory.ByteBufferObjectFactory(int, boolean)" access="pub" jdoc="">
				<param name="bufferSize"/>
				<param name="useDirectByteBuffer"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.ByteBufferObjectFactory.makeObject()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.ByteBufferObjectFactory.passivateObject(Object)" access="pub" jdoc="">
				<param name="obj"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.ByteBufferObjectFactory.activateObject(Object)" access="pub" jdoc="">
				<param name="obj"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.ByteBufferObjectFactory.destroyObject(Object)" access="pub" jdoc="">
				<param name="obj"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.ByteBufferObjectFactory.validateObject(Object)" access="pub" jdoc="">
				<param name="obj"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.pool.MakeQSObjectPool" intfc="n" abs="n" inn="n" sloc="53" jdoc="This class that creates QSObjectPool from ObjectPool passed to it. @since 1.4.5">
			<field name="objectPool" access="prot" jdoc=""/>
			<field name="list" access="prot" jdoc=""/>
			<mth name="/main/:org.quickserver.util.pool.MakeQSObjectPool.getQSObjectPool(ObjectPool)" access="pub" jdoc="">
				<param name="objectPool"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.MakeQSObjectPool.MakeQSObjectPool()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.MakeQSObjectPool.MakeQSObjectPool(ObjectPool)" access="pub" jdoc="">
				<param name="objectPool"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.MakeQSObjectPool.setObjectPool(ObjectPool)" access="prot" jdoc="">
				<param name="objectPool"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.MakeQSObjectPool.returnObject(Object)" access="pub" jdoc="">
				<param name="obj"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.MakeQSObjectPool.borrowObject()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.MakeQSObjectPool.close()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.MakeQSObjectPool.getAllActiveObjects()" access="pub" jdoc="Returns the iterator of all active objects">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.MakeQSObjectPool.getObjectToSynchronize()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.MakeQSObjectPool.addObject()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.MakeQSObjectPool.clear()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.MakeQSObjectPool.getNumActive()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.MakeQSObjectPool.getNumIdle()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.MakeQSObjectPool.invalidateObject(Object)" access="pub" jdoc="">
				<param name="obj"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.MakeQSObjectPool.setFactory(PoolableObjectFactory)" access="pub" jdoc="">
				<param name="factory"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.pool.BasicObjectPool" intfc="n" abs="n" inn="n" sloc="110" jdoc="This class will maintain a simple pool of object instances. It internally used a &amp;lt;code&amp;gt;HashSet&amp;lt; code&amp;gt; @author Akshathkumar Shetty @since 1.3">
			<const name="logger" access="priv" jdoc=""/>
			<field name="factory" access="priv" jdoc=""/>
			<field name="config" access="priv" jdoc=""/>
			<field name="activeObjects" access="priv" jdoc=""/>
			<field name="idleObjects" access="priv" jdoc=""/>
			<field name="inMaintain" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.pool.BasicObjectPool.BasicObjectPool()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.BasicObjectPool.BasicObjectPool(PoolableObjectFactory, BasicObjectPool.Config)" access="pub" jdoc="">
				<param name="factory"/>
				<param name="config"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.BasicObjectPool.addObject()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.BasicObjectPool.borrowObject()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.BasicObjectPool.clear()" access="pub" jdoc="Clears any objects sitting idle in the pool">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.BasicObjectPool.close()" access="pub" jdoc="Close this pool, and free any resources associated with it.">
				<comm cntt="Iterator iterator = activeObjects.iterator(); while(iterator.hasNext()) { try { invalidateObject(iterator.next()); } catch(Exception e) { logger.warning(&amp;quot;Error in BasicObjectPool.close : &amp;quot;+e); } }"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.BasicObjectPool.getNumActive()" access="pub" jdoc="Return the number of instances currently borrowed from my pool">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.BasicObjectPool.getNumIdle()" access="pub" jdoc="Return the number of instances currently idle in my pool">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.BasicObjectPool.invalidateObject(Object)" access="pub" jdoc="Invalidates an object from the pool">
				<param name="obj"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.BasicObjectPool.returnObject(Object)" access="pub" jdoc="Return an instance to my pool">
				<param name="obj"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.BasicObjectPool.setFactory(PoolableObjectFactory)" access="pub" jdoc="Sets the factory I use to create new instances">
				<param name="factory"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.BasicObjectPool.maintain()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.BasicObjectPool.getAllActiveObjects()" access="pub" jdoc="Returns the iterator of all active objects @since 1.3.1">
				<comm cntt="activeObjects.iterator();"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.BasicObjectPool.getObjectToSynchronize()" access="pub" jdoc="">
			</mth>
		<class name="/main/:org.quickserver.util.pool.BasicObjectPool$Config" intfc="n" abs="n" inn="y" sloc="4" jdoc="">
			<field name="maxActive" access="pub" jdoc=""/>
			<field name="maxIdle" access="pub" jdoc=""/>
		</class>
		</class>
		<class name="/main/:org.quickserver.util.pool.PoolableObject" intfc="y" abs="n" inn="n" sloc="4" jdoc="Interface to be implemented by any user class of QuickServer so that QuickServer can create a pool of objects and reuse objects from that pool. @since 1.3">
			<mth name="/main/:org.quickserver.util.pool.PoolableObject.isPoolable()" access="pub" jdoc="Returns weather or not this Object impelementation can be pooled.">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.PoolableObject.getPoolableObjectFactory()" access="pub" jdoc="Will return a {@link org.apache.commons.pool.PoolableObjectFactory} object for this Object implementation if it is poolable else will return &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;">
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.pool.QSObjectPoolMaker" intfc="y" abs="n" inn="n" sloc="3" jdoc="This interface defines a class that creates QSObjectPool from ObjectPool. Should have a default constructor. @since 1.4.5">
			<mth name="/main/:org.quickserver.util.pool.QSObjectPoolMaker.getQSObjectPool(ObjectPool)" access="pub" jdoc="">
				<param name="objectPool"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/main/:org.quickserver.util.pool.thread">
		<class name="/main/:org.quickserver.util.pool.thread.ClientPool" intfc="n" abs="n" inn="n" sloc="124" jdoc="This is a class for managing the pool of threads for handling clients. @author Akshathkumar Shetty @since 1.3">
			<comm cntt="v1.4.6"/>
			<field name="logger" access="priv" jdoc=""/>
			<field name="clients" access="prot" jdoc=""/>
			<field name="pool" access="prot" jdoc=""/>
			<field name="poolConfig" access="prot" jdoc=""/>
			<field name="countNioWriteThreads" access="priv" jdoc=""/>
			<field name="maxThreadsForNioWrite" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.ClientPool(QSObjectPool, PoolConfig)" access="pub" jdoc="">
				<param name="objectPool"/>
				<param name="poolConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.getObjectPool()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.addClient(Runnable)" access="pub" jdoc="">
				<param name="r"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.addClient(Runnable, boolean)" access="pub" jdoc="">
				<comm cntt="logger.finest(&amp;quot;Adding Runnable: &amp;quot;+r);"/>
				<comm cntt="ct.start();"/>
				<comm cntt="timeout was just in case :-)"/>
				<comm cntt="Thread.yield();"/>
				<param name="r"/>
				<param name="keepObjOnFail"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.returnObject(Object)" access="pub" jdoc="">
				<param name="object"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.getClient()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.isClientAvailable()" access="pub" jdoc="@since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.finalize()" access="prot" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.close()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.clear()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.getNumActive()" access="pub" jdoc="Return the number of instances currently borrowed from my pool. @since 1.4.1">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.getNumIdle()" access="pub" jdoc="Return the number of instances currently idle in my pool. @since 1.4.1">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.getAllClientThread()" access="pub" jdoc="Returns iterator containing all the active threads i.e ClientHandler handling connected clients. @since 1.3.1">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.getObjectToSynchronize()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.getPoolConfig()" access="pub" jdoc="Returns PoolConfig object that configured this pool @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.setMaxThreadsForNioWrite(int)" access="pub" jdoc="Sets the maximum threads allowed for nio write. If set to 0 or less no limit is imposed. @since 1.4.6">
				<param name="count"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.getMaxThreadsForNioWrite()" access="pub" jdoc="Returns the maximum threads allowed for nio write @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.nioWriteEnd()" access="prot" jdoc="Notifies when NIO write is complete. @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.nioWriteStart()" access="prot" jdoc="Notifies when NIO write is about to start. @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientPool.shouldNioWriteHappen()" access="pub" jdoc="Method to suggest if nio write should be sent for processing. @since 1.4.6">
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.pool.thread.ClientThread" intfc="n" abs="n" inn="n" sloc="115" jdoc="This is the worker thread used to handle clients using {@link org.quickserver.net.server.ClientHandler} @author Akshathkumar Shetty @since 1.3">
			<field name="logger" access="priv" jdoc=""/>
			<field name="idMap" access="priv" jdoc=""/>
			<field name="name" access="priv" jdoc=""/>
			<field name="pool" access="priv" jdoc=""/>
			<field name="client" access="priv" jdoc=""/>
			<field name="id" access="priv" jdoc=""/>
			<field name="ready" access="priv" jdoc=""/>
			<field name="state" access="prot" jdoc="Holds the current Thread state. &amp;lt;code&amp;gt;&amp;lt;pre&amp;gt; U = Unknown S = Started R - Running a client I = Idle L = Looking for client P = Was sent back to pool W = Waiting in pool N = Was notified, Looking for client D = Dead &amp;lt; pre&amp;gt;&amp;lt; code&amp;gt;"/>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientThread.isReady()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientThread.clean()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientThread.ClientThread(ClientPool)" access="pub" jdoc="">
				<param name="pool"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientThread.getNewId(int)" access="priv" jdoc="">
				<param name="instanceCount"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientThread.ClientThread(ClientPool, int)" access="pub" jdoc="">
				<param name="pool"/>
				<param name="instanceCount"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientThread.getInstanceId()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientThread.executeClient()" access="priv" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientThread.run()" access="pub" jdoc="">
				<comm cntt="end if ready"/>
				<comm cntt="end while"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientThread.getThread()" access="pub" jdoc="Returns the {@link org.quickserver.net.server.ClientHandler} beeing run by the ClientThread. @since 1.3.1">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientThread.toString()" access="pub" jdoc="[ThreadInPool[&amp;lt;Instance Count&amp;gt;]:&amp;lt;id&amp;gt;] - &amp;lt;state&amp;gt; - Client {ClientHandler:...} @since 1.4.1">
			</mth>
		<class name="/main/:org.quickserver.util.pool.thread.ClientThread$InstanceId" intfc="n" abs="n" inn="y" sloc="6" jdoc="">
			<field name="id" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.pool.thread.ClientThread$InstanceId.getNextId()" access="pub" jdoc="">
			</mth>
		</class>
		</class>
		<class name="/main/:org.quickserver.util.pool.thread.ThreadObjectFactory" intfc="n" abs="n" inn="n" sloc="33" jdoc="A factory for creating {@link org.quickserver.util.pool.thread.ClientThread}instances. @author Akshathkumar Shetty @since 1.3">
			<comm cntt="Creates an instance that can be returned by the pool."/>
			<comm cntt="Uninitialize an instance to be returned to the pool."/>
			<comm cntt="Reinitialize an instance to be returned by the pool."/>
			<comm cntt="Destroys an instance no longer needed by the pool."/>
			<comm cntt="Ensures that the instance is safe to be returned by the pool."/>
			<field name="pool" access="priv" jdoc=""/>
			<field name="instanceCount" access="priv" jdoc=""/>
			<field name="id" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.pool.thread.ThreadObjectFactory.ThreadObjectFactory()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ThreadObjectFactory.setClientPool(ClientPool)" access="pub" jdoc="">
				<param name="pool"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ThreadObjectFactory.makeObject()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ThreadObjectFactory.passivateObject(Object)" access="pub" jdoc="">
				<param name="obj"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ThreadObjectFactory.activateObject(Object)" access="pub" jdoc="">
				<param name="obj"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ThreadObjectFactory.destroyObject(Object)" access="pub" jdoc="">
				<param name="obj"/>
			</mth>
			<mth name="/main/:org.quickserver.util.pool.thread.ThreadObjectFactory.validateObject(Object)" access="pub" jdoc="">
				<param name="obj"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/main/:org.quickserver.util.xmlreader">
		<class name="/main/:org.quickserver.util.xmlreader.IpFilterConfig" intfc="n" abs="n" inn="n" sloc="47" jdoc="This class encapsulate the IP based Filter config. The xml is &amp;lt;ip-filter&amp;gt;...&amp;lt; ip-filter&amp;gt;&amp;lt;br&amp;gt; &amp;lt;b&amp;gt;Note:&amp;lt; b&amp;gt; Make sure that access from 127.0.0.1 is allowed at all times, else some of the QsAdmin command will fail. @author Akshathkumar Shetty @since 1.3.3">
			<field name="ipCollection" access="priv" jdoc=""/>
			<field name="enable" access="priv" jdoc=""/>
			<field name="allowAccess" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.IpFilterConfig.IpFilterConfig()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.IpFilterConfig.addClientIpAddress(String)" access="pub" jdoc="Adds a Client Ip Address to the list">
				<param name="clientIpAddress"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.IpFilterConfig.getIpCollection()" access="pub" jdoc="Returns ClientIpAddress collection">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.IpFilterConfig.iterator()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.IpFilterConfig.setEnable(boolean)" access="pub" jdoc="Sets the IP filter enable flag. XML Tag: &amp;lt;ip-filter&amp;gt;&amp;lt;enable&amp;gt;true&amp;lt; enable&amp;gt;&amp;lt; ip-filter&amp;gt; Allowed values = &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; | &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; @see #getEnable">
				<param name="enable"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.IpFilterConfig.getEnable()" access="pub" jdoc="Returns the IP filter enable flag. @see #setEnable">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.IpFilterConfig.setAllowAccess(boolean)" access="pub" jdoc="Sets the allow access flag. XML Tag: &amp;lt;ip-filter&amp;gt;&amp;lt;allow-access&amp;gt;true&amp;lt; allow-access&amp;gt;&amp;lt; ip-filter&amp;gt; Allowed values = &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; | &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; @see #getAllowAccess">
				<param name="enable"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.IpFilterConfig.getAllowAccess()" access="pub" jdoc="Returns the allow access flag. @see #setAllowAccess">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.IpFilterConfig.toXML(String)" access="pub" jdoc="Returns XML config of this class. @since 1.3">
				<param name="pad"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.QuickServerConfig" intfc="n" abs="n" inn="n" sloc="137" jdoc="This class encapsulate the configuration of QuickServer. &amp;lt;p&amp;gt; This is used by {@link QuickServer#configQuickServer} and{@link QuickServer#initService} method to initialise QuickServer. &amp;lt; p&amp;gt; @author Akshathkumar Shetty @since 1.2">
			<field name="qSAdminServerConfig" access="priv" jdoc=""/>
			<field name="dDObjectPoolConfig" access="priv" jdoc=""/>
			<field name="applicationConfiguration" access="priv" jdoc=""/>
			<field name="initServerHooks" access="priv" jdoc=""/>
			<field name="securityManagerClass" access="priv" jdoc=""/>
			<field name="configFile" access="priv" jdoc=""/>
			<field name="applicationJarPath" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.QuickServerConfig.QuickServerConfig()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QuickServerConfig.setQSAdminServerConfig(QSAdminServerConfig)" access="pub" jdoc="Sets the QSAdminServer configuration. XML Tag: &amp;lt;qsadmin-server&amp;gt;&amp;lt; qsadmin-server&amp;gt;">
				<param name="config"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QuickServerConfig.getQSAdminServerConfig()" access="pub" jdoc="Returns QSAdminServer configuration.">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QuickServerConfig.setDBObjectPoolConfig(DBObjectPoolConfig)" access="pub" jdoc="Sets the DBObjectPoolConfig XML Tag: &amp;lt;object-pool&amp;gt;&amp;lt; object-pool&amp;gt; @since 1.3">
				<param name="dDObjectPoolConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QuickServerConfig.getDBObjectPoolConfig()" access="pub" jdoc="Returns DBObjectPoolConfig @since 1.3">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QuickServerConfig.setApplicationConfiguration(ApplicationConfiguration)" access="pub" jdoc="Sets the Application Configuration. This can be used by application to store its configuration information. XML Tag: &amp;lt;application-configuration&amp;gt;&amp;lt; application-configuration&amp;gt; @since 1.3.2">
				<param name="applicationConfiguration"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QuickServerConfig.getApplicationConfiguration()" access="pub" jdoc="Returns ApplicationConfiguration @since 1.3.2">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QuickServerConfig.setSecurityManagerClass(String)" access="pub" jdoc="Sets the SecurityManager class XML Tag: &amp;lt;security-manager-class&amp;gt;&amp;lt; security-manager-class&amp;gt; @param securityManagerClass className the fully qualified name of the class that extends {@link java.lang.SecurityManager}. @see #getSecurityManagerClass @since 1.3.3">
				<param name="securityManagerClass"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QuickServerConfig.getSecurityManagerClass()" access="pub" jdoc="Returns the SecurityManager class @see #setSecurityManagerClass @since 1.3.3">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QuickServerConfig.setConfigFile(String)" access="prot" jdoc="Sets the file path of the file that loaded the config from. @since 1.3.3">
				<param name="fileName"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QuickServerConfig.getConfigFile()" access="pub" jdoc="Returns the file path of the file that loaded the configuration file. @since 1.3.3">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QuickServerConfig.setApplicationJarPath(String)" access="pub" jdoc="Sets the applications jar s path. This can be either absolute or relative(to config file) path to the jar file or the directory containing the jars needed by the application. @see #getApplicationJarPath @since 1.3.3">
				<param name="applicationJarPath"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QuickServerConfig.getApplicationJarPath()" access="pub" jdoc="Returns the applications jar s path. This can be either absolute or relative(to config file) path to the jar file or the directory containing the jars needed by the application. @see #setApplicationJarPath @since 1.3.3">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QuickServerConfig.setInitServerHooks(InitServerHooks)" access="pub" jdoc="Sets the InitServerHooks. @see #getInitServerHooks @since 1.4">
				<param name="initServerHooks"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QuickServerConfig.getInitServerHooks()" access="pub" jdoc="Returns the InitServerHooks. @see #setInitServerHooks @since 1.4">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QuickServerConfig.toXML(String)" access="pub" jdoc="Returns XML config of this class. @since 1.3">
				<param name="pad"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QuickServerConfig.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.PoolConfig" intfc="n" abs="n" inn="n" sloc="26" jdoc="This class encapsulate the pool configuration. @author Akshathkumar Shetty @since 1.4.5">
			<field name="maxActive" access="priv" jdoc=""/>
			<field name="maxIdle" access="priv" jdoc=""/>
			<field name="initSize" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.PoolConfig.getInitSize()" access="pub" jdoc="Returns the inital size of the pool. @see #setInitSize @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.PoolConfig.setInitSize(int)" access="pub" jdoc="Sets the inital size of the pool. XML Tag: &amp;lt;init-size&amp;gt;&amp;lt; init-size&amp;gt; @param initSize inital size of the pool. @see #getInitSize @since 1.4.6">
				<param name="initSize"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.PoolConfig.getMaxActive()" access="pub" jdoc="Returns the maximum active objects allowed in the pool. @see #setMaxActive">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.PoolConfig.setMaxActive(int)" access="pub" jdoc="Sets the maximum active objects allowed in the pool. XML Tag: &amp;lt;max-activ&amp;gt;&amp;lt; max-activ&amp;gt; @param maxActive maximum allowed active objects @see #getMaxActive">
				<param name="maxActive"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.PoolConfig.getMaxIdle()" access="pub" jdoc="Returns the maximum idle objects allowed in the pool. @see #setMaxIdle">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.PoolConfig.setMaxIdle(int)" access="pub" jdoc="Sets the maximum Idle objects allowed in the pool. XML Tag: &amp;lt;max-idle&amp;gt;&amp;lt; max-idle&amp;gt; @param maxIdle maximum allowed active objects @see #getMaxIdle">
				<param name="maxIdle"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.Secure" intfc="n" abs="n" inn="n" sloc="76" jdoc="This class encapsulate the setting that help in configuring a secure socket based QuickServer. The example xml is &amp;lt;pre&amp;gt; .... &amp;lt;secure&amp;gt; &amp;lt;enable&amp;gt;true&amp;lt; enable&amp;gt; &amp;lt;load&amp;gt;true&amp;lt; load&amp;gt; &amp;lt;port&amp;gt;&amp;lt; port&amp;gt; &amp;lt;protocol&amp;gt;TLS&amp;lt; protocol&amp;gt; &amp;lt;client-auth-enable&amp;gt;false&amp;lt; client-auth-enable&amp;gt; &amp;lt;secure-store&amp;gt; .... &amp;lt; secure-store&amp;gt; &amp;lt; secure&amp;gt; .... &amp;lt; pre&amp;gt; @see TrustStoreInfo @see KeyStoreInfo @see SecureStore @author Akshathkumar Shetty @since 1.4">
			<comm cntt="will use servers port"/>
			<field name="enable" access="priv" jdoc=""/>
			<field name="load" access="priv" jdoc=""/>
			<field name="port" access="priv" jdoc=""/>
			<field name="protocol" access="priv" jdoc=""/>
			<field name="clientAuthEnable" access="priv" jdoc=""/>
			<field name="secureStore" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.Secure.setEnable(boolean)" access="pub" jdoc="Sets the Secure enable flag. If not set, it will use &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;&amp;lt;br &amp;gt; XML Tag: &amp;lt;secure&amp;gt;&amp;lt;enable&amp;gt;true&amp;lt; enable&amp;gt;&amp;lt; secure&amp;gt; Allowed values = &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; | &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; If enable is set to &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; load is also set to &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;. @see #getEnable">
				<param name="enable"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Secure.getEnable()" access="pub" jdoc="Returns the Secure enable flag. @see #setEnable">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Secure.isEnable()" access="pub" jdoc="Returns the Secure enable flag.">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Secure.setLoad(boolean)" access="pub" jdoc="Sets the load flag for SSLContext. If not set, it will use &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;&amp;lt;br &amp;gt; XML Tag: &amp;lt;Secure&amp;gt;&amp;lt;load&amp;gt;true&amp;lt; load&amp;gt;&amp;lt; Secure&amp;gt; Allowed values = &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; | &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; @see #getLoad">
				<param name="load"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Secure.getLoad()" access="pub" jdoc="Returns the load flag for SSLContext. @see #setLoad">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Secure.isLoad()" access="pub" jdoc="Returns the load flag for SSLContext.">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Secure.setPort(int)" access="pub" jdoc="Sets the port for the QuickServer to listen on in secure mode. If not set, it will run on servers non secure port&amp;lt;br &amp;gt; XML Tag: &amp;lt;port&amp;gt;&amp;lt; port&amp;gt; @param port to listen on. @see #getPort">
				<param name="port"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Secure.getPort()" access="pub" jdoc="Returns the port for the QuickServer to listen on in secure mode. @see #setPort">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Secure.setProtocol(String)" access="pub" jdoc="Sets the protocol for the QuickServer to listen on in secure mode. If not set, it will use &amp;lt;code&amp;gt;TLS&amp;lt; code&amp;gt;&amp;lt;br &amp;gt; XML Tag: &amp;lt;protocol&amp;gt;TLS&amp;lt; protocol&amp;gt; @param protocol to listen on in secure mode. @see #getProtocol">
				<param name="protocol"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Secure.getProtocol()" access="pub" jdoc="Returns the protocol for the QuickServer to listen on in secure mode. @see #setProtocol">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Secure.setClientAuthEnable(boolean)" access="pub" jdoc="Sets whether the connections which are accepted must include successful client authentication. If not set, it will use &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;&amp;lt;br &amp;gt; XML Tag: &amp;lt;client-auth-enable&amp;gt;false&amp;lt; client-auth-enable&amp;gt; @param enable client authentication enable flag @see #getClientAuthEnable">
				<param name="enable"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Secure.getClientAuthEnable()" access="pub" jdoc="Returns whether the connections which are accepted must include successful client authentication. @see #setClientAuthEnable">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Secure.isClientAuthEnable()" access="pub" jdoc="Returns whether the connections which are accepted must include successful client authentication.">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Secure.setSecureStore(SecureStore)" access="pub" jdoc="Sets SecureStore information XML Tag: &amp;lt;secure-store&amp;gt;&amp;lt; secure-store&amp;gt; @param secureStore SecureStore information @see #getSecureStore">
				<param name="secureStore"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Secure.getSecureStore()" access="pub" jdoc="Returns SecureStore information. @see #setSecureStore">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Secure.toXML(String)" access="pub" jdoc="Returns XML config of this class.">
				<param name="pad"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.DBObjectPoolConfig" intfc="n" abs="n" inn="n" sloc="26" jdoc="This class encapsulate the database object pool. The xml is &amp;lt;db-object-pool&amp;gt;...&amp;lt; db-object-pool&amp;gt;. @author Akshathkumar Shetty @since 1.3">
			<field name="databaseConnectionSet" access="priv" jdoc=""/>
			<field name="dbPoolUtil" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.DBObjectPoolConfig.getDatabaseConnectionSet()" access="pub" jdoc="Returns the DatabaseConnectionSet. @return DatabaseConnectionSet">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DBObjectPoolConfig.setDatabaseConnectionSet(DatabaseConnectionSet)" access="pub" jdoc="Sets the DatabaseConnectionSet. XML Tag: &amp;lt;database-connection-set&amp;gt;&amp;lt; database-connection-set&amp;gt; @param databaseConnectionSet">
				<param name="databaseConnectionSet"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DBObjectPoolConfig.setDbPoolUtil(String)" access="pub" jdoc="Sets the {@link org.quickserver.sql.DBPoolUtil} class that handles the database connection pools. XML Tag: &amp;lt;db-pool-util&amp;gt;&amp;lt; db-pool-util&amp;gt; @param className the fully qualified name of the class that implements {@link org.quickserver.sql.DBPoolUtil}. @see #getDbPoolUtil">
				<param name="className"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DBObjectPoolConfig.getDbPoolUtil()" access="pub" jdoc="Returns the {@link org.quickserver.sql.DBPoolUtil} class that handles the database connection pools. @see #setDbPoolUtil">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DBObjectPoolConfig.toXML(String)" access="pub" jdoc="Returns XML config of this class. @since 1.3">
				<param name="pad"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.ThreadObjectPoolConfig" intfc="n" abs="n" inn="n" sloc="20" jdoc="This class encapsulate the Thread Object pool configuration. The xml is &amp;lt;thread-object-pool&amp;gt;...&amp;lt; thread-object-pool&amp;gt; @author Akshathkumar Shetty">
			<mth name="/main/:org.quickserver.util.xmlreader.ThreadObjectPoolConfig.ThreadObjectPoolConfig()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ThreadObjectPoolConfig.ThreadObjectPoolConfig(PoolConfig)" access="pub" jdoc="">
				<param name="poolConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ThreadObjectPoolConfig.toXML(String)" access="pub" jdoc="Returns XML config of this class.">
				<param name="pad"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.ByteBufferObjectPoolConfig" intfc="n" abs="n" inn="n" sloc="20" jdoc="This class encapsulate the ByteBuffer Object pool configuration. The xml is &amp;lt;byte-buffer-object-pool&amp;gt;...&amp;lt; byte-buffer-object-pool&amp;gt; @author Akshathkumar Shetty @since 1.3">
			<mth name="/main/:org.quickserver.util.xmlreader.ByteBufferObjectPoolConfig.ByteBufferObjectPoolConfig()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ByteBufferObjectPoolConfig.ByteBufferObjectPoolConfig(PoolConfig)" access="pub" jdoc="">
				<param name="poolConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ByteBufferObjectPoolConfig.toXML(String)" access="pub" jdoc="Returns XML config of this class.">
				<param name="pad"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.PluginConfigReader" intfc="n" abs="n" inn="n" sloc="21" jdoc="This class reads the xml configuration and gives QSAdminPluginConfig object. @author Akshathkumar Shetty @since 1.3.2">
			<field name="logger" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.PluginConfigReader.read(String)" access="pub" jdoc="">
				<param name="fileName"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.PluginConfigReader.read(File)" access="pub" jdoc="Parses XML config of QSAdmin Plugin">
				<param name="input"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.DefaultDataMode" intfc="n" abs="n" inn="n" sloc="57" jdoc="This class encapsulate default DataMode for ClientHandler. The xml is &amp;lt;default-data-mode&amp;gt;...&amp;lt; default-data-mode&amp;gt; @author Akshathkumar Shetty @since 1.4.6">
			<field name="defaultDataModeIN" access="priv" jdoc=""/>
			<field name="defaultDataModeOUT" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.DefaultDataMode.DefaultDataMode()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DefaultDataMode.setDataModeIn(String)" access="pub" jdoc="Sets DataMode for DataType.IN Valid values are &amp;lt;code&amp;gt;STRING|BYTE|OBJECT|BINARY&amp;lt; code&amp;gt;">
				<param name="dataMode"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DefaultDataMode.getDataModeIn()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DefaultDataMode.setDataModeOut(String)" access="pub" jdoc="Sets DataMode for DataType.OUT Valid values are &amp;lt;code&amp;gt;STRING|BYTE|OBJECT|BINARY&amp;lt; code&amp;gt;">
				<param name="dataMode"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DefaultDataMode.getDataModeOut()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DefaultDataMode.setDataMode(DataMode, DataType)" access="pub" jdoc="Sets the default {@link DataMode} for the ClientHandler">
				<param name="dataMode"/>
				<param name="dataType"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DefaultDataMode.getDataMode(DataType)" access="pub" jdoc="Returns the default {@link DataMode} for the ClientHandler">
				<param name="dataType"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DefaultDataMode.toXML(String)" access="pub" jdoc="Returns XML config of this class.">
				<param name="pad"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.AccessConstraintConfig" intfc="n" abs="n" inn="n" sloc="34" jdoc="This class encapsulate the access constraints on servers running. The xml is &amp;lt;access-constraint&amp;gt;...&amp;lt; access-constraint&amp;gt;. @author Akshathkumar Shetty @since 1.3.3">
			<field name="logger" access="priv" jdoc=""/>
			<field name="ipFilterConfig" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.AccessConstraintConfig.getIpFilterConfig()" access="pub" jdoc="Returns the IpFilterConfig. @return IpFilterConfig">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AccessConstraintConfig.setIpFilterConfig(IpFilterConfig)" access="pub" jdoc="Sets the IpFilterConfig XML Tag: &amp;lt;ip-filter&amp;gt;&amp;lt; ip-filter&amp;gt; @param ipFilterConfig">
				<param name="ipFilterConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AccessConstraintConfig.toXML(String)" access="pub" jdoc="Returns XML config of this class.">
				<param name="pad"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AccessConstraintConfig.checkAccept(Socket)" access="pub" jdoc="Finds if the socket has access to connect to server. Based on the access constrains set. @exception SecurityException if access not allowed.">
				<param name="socket"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.DatabaseConnectionSet" intfc="n" abs="n" inn="n" sloc="27" jdoc="This class encapsulate the database connection set. The xml is &amp;lt;database-connection-set&amp;gt;...&amp;lt; database-connection-set&amp;gt; @author Akshathkumar Shetty @since 1.3">
			<field name="databaseConnectionSet" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.DatabaseConnectionSet.DatabaseConnectionSet()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DatabaseConnectionSet.addDatabaseConnection(DatabaseConnectionConfig)" access="pub" jdoc="Adds a DatabaseConnectionConfig object to the set.">
				<param name="dbcConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DatabaseConnectionSet.iterator()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DatabaseConnectionSet.toXML(String)" access="pub" jdoc="Returns XML config of this class. @since 1.3">
				<param name="pad"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.TrustStoreInfo" intfc="n" abs="n" inn="n" sloc="50" jdoc="This class encapsulate Trust Store. The example xml is &amp;lt;pre&amp;gt; .... &amp;lt;trust-store-info&amp;gt; &amp;lt;store-file&amp;gt;NONE&amp;lt; store-file&amp;gt; &amp;lt;store-password&amp;gt;&amp;lt; store-password&amp;gt; &amp;lt; trust-store-info&amp;gt; .... &amp;lt; pre&amp;gt; @see KeyStoreInfo @see SecureStore @see Secure @author Akshathkumar Shetty @since 1.4">
			<field name="storeFile" access="priv" jdoc=""/>
			<field name="storePassword" access="priv" jdoc=""/>
			<field name="type" access="priv" jdoc=""/>
			<field name="provider" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.TrustStoreInfo.setStoreFile(String)" access="pub" jdoc="Sets the store file path. This can be either absolute or relative(to config file) path to the store file. XML Tag: &amp;lt;store-file&amp;gt;NONE&amp;lt; store-file&amp;gt; @param storeFile store file. @see #getStoreFile">
				<param name="storeFile"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.TrustStoreInfo.getStoreFile()" access="pub" jdoc="Returns the store file path. This can be either absolute or relative(to config file) path to the store file. @see #setStoreFile">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.TrustStoreInfo.setStorePassword(String)" access="pub" jdoc="Sets the store password. XML Tag: &amp;lt;store-password&amp;gt;&amp;lt; store-password&amp;gt; @param storePassword store password @see #getStorePassword">
				<param name="storePassword"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.TrustStoreInfo.getStorePassword()" access="pub" jdoc="Returns store password. @see #setStorePassword">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.TrustStoreInfo.setType(String)" access="pub" jdoc="Sets the type of trust store. If not set, it will use value from SecureStore&amp;lt;br &amp;gt; XML Tag: &amp;lt;type&amp;gt;JKS&amp;lt; type&amp;gt; @param type of keystore. @see #getType">
				<param name="type"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.TrustStoreInfo.getType()" access="pub" jdoc="Returns the type of truststore. @see #setType">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.TrustStoreInfo.setProvider(String)" access="pub" jdoc="Sets the provider of trust store. If not set, it will use value from SecureStore&amp;lt;br &amp;gt; XML Tag: &amp;lt;provider&amp;gt;SUN&amp;lt; provider&amp;gt; @param provider of keystore. @see #getProvider">
				<param name="provider"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.TrustStoreInfo.getProvider()" access="pub" jdoc="Returns the provider of keystore. @see #setProvider">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.TrustStoreInfo.toXML(String)" access="pub" jdoc="Returns XML config of this class.">
				<param name="pad"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.ConfigReader" intfc="n" abs="n" inn="n" sloc="307" jdoc="This class reads the xml configuration and gives QuickServerConfig object. @author Akshathkumar Shetty @since 1.3">
			<field name="logger" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.ConfigReader.read(String)" access="pub" jdoc="Parses XML config of QuickServer of version 1.3 and above @since 1.3">
				<param name="fileName"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ConfigReader.read(File)" access="pub" jdoc="Parses XML config of QuickServer of version 1.3 and above @since 1.4">
				<comm cntt="digester.setNamespaceAware(true);"/>
				<comm cntt="String xsd = &amp;quot;&amp;quot; + new File(&amp;quot;quickserver_config.xsd&amp;quot;).toURI();"/>
				<comm cntt="digester.setSchema(xsd);"/>
				<comm cntt="&amp;lt;server-mode&amp;gt;"/>
				<comm cntt="&amp;lt; server-mode&amp;gt;"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="v1.4"/>
				<comm cntt="v1.4.5"/>
				<comm cntt="v1.3"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="&amp;lt;default-data-mode&amp;gt;"/>
				<comm cntt="&amp;lt; default-data-mode&amp;gt;"/>
				<comm cntt="&amp;lt;object-pool&amp;gt;"/>
				<comm cntt="&amp;lt;thread-object-pool&amp;gt;"/>
				<comm cntt="&amp;lt; thread-object-pool&amp;gt;"/>
				<comm cntt="&amp;lt;client-handler-object-pool&amp;gt;"/>
				<comm cntt="&amp;lt; client-handler-object-pool&amp;gt;"/>
				<comm cntt="&amp;lt;byte-buffer-object-pool&amp;gt;"/>
				<comm cntt="&amp;lt; byte-buffer-object-pool&amp;gt;"/>
				<comm cntt="&amp;lt;client-data-object-pool&amp;gt;"/>
				<comm cntt="&amp;lt; client-data-object-pool&amp;gt;"/>
				<comm cntt="&amp;lt; object-pool&amp;gt;"/>
				<comm cntt="&amp;lt;communication-logging&amp;gt;"/>
				<comm cntt="&amp;lt; communication-logging&amp;gt;"/>
				<comm cntt="&amp;lt;access-constraint&amp;gt;"/>
				<comm cntt="&amp;lt;ip-filter&amp;gt;"/>
				<comm cntt="&amp;lt;ip-collection&amp;gt;"/>
				<comm cntt="&amp;lt;ip-collection&amp;gt;"/>
				<comm cntt="&amp;lt;ip-filter&amp;gt;"/>
				<comm cntt="&amp;lt; access-constraint&amp;gt;"/>
				<comm cntt="&amp;lt;application-jar-path&amp;gt;"/>
				<comm cntt="&amp;lt;server-hooks&amp;gt;"/>
				<comm cntt="&amp;lt; server-hooks&amp;gt;"/>
				<comm cntt="&amp;lt;secure&amp;gt;"/>
				<comm cntt="&amp;lt;secure-store&amp;gt;"/>
				<comm cntt="&amp;lt;key-store-info&amp;gt;"/>
				<comm cntt="&amp;lt; key-store-info&amp;gt;"/>
				<comm cntt="&amp;lt;trust-store-info&amp;gt;"/>
				<comm cntt="&amp;lt; trust-store-info&amp;gt;"/>
				<comm cntt="&amp;lt; secure-store&amp;gt;"/>
				<comm cntt="&amp;lt; secure&amp;gt;"/>
				<comm cntt="&amp;lt;advanced-settings&amp;gt;"/>
				<comm cntt="&amp;lt; advanced-settings&amp;gt;"/>
				<comm cntt="&amp;lt;qsadmin-server&amp;gt;"/>
				<comm cntt="&amp;lt;server-mode&amp;gt;"/>
				<comm cntt="&amp;lt; server-mode&amp;gt;"/>
				<comm cntt="v1.4"/>
				<comm cntt="v1.4.5"/>
				<comm cntt="v1.3"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="v1.4.6"/>
				<comm cntt="&amp;lt;default-data-mode&amp;gt;"/>
				<comm cntt="&amp;lt; default-data-mode&amp;gt;"/>
				<comm cntt="&amp;lt;object-pool&amp;gt;"/>
				<comm cntt="&amp;lt;thread-object-pool&amp;gt;"/>
				<comm cntt="&amp;lt; thread-object-pool&amp;gt;"/>
				<comm cntt="&amp;lt;client-handler-object-pool&amp;gt;"/>
				<comm cntt="&amp;lt; client-handler-object-pool&amp;gt;"/>
				<comm cntt="&amp;lt;byte-buffer-object-pool&amp;gt;"/>
				<comm cntt="&amp;lt; byte-buffer-object-pool&amp;gt;"/>
				<comm cntt="&amp;lt;client-data-object-pool&amp;gt;"/>
				<comm cntt="&amp;lt; client-data-object-pool&amp;gt;"/>
				<comm cntt="&amp;lt; object-pool&amp;gt;"/>
				<comm cntt="&amp;lt;command-shell&amp;gt;"/>
				<comm cntt="&amp;lt; command-shell&amp;gt;"/>
				<comm cntt="&amp;lt;communication-logging&amp;gt;&amp;lt;enable&amp;gt;"/>
				<comm cntt="&amp;lt;access-constraint&amp;gt;"/>
				<comm cntt="&amp;lt;ip-filter&amp;gt;"/>
				<comm cntt="&amp;lt;ip-collection&amp;gt;"/>
				<comm cntt="&amp;lt;ip-collection&amp;gt;"/>
				<comm cntt="&amp;lt;ip-filter&amp;gt;"/>
				<comm cntt="&amp;lt; access-constraint&amp;gt;"/>
				<comm cntt="&amp;lt;server-hooks&amp;gt;"/>
				<comm cntt="&amp;lt; server-hooks&amp;gt;"/>
				<comm cntt="&amp;lt;secure&amp;gt;"/>
				<comm cntt="&amp;lt;secure-store&amp;gt;"/>
				<comm cntt="&amp;lt;key-store-info&amp;gt;"/>
				<comm cntt="&amp;lt; key-store-info&amp;gt;"/>
				<comm cntt="&amp;lt;trust-store-info&amp;gt;"/>
				<comm cntt="&amp;lt; trust-store-info&amp;gt;"/>
				<comm cntt="&amp;lt; secure-store&amp;gt;"/>
				<comm cntt="&amp;lt; secure&amp;gt;"/>
				<comm cntt="&amp;lt;advanced-settings&amp;gt;"/>
				<comm cntt="&amp;lt; advanced-settings&amp;gt;"/>
				<comm cntt="&amp;lt; qsadmin-server&amp;gt;"/>
				<comm cntt="&amp;lt;db-object-pool&amp;gt;"/>
				<comm cntt="&amp;lt;database-connection-set&amp;gt;"/>
				<comm cntt="&amp;lt;database-connection&amp;gt;"/>
				<comm cntt="&amp;lt; database-connection&amp;gt;"/>
				<comm cntt="&amp;lt; database-connection-set&amp;gt;"/>
				<comm cntt="&amp;lt;db-pool-util&amp;gt;"/>
				<comm cntt="&amp;lt; db-pool-util&amp;gt;"/>
				<comm cntt="&amp;lt; db-object-pool&amp;gt;"/>
				<comm cntt="&amp;lt;application-configuration&amp;gt;"/>
				<comm cntt="&amp;lt; application-configuration&amp;gt;"/>
				<comm cntt="&amp;lt;init-server-hooks&amp;gt;"/>
				<comm cntt="&amp;lt; init-server-hooks&amp;gt;"/>
				<param name="input"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ConfigReader.loadMissingApplicationConfiguration(QuickServerConfig)" access="priv" jdoc="">
				<comm cntt="check if any application-configuration had missing property-value"/>
				<param name="qsc"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ConfigReader.makeAbsoluteToConfig(String, QuickServerConfig)" access="pub" jdoc="Make the file passed absolute, relative to the location of configuration file that loaded QuickServerConfig object passed. @since 1.4">
				<param name="fileName"/>
				<param name="config"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.Property" intfc="n" abs="n" inn="n" sloc="22" jdoc="This class encapsulate the Property of Application Configuration. The xml is &amp;lt;property&amp;gt;...&amp;lt; property&amp;gt; @author Akshathkumar Shetty @since 1.3.2">
			<field name="name" access="priv" jdoc=""/>
			<field name="value" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.Property.Property()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Property.Property(String, String)" access="pub" jdoc="">
				<param name="name"/>
				<param name="value"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Property.getName()" access="pub" jdoc="@return name">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Property.setName(String)" access="pub" jdoc="@param name">
				<param name="name"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Property.getValue()" access="pub" jdoc="@return name">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.Property.setValue(String)" access="pub" jdoc="@param value">
				<param name="value"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.SecureStore" intfc="n" abs="n" inn="n" sloc="68" jdoc="This class encapsulate the setting that help in configuring a secure store. The example xml is &amp;lt;pre&amp;gt; .... &amp;lt;secure-store&amp;gt; &amp;lt;type&amp;gt;JKS&amp;lt; type&amp;gt; &amp;lt;algorithm&amp;gt;SunX509&amp;lt; algorithm&amp;gt; &amp;lt;provider&amp;gt;SUN&amp;lt; provider&amp;gt; &amp;lt;key-store-info&amp;gt; &amp;lt;store-file&amp;gt;&amp;lt; store-file&amp;gt; &amp;lt;store-password&amp;gt;&amp;lt; store-password&amp;gt; &amp;lt;key-password&amp;gt;&amp;lt; key-password&amp;gt; &amp;lt; key-store-info&amp;gt; &amp;lt;trust-store-info&amp;gt; &amp;lt;store-file&amp;gt;&amp;lt; store-file&amp;gt; &amp;lt;store-password&amp;gt;&amp;lt; store-password&amp;gt; &amp;lt; trust-store-info&amp;gt; &amp;lt;secure-store-manager&amp;gt;org.quickserver.security.SecureStoreManager&amp;lt; secure-store-manager&amp;gt; &amp;lt; secure-store&amp;gt; .... &amp;lt; pre&amp;gt; @see TrustStoreInfo @see KeyStoreInfo @see Secure @author Akshathkumar Shetty @since 1.4">
			<comm cntt="&amp;quot;SUN&amp;quot;;"/>
			<field name="type" access="priv" jdoc=""/>
			<field name="algorithm" access="priv" jdoc=""/>
			<field name="provider" access="priv" jdoc=""/>
			<field name="keyStoreInfo" access="priv" jdoc=""/>
			<field name="trustStoreInfo" access="priv" jdoc=""/>
			<field name="secureStoreManager" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.SecureStore.setType(String)" access="pub" jdoc="Sets the type of keystore. If not set, it will use &amp;lt;code&amp;gt;JKS&amp;lt; code&amp;gt;&amp;lt;br &amp;gt; XML Tag: &amp;lt;type&amp;gt;JKS&amp;lt; type&amp;gt; @param type of keystore. @see #getType">
				<param name="type"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.SecureStore.getType()" access="pub" jdoc="Returns the type of keystore. @see #setType">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.SecureStore.setAlgorithm(String)" access="pub" jdoc="Sets the algorithm for the QuickServer used for key management when run in a secure mode. If not set, it will use &amp;lt;code&amp;gt;SunX509&amp;lt; code&amp;gt;&amp;lt;br &amp;gt; XML Tag: &amp;lt;algorithm&amp;gt;SunX509&amp;lt; algorithm&amp;gt; @param algorithm for key management. @see #getAlgorithm">
				<param name="algorithm"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.SecureStore.getAlgorithm()" access="pub" jdoc="Returns the algorithm for the QuickServer used for key management when run in a secure mode. @see #setAlgorithm">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.SecureStore.setProvider(String)" access="pub" jdoc="Sets the provider of keystore. Recommended not set, it will auto pick.&amp;lt;br &amp;gt; XML Tag: &amp;lt;provider&amp;gt;SUN&amp;lt; provider&amp;gt; @param provider of keystore. @see #getProvider">
				<param name="provider"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.SecureStore.getProvider()" access="pub" jdoc="Returns the provider of keystore. @see #setProvider">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.SecureStore.setKeyStoreInfo(KeyStoreInfo)" access="pub" jdoc="Sets KeyStore information XML Tag: &amp;lt;key-store-info&amp;gt;&amp;lt; key-store-info&amp;gt; @param keyStoreInfo key store information @see #getKeyStoreInfo">
				<param name="keyStoreInfo"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.SecureStore.getKeyStoreInfo()" access="pub" jdoc="Returns KeyStore information. @see #setKeyStoreInfo">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.SecureStore.setTrustStoreInfo(TrustStoreInfo)" access="pub" jdoc="Sets TrustStore information XML Tag: &amp;lt;trust-store-info&amp;gt;&amp;lt; trust-store-info&amp;gt; @param trustStoreInfo trust store information @see #getTrustStoreInfo">
				<param name="trustStoreInfo"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.SecureStore.getTrustStoreInfo()" access="pub" jdoc="Returns TrustStore information. @see #setTrustStoreInfo">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.SecureStore.setSecureStoreManager(String)" access="pub" jdoc="Sets the SecureStoreManager class name. If not set, it will use &amp;lt;code&amp;gt;org.quickserver.security.SecureStoreManager&amp;lt; code&amp;gt;&amp;lt;br &amp;gt; XML Tag: &amp;lt;secure-store-manager&amp;gt;org.quickserver.security.SecureStoreManager&amp;lt; secure-store-manager&amp;gt; @param className the fully qualified name of the class that extends {@link org.quickserver.security.SecureStoreManager} @see #getSecureStoreManager @see org.quickserver.security.SecureStoreManager @since 1.4">
				<param name="className"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.SecureStore.getSecureStoreManager()" access="pub" jdoc="Returns the SecureStoreManager class. @see #setSecureStoreManager @see org.quickserver.security.SecureStoreManager @since 1.4">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.SecureStore.toXML(String)" access="pub" jdoc="Returns XML config of this class.">
				<param name="pad"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.DatabaseConnectionConfig" intfc="n" abs="n" inn="n" sloc="54" jdoc="This class encapsulate the database connection configuration. The xml is &amp;lt;database-connection&amp;gt;...&amp;lt; database-connection&amp;gt; @author Akshathkumar Shetty @since 1.3">
			<field name="id" access="priv" jdoc=""/>
			<field name="driver" access="priv" jdoc=""/>
			<field name="url" access="priv" jdoc=""/>
			<field name="username" access="priv" jdoc=""/>
			<field name="password" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.DatabaseConnectionConfig.getId()" access="pub" jdoc="Returns the id. @return id that identifies the connection.">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DatabaseConnectionConfig.setId(String)" access="pub" jdoc="Sets the id. XML Tag: &amp;lt;id&amp;gt;&amp;lt; id&amp;gt; @param id for this connection.">
				<param name="id"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DatabaseConnectionConfig.getDriver()" access="pub" jdoc="Returns the database driver. @return driver that driver class">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DatabaseConnectionConfig.setDriver(String)" access="pub" jdoc="Sets the database driver. XML Tag: &amp;lt;driver&amp;gt;&amp;lt; driver&amp;gt; @param driver that driver class">
				<param name="driver"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DatabaseConnectionConfig.getUrl()" access="pub" jdoc="Returns the url. @return URl for this connection.">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DatabaseConnectionConfig.setUrl(String)" access="pub" jdoc="Sets the url. XML Tag: &amp;lt;url&amp;gt;&amp;lt; url&amp;gt; @param url for this connection.">
				<param name="url"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DatabaseConnectionConfig.getUsername()" access="pub" jdoc="Returns the username @return username for this connection.">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DatabaseConnectionConfig.setUsername(String)" access="pub" jdoc="Sets the username. XML Tag: &amp;lt;username&amp;gt;&amp;lt; username&amp;gt; @param username for this connection.">
				<param name="username"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DatabaseConnectionConfig.getPassword()" access="pub" jdoc="Returns the password. @return password for this connection.">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DatabaseConnectionConfig.setPassword(String)" access="pub" jdoc="Sets the password. XML Tag: &amp;lt;password&amp;gt;&amp;lt; password&amp;gt; @param password for this connection.">
				<param name="password"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.DatabaseConnectionConfig.toXML(String)" access="pub" jdoc="Returns XML config of this class. @since 1.3">
				<param name="pad"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.QSAdminServerConfig" intfc="n" abs="n" inn="n" sloc="99" jdoc="This class encapsulate the configuration of QSAdminServer. This class is used by {@link org.quickserver.net.server.QuickServer#configQuickServer} and {@link org.quickserver.net.server.QuickServer#initService} method to initialise QSAdminServer. @author Akshathkumar Shetty @since 1.2">
			<field name="commandPlugin" access="priv" jdoc=""/>
			<field name="commandShellEnabled" access="priv" jdoc=""/>
			<field name="commandShellPromptName" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminServerConfig.QSAdminServerConfig()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminServerConfig.setCommandPlugin(String)" access="pub" jdoc="Set the CommandPlugin for QSAdminServer class which plugs in into CommandHandler of QsAdminServer,it will be null if not set. XML Tag: &amp;lt;command-plugin&amp;gt;&amp;lt; command-plugin&amp;gt;">
				<param name="plugin"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminServerConfig.getCommandPlugin()" access="pub" jdoc="Gets the CommandPlugin for QSAdminServer class which plugsin into CommandHandler of QsAdminServer,it will be null if not set.">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminServerConfig.setCommandShellEnable(String)" access="pub" jdoc="Set the CommandShellEnable flag for QSAdminServer XML Tag: &amp;lt;command-shell&amp;gt;&amp;lt;enable&amp;gt;true&amp;lt; enable&amp;gt;&amp;lt; command-shell&amp;gt; Allowed values = &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; | &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; @since 1.3.2">
				<param name="enable"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminServerConfig.getCommandShellEnable()" access="pub" jdoc="Gets the CommandShellEnable flag for QSAdminServer @since 1.3.2">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminServerConfig.setCommandShellPromptName(String)" access="pub" jdoc="Set the PromptName for QSAdminShell XML Tag: &amp;lt;command-shell&amp;gt;&amp;lt;prompt-name&amp;gt;true&amp;lt; prompt-name&amp;gt;&amp;lt; command-shell&amp;gt; Default values = &amp;lt;code&amp;gt;QSAdmin&amp;lt; code&amp;gt; @since 1.3.2">
				<param name="commandShellPromptName"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminServerConfig.getCommandShellPromptName()" access="pub" jdoc="Gets the PromptName for QSAdminShell @since 1.3.2">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminServerConfig.toXML(String)" access="pub" jdoc="Returns XML config of this class. @since 1.3">
				<comm cntt="Not used. Use main QS console logging if(getConsoleLoggingLevel()!=null) sb.append(pad+&amp;quot;\t&amp;lt;console-logging-level&amp;gt;&amp;quot;+getConsoleLoggingLevel()+&amp;quot;&amp;lt; console-logging-level&amp;gt;\n&amp;quot;); if(getConsoleLoggingFormatter()!=null) sb.append(pad+&amp;quot;\t&amp;lt;console-logging-formatter&amp;gt;&amp;quot;+getConsoleLoggingFormatter()+&amp;quot;&amp;lt; consoleLoggingFormatter&amp;gt;\n&amp;quot;);"/>
				<param name="pad"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminServerConfig.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.QSAdminPluginConfig" intfc="n" abs="n" inn="n" sloc="54" jdoc="This class encapsulate the QSAdmin Plugin configuration. The xml is &amp;lt;qsadmin-plugin&amp;gt;...&amp;lt; qsadmin-plugin&amp;gt; @author Akshathkumar Shetty @since 1.3.2">
			<field name="name" access="priv" jdoc=""/>
			<field name="desc" access="priv" jdoc=""/>
			<field name="type" access="priv" jdoc=""/>
			<field name="mainClass" access="priv" jdoc=""/>
			<field name="active" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminPluginConfig.getDesc()" access="pub" jdoc="@return description">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminPluginConfig.setDesc(String)" access="pub" jdoc="@param desc">
				<param name="desc"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminPluginConfig.setActive(String)" access="pub" jdoc="@param active Valid Values: &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; or &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;">
				<param name="active"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminPluginConfig.getActive()" access="pub" jdoc="Returns active flag.">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminPluginConfig.getMainClass()" access="pub" jdoc="@return MainClass">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminPluginConfig.setMainClass(String)" access="pub" jdoc="@param mainClass">
				<param name="mainClass"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminPluginConfig.getName()" access="pub" jdoc="@return name of the plugin">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminPluginConfig.setName(String)" access="pub" jdoc="@param name">
				<param name="name"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminPluginConfig.getType()" access="pub" jdoc="Returns class which plugin extends or implements. @return type of plugin.">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminPluginConfig.setType(String)" access="pub" jdoc="@param type of class which plugin extends or implements.">
				<param name="type"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.QSAdminPluginConfig.toXML(String)" access="pub" jdoc="Returns XML config of this class. @since 1.3">
				<param name="pad"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.ClientHandlerObjectPoolConfig" intfc="n" abs="n" inn="n" sloc="20" jdoc="This class encapsulate the ClientHandler Object pool configuration. The xml is &amp;lt;client-handler-object-pool&amp;gt;...&amp;lt; client-handler-object-pool&amp;gt; @author Akshathkumar Shetty">
			<mth name="/main/:org.quickserver.util.xmlreader.ClientHandlerObjectPoolConfig.ClientHandlerObjectPoolConfig()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ClientHandlerObjectPoolConfig.ClientHandlerObjectPoolConfig(PoolConfig)" access="pub" jdoc="">
				<param name="poolConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ClientHandlerObjectPoolConfig.toXML(String)" access="pub" jdoc="Returns XML config of this class.">
				<param name="pad"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.ApplicationConfiguration" intfc="n" abs="n" inn="n" sloc="39" jdoc="This class encapsulate the Application Configuration. The example xml is &amp;lt;pre&amp;gt; &amp;lt;quickserver&amp;gt; .... &amp;lt;application-configuration&amp;gt; &amp;lt;property&amp;gt; &amp;lt;property-name&amp;gt;FTP_ROOT&amp;lt; property-name&amp;gt; &amp;lt;property-value&amp;gt;c:\&amp;lt; property-value&amp;gt; &amp;lt; property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;property-name&amp;gt;Server Name&amp;lt; property-name&amp;gt; &amp;lt;property-value&amp;gt;My Server&amp;lt; property-value&amp;gt; &amp;lt; property&amp;gt; &amp;lt; application-configuration&amp;gt; .... &amp;lt; quickserver&amp;gt; &amp;lt; pre&amp;gt; @author Akshathkumar Shetty @since 1.3.2">
			<comm cntt="OR console"/>
			<field name="promptType" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.ApplicationConfiguration.setPromptType(String)" access="pub" jdoc="Sets the PromptType. XML Tag: &amp;lt;prompt-type&amp;gt;true&amp;lt; prompt-typ&amp;gt; Allowed values = &amp;lt;code&amp;gt;gui&amp;lt; code&amp;gt; | &amp;lt;code&amp;gt;console&amp;lt; code&amp;gt; @see #getPromptType @since 1.4.5">
				<param name="promptType"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ApplicationConfiguration.getPromptType()" access="pub" jdoc="Returns the PromptType @see #setPromptType @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ApplicationConfiguration.addProperty(Property)" access="pub" jdoc="Addes the {@link Property} passed to the HashMap">
				<param name="property"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ApplicationConfiguration.findProperty(String)" access="pub" jdoc="Finds if any {@link Property} is present. @return &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; if no Property was found.">
				<param name="name"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ApplicationConfiguration.toXML(String)" access="pub" jdoc="Returns XML config of this class.">
				<param name="pad"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.AdvancedSettings" intfc="n" abs="n" inn="n" sloc="93" jdoc="This class encapsulate Advanced Settings. The example xml is &amp;lt;pre&amp;gt; .... &amp;lt;advanced-settings&amp;gt; &amp;lt;charset&amp;gt;ISO-8859-1&amp;lt;charset&amp;gt; &amp;lt;byte-buffer-size&amp;gt;61440&amp;lt;byte-buffer-size&amp;gt; &amp;lt;use-direct-byte-buffer&amp;gt;true&amp;lt; use-direct-byte-buffer&amp;gt; &amp;lt;backlog&amp;gt;1024&amp;lt; backlog&amp;gt; &amp;lt;socket-linger&amp;gt;-1&amp;lt; socket-linger&amp;gt; &amp;lt;debug-non-blocking-mode&amp;gt;false&amp;lt; debug-non-blocking-mode&amp;gt; &amp;lt; advanced-settings&amp;gt; .... &amp;lt; pre&amp;gt; @author Akshathkumar Shetty @since 1.4.5">
			<field name="charset" access="priv" jdoc=""/>
			<field name="byteBufferSize" access="priv" jdoc=""/>
			<field name="backlog" access="priv" jdoc=""/>
			<field name="useDirectByteBuffer" access="priv" jdoc=""/>
			<field name="socketLinger" access="priv" jdoc=""/>
			<field name="debugNonBlockingMode" access="priv" jdoc=""/>
			<field name="clientIdentifierClass" access="priv" jdoc=""/>
			<field name="qSObjectPoolMakerClass" access="priv" jdoc=""/>
			<field name="maxThreadsForNioWrite" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.setCharset(String)" access="pub" jdoc="Sets the Charset to be used for String decoding and encoding. XML Tag: &amp;lt;charset&amp;gt;ISO-8859-1&amp;lt; charset&amp;gt; @param charset to be used for String decoding and encoding @see #getCharset">
				<param name="charset"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.getCharset()" access="pub" jdoc="Returns Charset to be used for String decoding and encoding.. @see #setCharset">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.setByteBufferSize(int)" access="pub" jdoc="Sets the ByteBuffer size to be used in ByteBuffer pool. XML Tag: &amp;lt;byte-buffer-size&amp;gt;65536&amp;lt; byte-buffer-size&amp;gt; @param byteBufferSize size to be used in ByteBuffer pool. @see #getByteBufferSize">
				<param name="byteBufferSize"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.getByteBufferSize()" access="pub" jdoc="Returns ByteBuffer size to be used in ByteBuffer pool. @see #setByteBufferSize">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.setBacklog(int)" access="pub" jdoc="Sets the listen backlog length for the QuickServer to listen on. If not set or set a value equal or less than 0, then the default value will be assumed.&amp;lt;br &amp;gt; XML Tag: &amp;lt;backlog&amp;gt;0&amp;lt; backlog&amp;gt; @param backlog The listen backlog length. @see #getBacklog">
				<param name="backlog"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.getBacklog()" access="pub" jdoc="Returns the listen backlog length for the QuickServer. @see #setBacklog">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.setUseDirectByteBuffer(boolean)" access="pub" jdoc="Sets the UseDirectByteBuffer flag. If not set, it will use &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;&amp;lt;br &amp;gt; XML Tag: &amp;lt;use-direct-byte-buffer&amp;gt;true&amp;lt; use-direct-byte-buffer&amp;gt; @param flag UseDirectByteBuffer flag. @see #getUseDirectByteBuffer">
				<param name="flag"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.getUseDirectByteBuffer()" access="pub" jdoc="Returns UseDirectByteBuffer flag. @see #setUseDirectByteBuffer">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.setSocketLinger(int)" access="pub" jdoc="Enable SO_LINGER with the specified linger time in seconds. If linger time is less than &amp;lt;code&amp;gt;0&amp;lt; code&amp;gt; SO_LINGER will be disable. XML Tag: &amp;lt;socket-linger&amp;gt;-1&amp;lt; socket-linger&amp;gt; @param socketLinger if the linger value is negative SO_LINGER will be disable. @see #getSocketLinger">
				<param name="socketLinger"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.getSocketLinger()" access="pub" jdoc="Returns linger time in seconds. If SO_LINGER is disabled time will be negative; @see #setSocketLinger">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.setDebugNonBlockingMode(boolean)" access="pub" jdoc="Sets the DebugNonBlockingMode flag. If not set, it will use &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;&amp;lt;br &amp;gt; XML Tag: &amp;lt;debug-non-blocking-mode&amp;gt;false&amp;lt; debug-non-blocking-mode&amp;gt; @param debugNonBlockingMode DebugNonBlockingMode flag. @see #getDebugNonBlockingMode">
				<param name="debugNonBlockingMode"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.getDebugNonBlockingMode()" access="pub" jdoc="Returns DebugNonBlockingMode flag. @see #setDebugNonBlockingMode">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.setClientIdentifier(String)" access="pub" jdoc="Sets the ClientIdentifier class that implements {@link org.quickserver.net.server.ClientIdentifier}. XML Tag: &amp;lt;client-identifier&amp;gt;org.quickserver.net.server.impl.TryClientIdentifier&amp;lt; client-identifier&amp;gt; @param clientIdentifierClass the fully qualified name of the class that implements {@link org.quickserver.net.server.ClientIdentifier}. @see #getClientIdentifier">
				<param name="clientIdentifierClass"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.getClientIdentifier()" access="pub" jdoc="Returns the ClientIdentifier class that that implements {@link org.quickserver.net.server.ClientIdentifier}. @see #setClientIdentifier">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.setQSObjectPoolMaker(String)" access="pub" jdoc="Sets the QSObjectPoolMaker class that implements {@link org.quickserver.util.pool.QSObjectPoolMaker}. XML Tag: &amp;lt;qsobject-pool-maker&amp;gt;org.quickserver.util.pool.MakeQSObjectPool&amp;lt; qsobject-pool-maker&amp;gt; @param qSObjectPoolMakerClass the fully qualified name of the class that implements {@link org.quickserver.util.pool.QSObjectPoolMaker}. @see #getQSObjectPoolMaker">
				<param name="qSObjectPoolMakerClass"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.getQSObjectPoolMaker()" access="pub" jdoc="Returns the QSObjectPoolMaker class that implements {@link org.quickserver.util.pool.QSObjectPoolMaker}. @see #setQSObjectPoolMaker">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.setMaxThreadsForNioWrite(int)" access="pub" jdoc="Sets the maximum threads allowed for nio write. If set to 0 or less no limit is imposed. XML Tag: &amp;lt;max-threads-for-nio-write&amp;gt;10&amp;lt; max-threads-for-nio-write&amp;gt; @param maxThreadsForNioWrite maximum threads allowed for nio write @see #getMaxThreadsForNioWrite @since 1.4.6">
				<param name="maxThreadsForNioWrite"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.getMaxThreadsForNioWrite()" access="pub" jdoc="Returns the maximum threads allowed for nio write. @see #setMaxThreadsForNioWrite @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.AdvancedSettings.toXML(String)" access="pub" jdoc="Returns XML config of this class.">
				<param name="pad"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.KeyStoreInfo" intfc="n" abs="n" inn="n" sloc="42" jdoc="This class encapsulate Key Store. The example xml is &amp;lt;pre&amp;gt; .... &amp;lt;key-store-info&amp;gt; &amp;lt;store-file&amp;gt;NONE&amp;lt; store-file&amp;gt; &amp;lt;store-password&amp;gt;&amp;lt; store-password&amp;gt; &amp;lt;key-password&amp;gt;&amp;lt; key-password&amp;gt; &amp;lt; key-store-info&amp;gt; .... &amp;lt; pre&amp;gt; @see TrustStoreInfo @see SecureStore @see Secure @author Akshathkumar Shetty @since 1.4">
			<field name="storeFile" access="priv" jdoc=""/>
			<field name="storePassword" access="priv" jdoc=""/>
			<field name="keyPassword" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.KeyStoreInfo.setStoreFile(String)" access="pub" jdoc="Sets the store file path. This can be either absolute or relative(to config file) path to the store file. XML Tag: &amp;lt;store-file&amp;gt;NONE&amp;lt; store-file&amp;gt; @param storeFile store file. @see #getStoreFile">
				<param name="storeFile"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.KeyStoreInfo.getStoreFile()" access="pub" jdoc="Returns the store file path. This can be either absolute or relative(to config file) path to the store file. @see #setStoreFile">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.KeyStoreInfo.setStorePassword(String)" access="pub" jdoc="Sets the store password. XML Tag: &amp;lt;store-password&amp;gt;&amp;lt; store-password&amp;gt; @param storePassword store password @see #getStorePassword">
				<param name="storePassword"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.KeyStoreInfo.getStorePassword()" access="pub" jdoc="Returns store password. @see #setStorePassword">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.KeyStoreInfo.setKeyPassword(String)" access="pub" jdoc="Sets the key password. XML Tag: &amp;lt;key-password&amp;gt;&amp;lt; key-password&amp;gt; @param keyPassword key password @see #getKeyPassword">
				<param name="keyPassword"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.KeyStoreInfo.getKeyPassword()" access="pub" jdoc="Returns key password. @see #setKeyPassword">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.KeyStoreInfo.toXML(String)" access="pub" jdoc="Returns XML config of this class.">
				<param name="pad"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.InitServerHooks" intfc="n" abs="n" inn="n" sloc="19" jdoc="This class encapsulate the init Server Hooks. Called just after server loads the xml configuration file. Can be using to set up loggers. The example xml is &amp;lt;pre&amp;gt; .... &amp;lt;init-server-hooks&amp;gt; &amp;lt;class-name&amp;gt;package1.Class1&amp;lt; class-name&amp;gt; &amp;lt;class-name&amp;gt;package1.Class2&amp;lt; class-name&amp;gt; &amp;lt; init-server-hooks&amp;gt; .... &amp;lt; pre&amp;gt; @see org.quickserver.net.InitServerHook @see org.quickserver.util.xmlreader.ServerHooks @author Akshathkumar Shetty @since 1.4">
			<mth name="/main/:org.quickserver.util.xmlreader.InitServerHooks.addClassName(String)" access="pub" jdoc="Addes the class to init server hooks.">
				<param name="className"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.InitServerHooks.toXML(String)" access="pub" jdoc="Returns XML config of this class.">
				<param name="pad"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.BasicServerConfig" intfc="n" abs="n" inn="n" sloc="264" jdoc="This class encapsulate the basic configuration of QuickServer. @author Akshathkumar Shetty @since 1.2 @see org.quickserver.util.xmlreader.QuickServerConfig @see org.quickserver.util.xmlreader.QSAdminServerConfig">
			<comm cntt="v1.4.6"/>
			<comm cntt="v1.4.6"/>
			<comm cntt="v1.4.6"/>
			<comm cntt="v1.4.5"/>
			<comm cntt="1 min. socket timeout"/>
			<comm cntt="for object pool"/>
			<comm cntt="v1.3.3"/>
			<comm cntt="v1.4.0"/>
			<comm cntt="v1.4.5"/>
			<comm cntt="v1.4.6"/>
			<field name="clientAuthenticationHandler" access="priv" jdoc=""/>
			<field name="clientEventHandler" access="priv" jdoc=""/>
			<field name="clientExtendedEventHandler" access="priv" jdoc=""/>
			<field name="clientCommandHandler" access="priv" jdoc=""/>
			<field name="clientObjectHandler" access="priv" jdoc=""/>
			<field name="clientBinaryHandler" access="priv" jdoc=""/>
			<field name="clientData" access="priv" jdoc=""/>
			<field name="clientWriteHandler" access="priv" jdoc=""/>
			<field name="serverBanner" access="priv" jdoc=""/>
			<field name="name" access="priv" jdoc=""/>
			<field name="maxConnectionMsg" access="priv" jdoc=""/>
			<field name="timeoutMsg" access="priv" jdoc=""/>
			<field name="maxAuthTry" access="priv" jdoc=""/>
			<field name="maxAuthTryMsg" access="priv" jdoc=""/>
			<field name="port" access="priv" jdoc=""/>
			<field name="bindAddr" access="priv" jdoc=""/>
			<field name="maxConnection" access="priv" jdoc=""/>
			<field name="timeout" access="priv" jdoc=""/>
			<field name="consoleLoggingLevel" access="priv" jdoc=""/>
			<field name="consoleLoggingFormatter" access="priv" jdoc=""/>
			<field name="objectPoolConfig" access="priv" jdoc=""/>
			<field name="communicationLogging" access="priv" jdoc=""/>
			<field name="accessConstraintConfig" access="priv" jdoc=""/>
			<field name="serverHooks" access="priv" jdoc=""/>
			<field name="secure" access="priv" jdoc=""/>
			<field name="serverMode" access="priv" jdoc=""/>
			<field name="advancedSettings" access="priv" jdoc=""/>
			<field name="defaultDataMode" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getName()" access="pub" jdoc="Returns the name of the QuickServer @see #setName">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setName(String)" access="pub" jdoc="Sets the name for the QuickServer. XML Tag: &amp;lt;name&amp;gt;&amp;lt; name&amp;gt; @param name for the QuickServer @see #getName">
				<param name="name"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getServerBanner()" access="pub" jdoc="Returns the Server Banner of the QuickServer @see #setServerBanner">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setServerBanner(String)" access="pub" jdoc="Sets the serverBanner for the QuickServer that will be displayed on the standard output [console] when server starts. &amp;lt;br&amp;gt;&amp;nbsp;&amp;lt;br&amp;gt; To set welcome message to your client{@link org.quickserver.net.server.ClientEventHandler#gotConnected} XML Tag: &amp;lt;server-banner&amp;gt;&amp;lt; server-banner&amp;gt; @param banner for the QuickServer @see #getServerBanner">
				<param name="banner"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setPort(int)" access="pub" jdoc="Sets the port for the QuickServer to listen on. If not set, it will run on Port 9876&amp;lt;br &amp;gt; XML Tag: &amp;lt;port&amp;gt;&amp;lt; port&amp;gt; @param port to listen on. @see #getPort">
				<param name="port"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getPort()" access="pub" jdoc="Returns the port for the QuickServer @see #setPort">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setClientCommandHandler(String)" access="pub" jdoc="Sets the ClientCommandHandler class that interacts with client sockets. XML Tag: &amp;lt;client-command-handler&amp;gt;&amp;lt; client-command-handler&amp;gt; @param handler the fully qualified name of the class that implements {@link org.quickserver.net.server.ClientCommandHandler} @see #getClientCommandHandler">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setClientCommandHandler(ClientCommandHandler)" access="pub" jdoc="Sets the ClientCommandHandler class that interacts with client sockets. @since 1.4.6">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getClientCommandHandler()" access="pub" jdoc="Returns the ClientCommandHandler class that interacts with client sockets. @see #setClientCommandHandler">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setClientEventHandler(String)" access="pub" jdoc="Sets the ClientEventHandler class that gets notified of client events. XML Tag: &amp;lt;client-event-handler&amp;gt;&amp;lt; client-event-handler&amp;gt; @param handler the fully qualified name of the class that implements {@link org.quickserver.net.server.ClientEventHandler} @see #getClientEventHandler @since 1.4.6">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setClientEventHandler(ClientEventHandler)" access="pub" jdoc="Sets the ClientEventHandler class that gets notified of client events. @since 1.4.6">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getClientEventHandler()" access="pub" jdoc="Returns the ClientEventHandler class that gets notified of client events. @see #setClientEventHandler @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setClientExtendedEventHandler(String)" access="pub" jdoc="Sets the ClientExtendedEventHandler class that gets notified of client&amp;apos;s extended events. XML Tag: &amp;lt;client-extended-event-handler&amp;gt;&amp;lt; client-extended-event-handler&amp;gt; @param handler the fully qualified name of the class that implements {@link org.quickserver.net.server.ClientExtendedEventHandler} @see #getClientExtendedEventHandler @since 1.4.6">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setClientExtendedEventHandler(ClientExtendedEventHandler)" access="pub" jdoc="Sets the ClientExtendedEventHandler class that gets notified of client&amp;apos;s extended events. @since 1.4.6">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getClientExtendedEventHandler()" access="pub" jdoc="Returns the ClientExtendedEventHandler class that gets notified of client&amp;apos;s extended events. @see #setClientExtendedEventHandler @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setAuthenticator(String)" access="pub" jdoc="Sets the Authenticator class that handles the authentication of the client. XML Tag: &amp;lt;authenticator&amp;gt;&amp;lt; authenticator&amp;gt; @param authenticator the fully qualified name of the class that implements {@link org.quickserver.net.server.Authenticator}. @see #getAuthenticator @since 1.3">
				<param name="authenticator"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setAuthenticator(Authenticator)" access="pub" jdoc="Sets the Authenticator class that handles the authentication of the client. @since 1.4.6">
				<param name="authenticator"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getAuthenticator()" access="pub" jdoc="Returns the Authenticator class that handles the authentication of the client. @see #setAuthenticator @since 1.3">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setClientAuthenticationHandler(String)" access="pub" jdoc="Sets the ClientAuthenticationHandler class that handles the authentication of the client. XML Tag: &amp;lt;client-authentication-handler&amp;gt;&amp;lt; client-authentication-handler&amp;gt; @param clientAuthenticationHandler the fully qualified name of the class that implements {@link org.quickserver.net.server.ClientAuthenticationHandler}. @see #getClientAuthenticationHandler @since 1.4.6">
				<param name="clientAuthenticationHandler"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setClientAuthenticationHandler(ClientAuthenticationHandler)" access="pub" jdoc="Sets the ClientAuthenticationHandler class that handles the authentication of the client. @since 1.4.6">
				<param name="clientAuthenticationHandler"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getClientAuthenticationHandler()" access="pub" jdoc="Returns the ClientAuthenticationHandler class that handles the authentication of the client. @see #setClientAuthenticationHandler @since 1.4.6">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setClientData(String)" access="pub" jdoc="Sets the ClientData class that carries client data. XML Tag: &amp;lt;client-data&amp;gt;&amp;lt; client-data&amp;gt; @param data the fully qualified name of the class that extends {@link org.quickserver.net.server.ClientData}. @see #getClientData">
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setClientData(ClientData)" access="pub" jdoc="Sets the ClientData class that carries client data. @since 1.4.6">
				<param name="data"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getClientData()" access="pub" jdoc="Returns the ClientData class string that carries client data @return the fully qualified name of the class that implements {@link org.quickserver.net.server.ClientData}. @see #setClientData">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setTimeout(int)" access="pub" jdoc="Sets the Client Socket timeout in milliseconds. XML Tag: &amp;lt;timeout&amp;gt;&amp;lt; timeout&amp;gt; @param time client socket timeout in milliseconds. @see #getTimeout">
				<param name="time"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getTimeout()" access="pub" jdoc="Returns the Client Socket timeout in milliseconds. @see #setTimeout">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setMaxAuthTry(int)" access="pub" jdoc="Sets maximum allowed login attempts. XML Tag: &amp;lt;max-auth-try&amp;gt;&amp;lt; max-auth-try&amp;gt;">
				<param name="authTry"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getMaxAuthTry()" access="pub" jdoc="Returns maximum allowed login attempts. Default is : 5">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setMaxAuthTryMsg(String)" access="pub" jdoc="Sets message to be displayed when maximum allowed login attempts has reached. Default is : -ERR Max Auth Try Reached&amp;lt;br &amp;gt; XML Tag: &amp;lt;max-auth-try-msg&amp;gt;&amp;lt; max-auth-try-msg&amp;gt; @see #getMaxAuthTryMsg">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getMaxAuthTryMsg()" access="pub" jdoc="Returns message to be displayed when maximum allowed login attempts has reached. @see #getMaxAuthTryMsg">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setTimeoutMsg(String)" access="pub" jdoc="Sets timeout message. Default is : -ERR Timeout&amp;lt;br &amp;gt; XML Tag: &amp;lt;timeout-msg&amp;gt;&amp;lt; timeout-msg&amp;gt; @see #getTimeoutMsg">
				<param name="msg"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getTimeoutMsg()" access="pub" jdoc="Returns timeout message. @see #setTimeoutMsg">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setMaxConnection(long)" access="pub" jdoc="Sets the maximum number of client connection allowed.. XML Tag: &amp;lt;max-connection&amp;gt;&amp;lt; max-connection&amp;gt; @see #getMaxConnection">
				<param name="maxConnection"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getMaxConnection()" access="pub" jdoc="Returns the maximum number of client connection allowed. @see #setMaxConnection">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setMaxConnectionMsg(String)" access="pub" jdoc="Sets the message to be sent to any new client connected after maximum client connection has reached. Default is : &amp;lt;code&amp;gt;-ERR Server Busy. Max Connection Reached&amp;lt; code&amp;gt;&amp;lt;br &amp;gt; XML Tag: &amp;lt;max-connection-msg&amp;gt;&amp;lt; max-connection-msg&amp;gt; @see #getMaxConnectionMsg">
				<param name="maxConnectionMsg"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getMaxConnectionMsg()" access="pub" jdoc="Returns the message to be sent to any new client connected after maximum client connection has reached. @see #setMaxConnectionMsg">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setBindAddr(String)" access="pub" jdoc="Sets the Ip address to bind to. @param bindAddr argument can be used on a multi-homed host for a QuickServer that will only accept connect requests to one of its addresses. If not set, it will default accepting connections on any all local addresses. XML Tag: &amp;lt;bind-address&amp;gt;&amp;lt; bind-address&amp;gt; @see #getBindAddr">
				<param name="bindAddr"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getBindAddr()" access="pub" jdoc="Returns the Ip address binding to. @see #setBindAddr">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setClientObjectHandler(String)" access="pub" jdoc="Sets the ClientObjectHandler class that interacts with client sockets. XML Tag: &amp;lt;client-object-handler&amp;gt;&amp;lt; client-object-handler&amp;gt; @param handler object the fully qualified name of the class that implements {@link org.quickserver.net.server.ClientObjectHandler} @see #getClientObjectHandler">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setClientObjectHandler(ClientObjectHandler)" access="pub" jdoc="Sets the ClientObjectHandler class that interacts with client sockets. @since 1.4.6">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getClientObjectHandler()" access="pub" jdoc="Returns the ClientObjectHandler class that interacts with client sockets. @see #setClientObjectHandler">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setConsoleLoggingLevel(String)" access="pub" jdoc="Sets the console log handler level. XML Tag: &amp;lt;console-logging-level&amp;gt;&amp;lt; console-logging-level&amp;gt; @param level like INFO, FINE, CONFIG">
				<param name="level"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getConsoleLoggingLevel()" access="pub" jdoc="Returns the console log handler level.">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setConsoleLoggingFormatter(String)" access="pub" jdoc="Sets the console log handler formatter. XML Tag: &amp;lt;console-logging-formatter&amp;gt;&amp;lt; console-logging-formatter&amp;gt; @param formatter fully qualified name of the class that implements {@link java.util.logging.Formatter}">
				<param name="formatter"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getConsoleLoggingFormatter()" access="pub" jdoc="Returns the console log handler level.">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setObjectPoolConfig(ObjectPoolConfig)" access="pub" jdoc="Sets the ObjectPool Config object. XML Tag: &amp;lt;object-pool&amp;gt;&amp;lt; object-pool&amp;gt;">
				<param name="objectPoolConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getObjectPoolConfig()" access="pub" jdoc="Returns the ObjectPool Config object.">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setCommunicationLogging(boolean)" access="pub" jdoc="Sets the communication logging flag. @see #getCommunicationLoggingXML Tag: &amp;lt;communication-logging&amp;gt;&amp;lt;enable&amp;gt;true&amp;lt; enable&amp;gt;&amp;lt; communication-logging&amp;gt; Allowed values = &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; | &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; @since 1.3.2">
				<param name="enable"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getCommunicationLogging()" access="pub" jdoc="Returns the communication logging flag. @see #setCommunicationLogging @since 1.3.2">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setAccessConstraintConfig(AccessConstraintConfig)" access="pub" jdoc="Sets the Access constraints @since 1.3.3">
				<param name="accessConstraintConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getAccessConstraintConfig()" access="pub" jdoc="Returns Access constraints if present else &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;. @since 1.3.3">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setServerHooks(ServerHooks)" access="pub" jdoc="Sets the ServerHooks @since 1.3.3">
				<param name="serverHooks"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getServerHooks()" access="pub" jdoc="Returns ServerHooks if present else &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;. @since 1.3.3">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setSecure(Secure)" access="pub" jdoc="Sets the Secure setting for QuickServer @since 1.4.0">
				<param name="secure"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getSecure()" access="pub" jdoc="Returns Secure setting for QuickServer @since 1.4.0">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setClientBinaryHandler(String)" access="pub" jdoc="Sets the ClientBinaryHandler class that interacts with client sockets. XML Tag: &amp;lt;client-binary-handler&amp;gt;&amp;lt; client-binary-handler&amp;gt; @param handler the fully qualified name of the class that implements {@link org.quickserver.net.server.ClientBinaryHandler} @see #getClientBinaryHandler">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setClientBinaryHandler(ClientBinaryHandler)" access="pub" jdoc="Sets the ClientBinaryHandler class that interacts with client sockets. @since 1.4.6">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getClientBinaryHandler()" access="pub" jdoc="Returns the ClientBinaryHandler class that interacts with client sockets. @see #setClientBinaryHandler">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setServerMode(ServerMode)" access="pub" jdoc="Sets the ServerMode for the QuickServer. @param serverMode ServerMode object. @see #getServerMode @since 1.4.5">
				<param name="serverMode"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getServerMode()" access="pub" jdoc="Returns the ServerMode for the QuickServer. @see #setServerMode @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setClientWriteHandler(String)" access="pub" jdoc="Sets the ClientWriteHandler class that interacts with client sockets. XML Tag: &amp;lt;client-write-handler&amp;gt;&amp;lt; client-write-handler&amp;gt; @param handler the fully qualified name of the class that implements {@link org.quickserver.net.server.ClientWriteHandler} @see #getClientWriteHandler @since 1.4.5">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setClientWriteHandler(ClientWriteHandler)" access="pub" jdoc="Sets the ClientWriteHandler class that interacts with client sockets. @since 1.4.6">
				<param name="handler"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getClientWriteHandler()" access="pub" jdoc="Returns the ClientWriteHandler class that interacts with client sockets. @see #setClientWriteHandler">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setAdvancedSettings(AdvancedSettings)" access="pub" jdoc="Sets the AdvancedSettings for the QuickServer. @param advancedSettings AdvancedSettings object. @see #getAdvancedSettings @since 1.4.5">
				<param name="advancedSettings"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getAdvancedSettings()" access="pub" jdoc="Returns the AdvancedSettings for the QuickServer. @see #setAdvancedSettings @since 1.4.5">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.setDefaultDataMode(DefaultDataMode)" access="pub" jdoc="Sets the DefaultDataMode for the QuickServer. @param defaultDataMode DefaultDataMode object. @see #getDefaultDataMode @since 1.4.6">
				<param name="defaultDataMode"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.BasicServerConfig.getDefaultDataMode()" access="pub" jdoc="Returns the DefaultDataMode for the QuickServer. @see #setDefaultDataMode @since 1.4.6">
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.ClientDataObjectPoolConfig" intfc="n" abs="n" inn="n" sloc="20" jdoc="This class encapsulate the Thread Object pool configuration. The xml is &amp;lt;client-data-object-pool&amp;gt;...&amp;lt; client-data-object-pool&amp;gt; @author Akshathkumar Shetty">
			<mth name="/main/:org.quickserver.util.xmlreader.ClientDataObjectPoolConfig.ClientDataObjectPoolConfig()" access="pub" jdoc="">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ClientDataObjectPoolConfig.ClientDataObjectPoolConfig(PoolConfig)" access="pub" jdoc="">
				<param name="poolConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ClientDataObjectPoolConfig.toXML(String)" access="pub" jdoc="Returns XML config of this class.">
				<param name="pad"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.ServerMode" intfc="n" abs="n" inn="n" sloc="23" jdoc="This class encapsulate the servers mode. The xml is &amp;lt;server-mode&amp;gt;...&amp;lt; server-mode&amp;gt; @author Akshathkumar Shetty @since 1.4.5">
			<field name="blocking" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.ServerMode.getBlocking()" access="pub" jdoc="Returns the blocking mode enable flag. Default is &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;. @return blocking">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ServerMode.setBlocking(boolean)" access="pub" jdoc="Sets the blocking mode enable flag. XML Tag: &amp;lt;server-mode&amp;gt;&amp;lt;blocking&amp;gt;true&amp;lt; blocking&amp;gt;&amp;lt; server-mode&amp;gt; Allowed values = &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; | &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; @param blocking">
				<param name="blocking"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ServerMode.toXML(String)" access="pub" jdoc="Returns XML config of this class.">
				<param name="pad"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ServerMode.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.ObjectPoolConfig" intfc="n" abs="n" inn="n" sloc="62" jdoc="This class encapsulate the Object pool configuration. The xml is &amp;lt;object-pool&amp;gt;...&amp;lt; object-pool&amp;gt; @author Akshathkumar Shetty @since 1.3">
			<field name="threadObjectPoolConfig" access="priv" jdoc=""/>
			<field name="clientHandlerObjectPoolConfig" access="priv" jdoc=""/>
			<field name="byteBufferObjectPoolConfig" access="priv" jdoc=""/>
			<field name="clientDataObjectPoolConfig" access="priv" jdoc=""/>
			<field name="poolManager" access="priv" jdoc=""/>
			<mth name="/main/:org.quickserver.util.xmlreader.ObjectPoolConfig.getPoolManager()" access="pub" jdoc="Returns PoolManager object @return poolManager">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ObjectPoolConfig.setPoolManager(String)" access="pub" jdoc="@param poolManager">
				<param name="poolManager"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ObjectPoolConfig.getByteBufferObjectPoolConfig()" access="pub" jdoc="Returns ByteBufferObjectPoolConfig object @return byteBufferObjectPoolConfig">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ObjectPoolConfig.setByteBufferObjectPoolConfig(ByteBufferObjectPoolConfig)" access="pub" jdoc="@param byteBufferObjectPoolConfig">
				<param name="byteBufferObjectPoolConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ObjectPoolConfig.getClientHandlerObjectPoolConfig()" access="pub" jdoc="Returns ClientHandlerObjectPoolConfig object @return clientHandlerObjectPoolConfig">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ObjectPoolConfig.setClientHandlerObjectPoolConfig(ClientHandlerObjectPoolConfig)" access="pub" jdoc="@param clientHandlerObjectPoolConfig">
				<param name="clientHandlerObjectPoolConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ObjectPoolConfig.getThreadObjectPoolConfig()" access="pub" jdoc="Returns ThreadObjectPoolConfig object @return threadObjectPoolConfig">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ObjectPoolConfig.setThreadObjectPoolConfig(ThreadObjectPoolConfig)" access="pub" jdoc="@param threadObjectPoolConfig">
				<param name="threadObjectPoolConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ObjectPoolConfig.getClientDataObjectPoolConfig()" access="pub" jdoc="Returns ClientDataObjectPoolConfig object @return clientDataObjectPoolConfig">
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ObjectPoolConfig.setClientDataObjectPoolConfig(ClientDataObjectPoolConfig)" access="pub" jdoc="@param clientDataObjectPoolConfig">
				<param name="clientDataObjectPoolConfig"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ObjectPoolConfig.toXML(String)" access="pub" jdoc="Returns XML config of this class.">
				<param name="pad"/>
			</mth>
		</class>
		<class name="/main/:org.quickserver.util.xmlreader.ServerHooks" intfc="n" abs="n" inn="n" sloc="19" jdoc="This class encapsulate the Server Hooks. These are event listeners to the QuickServer. The example xml is &amp;lt;pre&amp;gt; .... &amp;lt;server-hooks&amp;gt; &amp;lt;class-name&amp;gt;package1.Class1&amp;lt; class-name&amp;gt; &amp;lt;class-name&amp;gt;package1.Class2&amp;lt; class-name&amp;gt; &amp;lt; server-hooks&amp;gt; .... &amp;lt; pre&amp;gt; @see org.quickserver.net.ServerHook @see org.quickserver.util.xmlreader.InitServerHooks @author Akshathkumar Shetty @since 1.3.3">
			<mth name="/main/:org.quickserver.util.xmlreader.ServerHooks.addClassName(String)" access="pub" jdoc="Addes the class to server hooks">
				<param name="className"/>
			</mth>
			<mth name="/main/:org.quickserver.util.xmlreader.ServerHooks.toXML(String)" access="pub" jdoc="Returns XML config of this class.">
				<param name="pad"/>
			</mth>
		</class>
	</pkg>
</java-project>