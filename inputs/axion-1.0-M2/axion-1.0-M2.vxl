<?xml version="1.0" encoding="UTF-8"?>
<java-project id="default" name="axion-1.0-M2" revision="axion-1.0-M2">
	<pkg name="/:org.axiondb">
		<class name="/:org.axiondb.IndexFactory" intfc="y" abs="n" inn="n" sloc="3" jdoc="A simple factory for creating {@link Index} instances. @version $Revision: 1.3 $ $Date: 2002 12 17 17:02:44 $">
			<mth name="/:org.axiondb.IndexFactory.makeNewInstance(String, Column, boolean)" access="pub" jdoc="">
				<param name="name"/>
				<param name="col"/>
				<param name="unique"/>
			</mth>
		</class>
		<class name="/:org.axiondb.LeafWhereNode" intfc="n" abs="n" inn="n" sloc="70" jdoc="A {@link WhereNode} representing a comparison between two columns and or literal values via some {@link ComparisonOperator}. @version $Revision: 1.7 $ $Date: 2003 07 09 21:48:48 $ @author Rodney Waldhoff @author Amrish Lal @author Rahul Dwivedi @author Chuck Burdick">
			<field name="_left" access="priv" jdoc=""/>
			<field name="_operator" access="priv" jdoc=""/>
			<field name="_right" access="priv" jdoc=""/>
			<const name="RETURN_TYPE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.LeafWhereNode.LeafWhereNode(Selectable, ComparisonOperator, Selectable)" access="pub" jdoc="">
				<param name="left"/>
				<param name="op"/>
				<param name="right"/>
			</mth>
			<mth name="/:org.axiondb.LeafWhereNode.evaluate(RowDecorator)" access="pub" jdoc="">
				<comm cntt="convert literal to appropriate type for comparision"/>
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.LeafWhereNode.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.LeafWhereNode.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.LeafWhereNode.getLabel()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.LeafWhereNode.getLeft()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.LeafWhereNode.setLeft(Selectable)" access="pub" jdoc="">
				<param name="left"/>
			</mth>
			<mth name="/:org.axiondb.LeafWhereNode.getRight()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.LeafWhereNode.setRight(Selectable)" access="pub" jdoc="">
				<param name="right"/>
			</mth>
			<mth name="/:org.axiondb.LeafWhereNode.getOperator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.LeafWhereNode.setOperator(ComparisonOperator)" access="pub" jdoc="">
				<param name="op"/>
			</mth>
			<mth name="/:org.axiondb.LeafWhereNode.isColumnColumn()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.LeafWhereNode.isColumnLiteral()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.LeafWhereNode.isLiteralLiteral()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.LeafWhereNode.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.Transaction" intfc="y" abs="n" inn="n" sloc="10" jdoc="A database transaction. @version $Revision: 1.8 $ $Date: 2002 12 16 22:18:29 $ @author Rodney Waldhoff">
			<const name="STATE_OPEN" access="pub" jdoc="Open (neither committed nor aborted yet)."/>
			<const name="STATE_COMMITTED" access="pub" jdoc="Committed, but not yet applied."/>
			<const name="STATE_ABORTED" access="pub" jdoc="Aborted."/>
			<const name="STATE_APPLIED" access="pub" jdoc="Applied."/>
			<mth name="/:org.axiondb.Transaction.getOpenOnTransaction()" access="pub" jdoc="Get the {@link Database} upon which I am open (i.e., the state to which we will return to if I am rolled back. Note that this may be another &amp;lt;code&amp;gt;Transaction&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.Transaction.getState()" access="pub" jdoc="Return my current transaction state. Returns one of {@link #STATE_OPEN}, {@link #STATE_COMMITTED}, {@link #STATE_ABORTED}, {@link #STATE_APPLIED}.">
			</mth>
			<mth name="/:org.axiondb.Transaction.getModifiedTables()" access="pub" jdoc="Return a {@link Set} of {@link Table}s that have been modified thus far in this transaction.">
			</mth>
			<mth name="/:org.axiondb.Transaction.getReadTables()" access="pub" jdoc="Return a {@link Set} of {@link Table}s that have been read thus far in this transaction.">
			</mth>
		</class>
		<class name="/:org.axiondb.ComparisonOperator" intfc="n" abs="y" inn="n" sloc="113" jdoc="A comparison operator, like &amp;lt;code&amp;gt;==&amp;lt; code&amp;gt; or &amp;lt;code&amp;gt;&amp;gt;=&amp;lt; code&amp;gt;. @version $Revision: 1.6 $ $Date: 2002 12 16 22:18:29 $ @author Chuck Burdick @author Rodney Waldhoff @author Rob Oxspring">
			<const name="EQUAL" access="pub" jdoc="The equality comparison (&amp;lt;code&amp;gt;==&amp;lt; code&amp;gt;)."/>
			<const name="NOT_EQUAL" access="pub" jdoc="The inequality comparison (&amp;lt;code&amp;gt;!=&amp;lt; code&amp;gt;)."/>
			<const name="GREATER_THAN" access="pub" jdoc="The strictly greater than comparison (&amp;lt;code&amp;gt;&amp;gt;&amp;lt; code&amp;gt;)."/>
			<const name="LESS_THAN" access="pub" jdoc="The strictly less than comparison (&amp;lt;code&amp;gt;&amp;lt;&amp;lt; code&amp;gt;)."/>
			<const name="GREATER_THAN_OR_EQUAL" access="pub" jdoc="The greater than or equality comparison (&amp;lt;code&amp;gt;&amp;gt;=&amp;lt; code&amp;gt;)."/>
			<const name="LESS_THAN_OR_EQUAL" access="pub" jdoc="The less than or equality comparison (&amp;lt;code&amp;gt;&amp;lt;=&amp;lt; code&amp;gt;)."/>
			<const name="IS_NULL" access="pub" jdoc="The &amp;lt;code&amp;gt;NULL&amp;lt; code&amp;gt; comparison (&amp;lt;code&amp;gt;IS NULL&amp;lt; code&amp;gt;)."/>
			<const name="IS_NOT_NULL" access="pub" jdoc="The &amp;lt;code&amp;gt;NOT NULL&amp;lt; code&amp;gt; comparison (&amp;lt;code&amp;gt;IS NOT NULL&amp;lt; code&amp;gt;)."/>
			<const name="_id" access="priv" jdoc=""/>
			<field name="_name" access="priv" jdoc=""/>
			<field name="_nextId" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.ComparisonOperator.ComparisonOperator(String)" access="priv" jdoc="Private constructor. All instances are singletons, and enumerated in this class.">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.ComparisonOperator.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.ComparisonOperator.equals(Object)" access="pub" jdoc="">
				<comm cntt="XXX ANSWER ME XXX"/>
				<comm cntt="would (this == that) suffice?"/>
				<param name="that"/>
			</mth>
			<mth name="/:org.axiondb.ComparisonOperator.hashCode()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.ComparisonOperator.compare(Object, Object, Comparator)" access="pub" jdoc="Evaluate this comparision against the given Objects using the given Comparator.">
				<param name="left"/>
				<param name="right"/>
				<param name="comparator"/>
			</mth>
			<mth name="/:org.axiondb.ComparisonOperator.flip()" access="pub" jdoc="Return the equivalent ComparisonOperator if my arguments were reversed. In other words, &amp;lt;code&amp;gt;op.compare(&amp;lt;i&amp;gt;a&amp;lt; i&amp;gt;,&amp;lt;i&amp;gt;b&amp;lt; i&amp;gt;,&amp;lt;i&amp;gt;comparator&amp;lt; i&amp;gt;)&amp;lt; code&amp;gt; is &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; iff &amp;lt;code&amp;gt;op.flip().compare(&amp;lt;i&amp;gt;b&amp;lt; i&amp;gt;,&amp;lt;i&amp;gt;a&amp;lt; i&amp;gt;,&amp;lt;i&amp;gt;comparator&amp;lt; i&amp;gt;)&amp;lt; code&amp;gt; is also &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;.">
			</mth>
		</class>
		<class name="/:org.axiondb.Database" intfc="y" abs="n" inn="n" sloc="25" jdoc="An Axion database. @version $Revision: 1.22 $ $Date: 2003 03 27 18:35:26 $ @author Rodney Waldhoff @author Chuck Burdick @author Amrish Lal">
			<mth name="/:org.axiondb.Database.getName()" access="pub" jdoc="Returns the name of this &amp;lt;code&amp;gt;Database&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.Database.getTable(String)" access="pub" jdoc="Get the specified {@link Table}, or &amp;lt;tt&amp;gt;null&amp;lt; tt&amp;gt; if no such table can be found. &amp;lt;p&amp;gt; Table name matching is case-insensitive.">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.Database.getTable(TableIdentifier)" access="pub" jdoc="Get the specified {@link Table}, or &amp;lt;tt&amp;gt;null&amp;lt; tt&amp;gt; if no such table can be found. &amp;lt;p&amp;gt; Table name matching is case-insensitive.">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.Database.dropTable(String)" access="pub" jdoc="Drop the specified {@link Table} from this database. &amp;lt;p&amp;gt; Table name matching is case-insensitive.">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.Database.addTable(Table)" access="pub" jdoc="Add the given {@link Table} to this database.">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.Database.getDataType(String)" access="pub" jdoc="Get the {@link DataType} currently registered for the given name, or &amp;lt;tt&amp;gt;null&amp;lt; tt&amp;gt;.">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.Database.getIndexFactory(String)" access="pub" jdoc="Get the {@link IndexFactory} currently registered for the given name, or &amp;lt;tt&amp;gt;null&amp;lt; tt&amp;gt;.">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.Database.getTableFactory(String)" access="pub" jdoc="Get the {@link TableFactory} currently registered for the given name, or &amp;lt;tt&amp;gt;null&amp;lt; tt&amp;gt;.">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.Database.getTableDirectory()" access="pub" jdoc="Get the directory into which table information is stored, or &amp;lt;tt&amp;gt;null&amp;lt; tt&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.Database.resolveSelectable(Selectable, TableIdentifier[])" access="pub" jdoc="&amp;quot;Resolve&amp;quot; the given {@link Selectable} relative to the given list of {@link TableIdentifier tables}, converting aliased or relative references into absolute ones.">
				<param name="selectable"/>
				<param name="tables"/>
			</mth>
			<mth name="/:org.axiondb.Database.resolveFromNode(FromNode, TableIdentifier[])" access="pub" jdoc="">
				<param name="from"/>
				<param name="tables"/>
			</mth>
			<mth name="/:org.axiondb.Database.resolveWhereNode(WhereNode, TableIdentifier[])" access="pub" jdoc="&amp;quot;Resolve&amp;quot; the {@link Selectable}s within the given {@link WhereNode} tree, relative to the given list of {@link TableIdentifier tables}, converting aliased or relative references into absolute ones.">
				<param name="where"/>
				<param name="tables"/>
			</mth>
			<mth name="/:org.axiondb.Database.checkpoint()" access="pub" jdoc="Make sure any modified state or data has been written to disk.">
			</mth>
			<mth name="/:org.axiondb.Database.shutdown()" access="pub" jdoc="Close this database and free any resources associated with it.">
			</mth>
			<mth name="/:org.axiondb.Database.remount(File)" access="pub" jdoc="Notify this database that its root directory has been moved to the given location. (E.g., the CD containing the data for a CD-resident database has changed drives.)">
				<param name="newdir"/>
			</mth>
			<mth name="/:org.axiondb.Database.isReadOnly()" access="pub" jdoc="Is this database read-only?">
			</mth>
			<mth name="/:org.axiondb.Database.createSequence(Sequence)" access="pub" jdoc="Create a numeric sequence">
				<param name="seq"/>
			</mth>
			<mth name="/:org.axiondb.Database.getSequence(String)" access="pub" jdoc="Get the specified {@link Sequence}, or &amp;lt;tt&amp;gt;null&amp;lt; tt&amp;gt; if no such sequence can be found. &amp;lt;p&amp;gt; Sequence name matching is case-insensitive.">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.Database.dropSequence(String)" access="pub" jdoc="Drop the specified {@link Sequence} from this database. &amp;lt;p&amp;gt; Sequence name matching is case-insensitive.">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.Database.getTransactionManager()" access="pub" jdoc="Get the {@link TransactionManager} for this database.">
			</mth>
			<mth name="/:org.axiondb.Database.tableAltered(Table)" access="pub" jdoc="Update metadata tables since this table has changed.">
				<param name="t"/>
			</mth>
			<mth name="/:org.axiondb.Database.addDatabaseModificationListener(DatabaseModificationListener)" access="pub" jdoc="Adds a listener to receive events on this database">
				<param name="l"/>
			</mth>
			<mth name="/:org.axiondb.Database.getDatabaseModificationListeners()" access="pub" jdoc="Returns all listeners set to receive events on this database">
			</mth>
		</class>
		<class name="/:org.axiondb.ConstraintViolationException" intfc="n" abs="n" inn="n" sloc="16" jdoc="Thrown when a {@link Constraint} has been violated. @version $Revision: 1.3 $ $Date: 2003 05 13 19:33:46 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.ConstraintViolationException.ConstraintViolationException(Constraint)" access="pub" jdoc="">
				<param name="c"/>
			</mth>
			<mth name="/:org.axiondb.ConstraintViolationException.ConstraintViolationException(String, Throwable)" access="pub" jdoc="">
				<param name="message"/>
				<param name="nested"/>
			</mth>
			<mth name="/:org.axiondb.ConstraintViolationException.toMessage(Constraint)" access="prot" jdoc="">
				<param name="c"/>
			</mth>
		</class>
		<class name="/:org.axiondb.WhereNode" intfc="y" abs="n" inn="n" sloc="3" jdoc="One part of a &amp;lt;code&amp;gt;WHERE&amp;lt; code&amp;gt; clause. @version $Revision: 1.3 $ $Date: 2003 04 17 23:58:38 $ @author Rodney Waldhoff @author Amrish Lal">
			<mth name="/:org.axiondb.WhereNode.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
		</class>
		<class name="/:org.axiondb.InWhereNode" intfc="n" abs="n" inn="n" sloc="40" jdoc="A {@link WhereNode} representing an membership test on a list of arguments. @version $Revision: 1.6 $ $Date: 2003 07 09 21:43:17 $ @author Chuck Burdick @author Amrish Lal">
			<field name="_log" access="priv" jdoc=""/>
			<field name="_left" access="priv" jdoc=""/>
			<field name="_els" access="priv" jdoc=""/>
			<const name="RETURN_TYPE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.InWhereNode.InWhereNode(Selectable, List)" access="pub" jdoc="Used to {@link #evaluate} whether the value of the {@link Selectable} is in the list of {@link Literal Literals}.">
				<param name="left"/>
				<param name="literals"/>
			</mth>
			<mth name="/:org.axiondb.InWhereNode.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.InWhereNode.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.InWhereNode.getLabel()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.InWhereNode.setLeft(Selectable)" access="pub" jdoc="">
				<param name="left"/>
			</mth>
			<mth name="/:org.axiondb.InWhereNode.getLeft()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.InWhereNode.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
		</class>
		<class name="/:org.axiondb.ColumnIdentifier" intfc="n" abs="n" inn="n" sloc="104" jdoc="An identifier for a column. &amp;lt;p&amp;gt; Column names and aliases always stored (and returned) in upper case. @version $Revision: 1.8 $ $Date: 2003 02 07 01:44:13 $ @author Rodney Waldhoff @author Chuck Burdick">
			<field name="_table" access="priv" jdoc="My {@link TableIdentifier}, if any."/>
			<field name="_column" access="priv" jdoc="My column name, if any."/>
			<field name="_columnAlias" access="priv" jdoc="My column alias, if any."/>
			<field name="_type" access="priv" jdoc="My {@link DataType}, if any."/>
			<mth name="/:org.axiondb.ColumnIdentifier.ColumnIdentifier(String)" access="pub" jdoc="@param column the local name of my column">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.ColumnIdentifier.ColumnIdentifier(TableIdentifier, String)" access="pub" jdoc="@param table my table, which may be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @param column my column">
				<param name="table"/>
				<param name="columnName"/>
			</mth>
			<mth name="/:org.axiondb.ColumnIdentifier.ColumnIdentifier(TableIdentifier, String, String)" access="pub" jdoc="@param table my table, which may be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @param column my column @param columnAlias the alias for my column, which may be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;">
				<param name="table"/>
				<param name="columnName"/>
				<param name="columnAlias"/>
			</mth>
			<mth name="/:org.axiondb.ColumnIdentifier.ColumnIdentifier(TableIdentifier, String, String, DataType)" access="pub" jdoc="@param table my table, which may be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @param column my column @param columnAlias the alias for my column, which may be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @param type the {@link DataType} of my column, which may be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;">
				<param name="table"/>
				<param name="columnName"/>
				<param name="columnAlias"/>
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.ColumnIdentifier.evaluate(RowDecorator)" access="pub" jdoc="Returns the value of the column I identify within the given &amp;lt;i&amp;gt;row&amp;lt; i&amp;gt;.">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.ColumnIdentifier.getLabel()" access="pub" jdoc="Returns my column alias or name.">
			</mth>
			<mth name="/:org.axiondb.ColumnIdentifier.setName(String)" access="priv" jdoc="Sets the name of this column, and the name of my table if the given name includes &amp;quot;&amp;lt;code&amp;gt;.&amp;lt; code&amp;gt;&amp;quot;.">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.ColumnIdentifier.getName()" access="pub" jdoc="Returns the name of my column, if any.">
			</mth>
			<mth name="/:org.axiondb.ColumnIdentifier.setAlias(String)" access="priv" jdoc="Sets my column alias name, if any.">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.ColumnIdentifier.getAlias()" access="pub" jdoc="Returns my column alias name, if any.">
			</mth>
			<mth name="/:org.axiondb.ColumnIdentifier.setTableIdentifier(TableIdentifier)" access="pub" jdoc="Sets my table identifier, if any.">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.ColumnIdentifier.getTableIdentifier()" access="pub" jdoc="Returns my table identifier, if any.">
			</mth>
			<mth name="/:org.axiondb.ColumnIdentifier.getTableName()" access="pub" jdoc="Returns the name of my table or null. Unlike &amp;lt;code&amp;gt;{@link #getTableIdentifier getTableIdentifier()}.{@link TableIdentifier#getTableName getTableName()}&amp;lt; code&amp;gt; this method will return &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; when I don&amp;apos;t have a table identifier.">
			</mth>
			<mth name="/:org.axiondb.ColumnIdentifier.getTableAlias()" access="pub" jdoc="Returns the alias name of my table or null. Unlike &amp;lt;code&amp;gt;{@link #getTableIdentifier getTableIdentifier()}.{@link TableIdentifier#getTableAlias getTableAlias()}&amp;lt; code&amp;gt; this method will return &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; when I don&amp;apos;t have a table identifier.">
			</mth>
			<mth name="/:org.axiondb.ColumnIdentifier.getDataType()" access="pub" jdoc="Returns my {@link DataType}, if any.">
			</mth>
			<mth name="/:org.axiondb.ColumnIdentifier.setDataType(DataType)" access="pub" jdoc="Sets my {@link DataType}, if any.">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.ColumnIdentifier.equals(Object)" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; iff &amp;lt;i&amp;gt;otherobject&amp;lt; i&amp;gt; is a {@link ColumnIdentifier}whose name, table identifier, and alias are equal to mine.">
				<param name="otherobject"/>
			</mth>
			<mth name="/:org.axiondb.ColumnIdentifier.hashCode()" access="pub" jdoc="Returns a hash code in keeping with the standard {@link Object#equals equals} {@link Object#hashCode hashCode}contract.">
			</mth>
			<mth name="/:org.axiondb.ColumnIdentifier.toString()" access="pub" jdoc="Returns a &amp;lt;code&amp;gt;String&amp;lt; code&amp;gt; representation of me, suitable for debugging output.">
			</mth>
		</class>
		<class name="/:org.axiondb.TransactionManager" intfc="y" abs="n" inn="n" sloc="7" jdoc="Manages the {@link Transaction} lifecycle. @version $Revision: 1.3 $ $Date: 2002 12 16 22:18:29 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.TransactionManager.createTransaction()" access="pub" jdoc="Create a new {@link Transaction}.">
			</mth>
			<mth name="/:org.axiondb.TransactionManager.commitTransaction(Transaction)" access="pub" jdoc="Commit the given {@link Transaction}.">
				<param name="t"/>
			</mth>
			<mth name="/:org.axiondb.TransactionManager.abortTransaction(Transaction)" access="pub" jdoc="Abort the given {@link Transaction}.">
				<param name="t"/>
			</mth>
			<mth name="/:org.axiondb.TransactionManager.shutdown()" access="pub" jdoc="Shut down this &amp;lt;code&amp;gt;TransactionManager&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.TransactionManager.isShutdown()" access="pub" jdoc="Return whether or not I&amp;apos;ve been {@link #shutdown}.">
			</mth>
		</class>
		<class name="/:org.axiondb.Selectable" intfc="y" abs="n" inn="n" sloc="6" jdoc="An abstraction of objects that can be selected from (a row in) the database. @version $Revision: 1.2 $ $Date: 2002 07 08 12:52:25 $ @author Rodney Waldhoff @author Chuck Burdick">
			<mth name="/:org.axiondb.Selectable.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.Selectable.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.Selectable.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.Selectable.getLabel()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.IndexLoader" intfc="y" abs="n" inn="n" sloc="4" jdoc="Reads writes {@link Index indices} to disk. @version $Revision: 1.3 $ $Date: 2002 12 17 17:02:44 $">
			<mth name="/:org.axiondb.IndexLoader.loadIndex(Table, File)" access="pub" jdoc="">
				<param name="table"/>
				<param name="dataDirectory"/>
			</mth>
			<mth name="/:org.axiondb.IndexLoader.saveIndex(Index, File)" access="pub" jdoc="">
				<param name="index"/>
				<param name="dataDirectory"/>
			</mth>
		</class>
		<class name="/:org.axiondb.FromNode" intfc="n" abs="n" inn="n" sloc="117" jdoc="Structure presenting the &amp;lt;code&amp;gt;FROM&amp;lt; code&amp;gt; clause. @version $Revision: 1.2 $ $Date: 2003 03 27 19:14:04 $ @author Amrish Lal">
			<const name="TYPE_UNDEFINED" access="pub" jdoc="Join Type is undefined"/>
			<const name="TYPE_SINGLE" access="pub" jdoc="No Join"/>
			<const name="TYPE_INNER" access="pub" jdoc="Inner join."/>
			<const name="TYPE_LEFT" access="pub" jdoc="Left outer join"/>
			<const name="TYPE_RIGHT" access="pub" jdoc="Right outer join"/>
			<const name="TYPE_FULL" access="pub" jdoc="Full outer join (unsupported)"/>
			<field name="_left" access="priv" jdoc="Left input table identifier or FromNode."/>
			<field name="_right" access="priv" jdoc="Right input table identifier or FromNode."/>
			<field name="_type" access="priv" jdoc="Join type"/>
			<field name="_condition" access="priv" jdoc="Join condition"/>
			<field name="_prefix" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.FromNode.FromNode()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.FromNode.setLeft(TableIdentifier)" access="pub" jdoc="Set the left input @param table that is set as left input.">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.FromNode.setLeft(FromNode)" access="pub" jdoc="Set the left input @param join that is set is left input">
				<param name="join"/>
			</mth>
			<mth name="/:org.axiondb.FromNode.setRight(TableIdentifier)" access="pub" jdoc="Set the right input @param table that is set as right input.">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.FromNode.setRight(FromNode)" access="pub" jdoc="Set the right input @param join that is set as right input.">
				<param name="join"/>
			</mth>
			<mth name="/:org.axiondb.FromNode.setType(int)" access="pub" jdoc="Set the type of join. @param type integer value representing join type (INNER, LEFT OUTER, RIGHT OUTER)">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.FromNode.setCondition(WhereNode)" access="pub" jdoc="Set the join condition @param type condition Join condition.">
				<param name="condition"/>
			</mth>
			<mth name="/:org.axiondb.FromNode.getLeft()" access="pub" jdoc="Get the Left input @return Object of type {@link FromNode} or {@link TableIdenfier}">
			</mth>
			<mth name="/:org.axiondb.FromNode.getRight()" access="pub" jdoc="get the right input @return Object of type {@link FromNode} or {@link TableIdenfier}">
			</mth>
			<mth name="/:org.axiondb.FromNode.getType()" access="pub" jdoc="get the type of the join @return inteter indicating type (UNDEFINED, LEFT OUTER, RIGHT OUTER, INNER)">
			</mth>
			<mth name="/:org.axiondb.FromNode.getCondition()" access="pub" jdoc="get the join condition @return join condition.">
			</mth>
			<mth name="/:org.axiondb.FromNode.setDisplayPrefix(String)" access="pub" jdoc="">
				<param name="prefix"/>
			</mth>
			<mth name="/:org.axiondb.FromNode.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.FromNode.getTableCount()" access="pub" jdoc="Number of tables in this FromNode and its children. @return table count.">
			</mth>
			<mth name="/:org.axiondb.FromNode.toTableArray()" access="pub" jdoc="Array of tables in this FromNode or its children. Array is devleoped by preorder traversal of the FromNode tree. @return Array of {@link TableIdentifier}">
			</mth>
			<mth name="/:org.axiondb.FromNode.toTableArray(TableIdentifier[], int)" access="priv" jdoc="">
				<param name="tables"/>
				<param name="pos"/>
			</mth>
		</class>
		<class name="/:org.axiondb.BinaryBranchWhereNode" intfc="n" abs="n" inn="n" sloc="63" jdoc="A {@link WhereNode} representing a Boolean combination of its children. @version $Revision: 1.4 $ $Date: 2003 07 09 21:48:48 $ @author Rodney Waldhoff @author Amrish Lal @author Chuck Burdick">
			<field name="_left" access="priv" jdoc=""/>
			<field name="_right" access="priv" jdoc=""/>
			<field name="_isAnd" access="priv" jdoc=""/>
			<const name="RETURN_TYPE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.BinaryBranchWhereNode.BinaryBranchWhereNode()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.BinaryBranchWhereNode.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.BinaryBranchWhereNode.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.BinaryBranchWhereNode.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.BinaryBranchWhereNode.getLabel()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.BinaryBranchWhereNode.getLeft()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.BinaryBranchWhereNode.setLeft(WhereNode)" access="pub" jdoc="">
				<param name="left"/>
			</mth>
			<mth name="/:org.axiondb.BinaryBranchWhereNode.getRight()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.BinaryBranchWhereNode.setRight(WhereNode)" access="pub" jdoc="">
				<param name="right"/>
			</mth>
			<mth name="/:org.axiondb.BinaryBranchWhereNode.isAnd()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.BinaryBranchWhereNode.setIsAnd(boolean)" access="pub" jdoc="">
				<param name="isAnd"/>
			</mth>
			<mth name="/:org.axiondb.BinaryBranchWhereNode.isOr()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.BinaryBranchWhereNode.setIsOr(boolean)" access="pub" jdoc="">
				<param name="isOr"/>
			</mth>
			<mth name="/:org.axiondb.BinaryBranchWhereNode.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.DataType" intfc="y" abs="n" inn="n" sloc="36" jdoc="The type of a field (column) that can be stored in a {@link Table}. &amp;lt;p&amp;gt; Responsible for {@link #accepts testing} that a value is assignable to fields of this type, for {@link #convert converting} {@link Object Objects} to this type, and for {@link #read reading} values from and {@link #write writing} values to a stream. @version $Revision: 1.8 $ $Date: 2003 05 14 19:07:31 $ @author Rodney Waldhoff @author Rob Oxspring @author Chuck Burdick">
			<mth name="/:org.axiondb.DataType.getPreferredValueClassName()" access="pub" jdoc="Returns the &amp;quot;normal&amp;quot; type returned by {@link #convert}. Returns &amp;lt;tt&amp;gt;java.lang.Object&amp;lt; tt&amp;gt; if unknown. @see java.sql.ResultSetMetaData#getColumnClassName">
			</mth>
			<mth name="/:org.axiondb.DataType.getJdbcType()" access="pub" jdoc="Returns the JDBC {@link java.sql.Types type code} most closely matching this type.">
			</mth>
			<mth name="/:org.axiondb.DataType.getComparator()" access="pub" jdoc="Returns a comparator used for comparing and ordering values of this type.">
			</mth>
			<mth name="/:org.axiondb.DataType.getColumnDisplaySize()" access="pub" jdoc="Value returned by {@link ResultSetMetaData#getColumnDisplaySize}for this data type. @see java.sql.ResultSetMetaData#getColumnDisplaySize">
			</mth>
			<mth name="/:org.axiondb.DataType.getScale()" access="pub" jdoc="Value returned by {@link ResultSetMetaData#getScale}for this data type. @see java.sql.ResultSetMetaData#getScale">
			</mth>
			<mth name="/:org.axiondb.DataType.getPrecision()" access="pub" jdoc="Value returned by {@link ResultSetMetaData#getPrecision}for this data type. @see java.sql.ResultSetMetaData#getPrecision">
			</mth>
			<mth name="/:org.axiondb.DataType.isCaseSensitive()" access="pub" jdoc="For character and string-related types, indicates whether type acknowledges case when storing and retrieving values @see java.sql.DatabaseMetaData#getTypeInfo @see java.sql.ResultSetMetaData#isCaseSensitive">
			</mth>
			<mth name="/:org.axiondb.DataType.isCurrency()" access="pub" jdoc="@see java.sql.ResultSetMetaData#isCurrency">
			</mth>
			<mth name="/:org.axiondb.DataType.getLiteralPrefix()" access="pub" jdoc="Prefix used to quote a literal to delimit value for this type when in SQL syntax or result display @see java.sql.DatabaseMetaData#getTypeInfo">
			</mth>
			<mth name="/:org.axiondb.DataType.getLiteralSuffix()" access="pub" jdoc="Suffix used to quote a literal to delimit value for this type when in SQL syntax or result display @see java.sql.DatabaseMetaData#getTypeInfo">
			</mth>
			<mth name="/:org.axiondb.DataType.getNullableCode()" access="pub" jdoc="Code indicating that type does not accept, does accept, or does not disclose acceptance of &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; values @see java.sql.DatabaseMetaData#getTypeInfo">
			</mth>
			<mth name="/:org.axiondb.DataType.getSearchableCode()" access="pub" jdoc="Code indicating how much &amp;lt;code&amp;gt;WHERE ... LIKE&amp;lt; code&amp;gt; support is available across a column of this type @see java.sql.DatabaseMetaData#getTypeInfo">
			</mth>
			<mth name="/:org.axiondb.DataType.isUnsigned()" access="pub" jdoc="For numeric types, indicates whether type stores only non-negative (&amp;gt;= 0) values @see java.sql.DatabaseMetaData#getTypeInfo">
			</mth>
			<mth name="/:org.axiondb.DataType.accepts(Object)" access="pub" jdoc="Return &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; if a field of my type can be assigned the given non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt;, &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; otherwise. @param value non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; value">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.DataType.convert(Object)" access="pub" jdoc="Converts an {@link #accepts acceptable} value to one of the appropriate type.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.DataType.read(DataInput)" access="pub" jdoc="Instantiate an object of my type from the given {@link DataInput}. The next sequence of bytes to be read from the &amp;lt;code&amp;gt;DataInput&amp;lt; code&amp;gt; will have been written by {@link #write}.">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.DataType.write(Object, DataOutput)" access="pub" jdoc="Write an object of my type to the given {@link DataOutput}. @param value the value to write, which must be {@link #accepts acceptable} to this &amp;lt;code&amp;gt;DataType&amp;lt; code&amp;gt;">
				<param name="value"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.DataType.supportsSuccessor()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; if the {@link #successor} method is supported, false otherwise.">
			</mth>
			<mth name="/:org.axiondb.DataType.successor(Object)" access="pub" jdoc="Returns the successor for the given value. For example, the successor of the integer 1 is 2.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.DataType.toBoolean(Object)" access="pub" jdoc="Convert the given non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to a &amp;lt;code&amp;gt;boolean&amp;lt; code&amp;gt;, or throw a {@link SQLException}. @see java.sql.ResultSet#getBoolean">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.DataType.toByte(Object)" access="pub" jdoc="Convert the given non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to a &amp;lt;code&amp;gt;byte&amp;lt; code&amp;gt;, or throw a {@link SQLException}. @see java.sql.ResultSet#getByte">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.DataType.toDate(Object)" access="pub" jdoc="Convert the given non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to a {@link java.sql.Date}, or throw a {@link SQLException}. @see java.sql.ResultSet#getDate">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.DataType.toDouble(Object)" access="pub" jdoc="Convert the given non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to a &amp;lt;code&amp;gt;double&amp;lt; code&amp;gt;, or throw a {@link SQLException}. @see java.sql.ResultSet#getDouble">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.DataType.toFloat(Object)" access="pub" jdoc="Convert the given non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to a &amp;lt;code&amp;gt;float&amp;lt; code&amp;gt;, or throw a {@link SQLException}. @see java.sql.ResultSet#getFloat">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.DataType.toInt(Object)" access="pub" jdoc="Convert the given non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to a &amp;lt;code&amp;gt;int&amp;lt; code&amp;gt;, or throw a {@link SQLException}. @see java.sql.ResultSet#getInt">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.DataType.toLong(Object)" access="pub" jdoc="Convert the given non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to a &amp;lt;code&amp;gt;long&amp;lt; code&amp;gt;, or throw a {@link SQLException}. @see java.sql.ResultSet#getLong">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.DataType.toShort(Object)" access="pub" jdoc="Convert the given non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to a &amp;lt;code&amp;gt;short&amp;lt; code&amp;gt;, or throw a {@link SQLException}. @see java.sql.ResultSet#getShort">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.DataType.toBigDecimal(Object)" access="pub" jdoc="Convert the given non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to a &amp;lt;code&amp;gt;BigDecimal&amp;lt; code&amp;gt;, or throw a {@link SQLException}. @see java.sql.ResultSet#getBigDecimal">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.DataType.toBigInteger(Object)" access="pub" jdoc="Convert the given non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to a &amp;lt;code&amp;gt;BigInteger&amp;lt; code&amp;gt;, or throw a {@link SQLException}. @see java.sql.ResultSet#getBigInteger">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.DataType.toString(Object)" access="pub" jdoc="Convert the given non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to a {@link String}, or throw a {@link SQLException}. @see java.sql.ResultSet#getString">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.DataType.toTime(Object)" access="pub" jdoc="Convert the given non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to a {@link Time}, or throw a {@link SQLException}. @see java.sql.ResultSet#getTime">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.DataType.toTimestamp(Object)" access="pub" jdoc="Convert the given non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to a {@link Timestamp}, or throw a {@link SQLException}. @see java.sql.ResultSet#getTimestamp">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.DataType.toClob(Object)" access="pub" jdoc="Convert the given non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to a {@link Clob}, or throw a {@link SQLException}. @see java.sql.ResultSet#getClob">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.DataType.toBlob(Object)" access="pub" jdoc="Convert the given non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to a {@link Blob}, or throw a {@link SQLException}. @see java.sql.ResultSet#getBlob">
				<param name="value"/>
			</mth>
		</class>
		<class name="/:org.axiondb.JoinedRowIterator" intfc="y" abs="n" inn="n" sloc="5" jdoc="A bidirectional iterator over a collection of {@link JoinedRow}s. @version $Revision: 1.2 $ $Date: 2003 04 21 15:55:07 $ @author Amrish Lal">
			<mth name="/:org.axiondb.JoinedRowIterator.addRowIterator(RowIterator)" access="pub" jdoc="">
				<param name="iterator"/>
			</mth>
			<mth name="/:org.axiondb.JoinedRowIterator.setJoinCondition(RowDecorator, WhereNode)" access="pub" jdoc="">
				<param name="decorator"/>
				<param name="condition"/>
			</mth>
			<mth name="/:org.axiondb.JoinedRowIterator.setJoinType(int)" access="pub" jdoc="">
				<param name="type"/>
			</mth>
		</class>
		<class name="/:org.axiondb.BindVariable" intfc="n" abs="n" inn="n" sloc="31" jdoc="A {@link Literal} that can be bound via {@link java.sql.PreparedStatement} methods. @version $Revision: 1.5 $ $Date: 2002 11 30 15:56:31 $ @author Rodney Waldhoff">
			<field name="_bound" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.BindVariable.BindVariable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.BindVariable.isBound()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.BindVariable.setValue(Object)" access="pub" jdoc="">
				<param name="obj"/>
			</mth>
			<mth name="/:org.axiondb.BindVariable.getValue()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.BindVariable.clearBoundValue()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.BindVariable.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.RowSource" intfc="y" abs="n" inn="n" sloc="6" jdoc="An abstract {@link Row} generator and container. @see Table @see Index @version $Revision: 1.4 $ $Date: 2003 05 10 00:07:08 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.RowSource.getRow(int)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:org.axiondb.RowSource.makeRowDecorator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.RowSource.getColumnCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.RowSource.getColumnIndex(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
		</class>
		<class name="/:org.axiondb.Sequence" intfc="n" abs="n" inn="n" sloc="35" jdoc="A database sequence. A sequence provides a mechanism for obtaining unique integer values from the database. @version $Revision: 1.8 $ $Date: 2003 05 13 19:33:46 $ @author Chuck Burdick">
			<field name="_name" access="priv" jdoc=""/>
			<field name="_val" access="priv" jdoc=""/>
			<field name="_listeners" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.Sequence.Sequence(String)" access="pub" jdoc="Create a equence starting whose initial value is 0.">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.Sequence.Sequence(String, int)" access="pub" jdoc="Create a equence starting whose initial value is &amp;lt;i&amp;gt;startVal&amp;lt; i&amp;gt;.">
				<param name="name"/>
				<param name="startVal"/>
			</mth>
			<mth name="/:org.axiondb.Sequence.getName()" access="pub" jdoc="Get the name of this sequence.">
			</mth>
			<mth name="/:org.axiondb.Sequence.getLabel()" access="pub" jdoc="Get the name of this sequence.">
			</mth>
			<mth name="/:org.axiondb.Sequence.getValue()" access="pub" jdoc="Get the current value of this sequence.">
			</mth>
			<mth name="/:org.axiondb.Sequence.evaluate()" access="pub" jdoc="Increment and return the next value in this sequence.">
			</mth>
			<mth name="/:org.axiondb.Sequence.addSequenceModificationListener(SequenceModificationListener)" access="pub" jdoc="">
				<param name="listener"/>
			</mth>
		</class>
		<class name="/:org.axiondb.SelectableBasedConstraint" intfc="y" abs="n" inn="n" sloc="5" jdoc="Interface for {@link Constraint}s that are defined by one or more {@link Selectable}s. @version $Revision: 1.2 $ $Date: 2002 12 16 22:18:29 $ @author Rodney Waldhoff @author James Strachan">
			<mth name="/:org.axiondb.SelectableBasedConstraint.addSelectable(Selectable)" access="pub" jdoc="">
				<param name="sel"/>
			</mth>
			<mth name="/:org.axiondb.SelectableBasedConstraint.getSelectableCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.SelectableBasedConstraint.getSelectable(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
		</class>
		<class name="/:org.axiondb.TransactionConflictException" intfc="n" abs="n" inn="n" sloc="8" jdoc="Thrown when a transaction conflict is discovered. @version $Revision: 1.3 $ $Date: 2003 05 13 19:33:46 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.TransactionConflictException.TransactionConflictException(String)" access="pub" jdoc="">
				<param name="message"/>
			</mth>
			<mth name="/:org.axiondb.TransactionConflictException.TransactionConflictException(String, Throwable)" access="pub" jdoc="">
				<param name="message"/>
				<param name="nested"/>
			</mth>
		</class>
		<class name="/:org.axiondb.Literal" intfc="n" abs="n" inn="n" sloc="47" jdoc="A {@link DataType typed} literal value. @version $Revision: 1.4 $ $Date: 2002 11 30 15:56:31 $ @author Rodney Waldhoff @author Chuck Burdick">
			<comm cntt="public constructors"/>
			<comm cntt="-------------------------------------------------------------------------"/>
			<comm cntt="protected constructors"/>
			<comm cntt="-------------------------------------------------------------------------"/>
			<comm cntt="public methods"/>
			<comm cntt="-------------------------------------------------------------------------"/>
			<comm cntt="protected methods"/>
			<comm cntt="-------------------------------------------------------------------------"/>
			<comm cntt="attributes"/>
			<comm cntt="-------------------------------------------------------------------------"/>
			<field name="_value" access="priv" jdoc=""/>
			<field name="_type" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.Literal.Literal(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.Literal.Literal(Object, DataType)" access="pub" jdoc="">
				<param name="value"/>
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.Literal.Literal(DataType)" access="prot" jdoc="">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.Literal.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.Literal.getLabel()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.Literal.evaluate(RowDecorator)" access="pub" jdoc="@param row is ignored and may be null. @see #evaluate">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.Literal.setDataType(DataType)" access="pub" jdoc="">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.Literal.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.Literal.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.Literal.evaluate()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.Literal.getValue()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.Literal.setValue(Object)" access="prot" jdoc="">
				<param name="value"/>
			</mth>
		</class>
		<class name="/:org.axiondb.Function" intfc="y" abs="n" inn="n" sloc="6" jdoc="A database function. @version $Revision: 1.8 $ $Date: 2003 03 27 19:14:04 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.Function.getName()" access="pub" jdoc="Returns the cannonical name of this function.">
			</mth>
			<mth name="/:org.axiondb.Function.addArgument(Selectable)" access="pub" jdoc="Append the given {@link Selectable} to my argument list.">
				<param name="arg"/>
			</mth>
			<mth name="/:org.axiondb.Function.getArgumentCount()" access="pub" jdoc="Returns the number of arguments in my argument list.">
			</mth>
			<mth name="/:org.axiondb.Function.getArgument(int)" access="pub" jdoc="Returns the {@link Selectable} at the given index. @throws IndexOutOfBoundsException if there is no argument at the given index">
				<param name="i"/>
			</mth>
		</class>
		<class name="/:org.axiondb.RowDecoratorIterator" intfc="y" abs="n" inn="n" sloc="15" jdoc="A bidirectional iterator over a collection of {@link RowDecorator}s. (Once {@link #current current}, {@link #next next},{@link #previous previous}, {@link #first first}, or {@link #last last} is invoked, all previously returned values are invalidated.) @version $Revision: 1.5 $ $Date: 2002 12 16 22:18:29 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.RowDecoratorIterator.getDecorator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.RowDecoratorIterator.setDecorator(RowDecorator)" access="pub" jdoc="">
				<param name="decorator"/>
			</mth>
			<mth name="/:org.axiondb.RowDecoratorIterator.getIterator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.RowDecoratorIterator.setIterator(RowIterator)" access="pub" jdoc="">
				<param name="iterator"/>
			</mth>
			<mth name="/:org.axiondb.RowDecoratorIterator.current()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.RowDecoratorIterator.next()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.RowDecoratorIterator.previous()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.RowDecoratorIterator.hasNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.RowDecoratorIterator.hasPrevious()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.RowDecoratorIterator.hasCurrent()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.RowDecoratorIterator.first()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.RowDecoratorIterator.last()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.RowDecoratorIterator.reset()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.AxionCommand" intfc="y" abs="n" inn="n" sloc="9" jdoc="A command to be executed against a {@link Database}. @version $Revision: 1.10 $ $Date: 2003 07 10 22:20:37 $ @author Chuck Burdick">
			<mth name="/:org.axiondb.AxionCommand.execute(Database)" access="pub" jdoc="Executes an SQL statement that may return multiple results. @return &amp;lt;tt&amp;gt;true&amp;lt; tt&amp;gt; if one or more {@link java.sql.ResultSet}s were generated, &amp;lt;tt&amp;gt;false&amp;lt; tt&amp;gt; otherwise @see java.sql.Statement#execute(java.lang.String) @see java.sql.PreparedStatement#execute">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.AxionCommand.executeUpdate(Database)" access="pub" jdoc="Executes an SQL that may add, delete or modify zero or more rows within the database, such as an INSERT, UPDATE or DELETE statement. In addition, SQL statements that return nothing, such as SQL DDL statements, can be executed via this method. @return the number of rows modified @see java.sql.Statement#executeUpdate(java.lang.String) @see java.sql.PreparedStatement#executeUpdate">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.AxionCommand.executeQuery(Database)" access="pub" jdoc="Executes an SQL statement that returns a single {@link java.sql.ResultSet} object such as a SELECT statement. @return the generated {@link java.sql.ResultSet} @see java.sql.Statement#executeQuery(java.lang.String) @see java.sql.PreparedStatement#executeQuery">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.AxionCommand.getResultSet()" access="pub" jdoc="Returns the last {@link java.sql.ResultSet} generated by {@link #execute} or {@link #executeQuery}.">
			</mth>
			<mth name="/:org.axiondb.AxionCommand.getEffectedRowCount()" access="pub" jdoc="Returns the last row count generated by {@link #execute} or {@link #executeUpdate}.">
			</mth>
			<mth name="/:org.axiondb.AxionCommand.bind(int, Object)" access="pub" jdoc="Sets the &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; of the &amp;lt;i&amp;gt;i&amp;lt; i&amp;gt;&amp;lt;sup&amp;gt;th&amp;lt; sup&amp;gt; bind variable within this command. @param index the one-based index of the variable @param value the value to bind the variable to">
				<param name="index"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.AxionCommand.clearBindings()" access="pub" jdoc="Clears all bind variables within this command.">
			</mth>
		</class>
		<class name="/:org.axiondb.Row" intfc="y" abs="n" inn="n" sloc="9" jdoc="Contains the data for a single row in a table, view, result set, etc. @version $Revision: 1.14 $ $Date: 2002 12 16 15:27:35 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.Row.get(int)" access="pub" jdoc="Returns the value of the field at &amp;lt;i&amp;gt;i&amp;lt; i&amp;gt; (zero indexed).">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.Row.set(int, Object)" access="pub" jdoc="Sets the value of the field at &amp;lt;i&amp;gt;i&amp;lt; i&amp;gt; (zero indexed). This operation is optional.">
				<param name="i"/>
				<param name="val"/>
			</mth>
			<mth name="/:org.axiondb.Row.size()" access="pub" jdoc="Returns the number of fields in me.">
			</mth>
			<mth name="/:org.axiondb.Row.hashCode()" access="pub" jdoc="Return a hash code for me, in keeping with the generic {@link Object#hashCode}contract.">
			</mth>
			<mth name="/:org.axiondb.Row.equals(Object)" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; iff &amp;lt;i&amp;gt;that&amp;lt; i&amp;gt; is a &amp;lt;code&amp;gt;Row&amp;lt; code&amp;gt; with the same number of fields and each is equal to the corresponding field in me. &amp;lt;p&amp;gt; Adheres to the generic {@link Object#equals}contract.">
				<param name="that"/>
			</mth>
			<mth name="/:org.axiondb.Row.getIdentifier()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.Row.setIdentifier(int)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
		</class>
		<class name="/:org.axiondb.Table" intfc="y" abs="n" inn="n" sloc="39" jdoc="A database table. @version $Revision: 1.38 $ $Date: 2003 07 08 06:55:39 $ @author Chuck Burdick @author Rodney Waldhoff">
			<const name="REGULAR_TABLE_TYPE" access="pub" jdoc=""/>
			<const name="SYSTEM_TABLE_TYPE" access="pub" jdoc=""/>
			<mth name="/:org.axiondb.Table.getName()" access="pub" jdoc="Get the name of this table.">
			</mth>
			<mth name="/:org.axiondb.Table.getType()" access="pub" jdoc="Get the type of this table.">
			</mth>
			<mth name="/:org.axiondb.Table.addTableModificationListener(TableModificationListener)" access="pub" jdoc="Adds a listener to receive events on this table">
				<param name="listener"/>
			</mth>
			<mth name="/:org.axiondb.Table.removeTableModificationListener(TableModificationListener)" access="pub" jdoc="Removes a listener so that it stops receiving events on this table">
				<param name="listener"/>
			</mth>
			<mth name="/:org.axiondb.Table.addConstraint(Constraint)" access="pub" jdoc="">
				<param name="constraint"/>
			</mth>
			<mth name="/:org.axiondb.Table.removeConstraint(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.Table.getConstraints()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.Table.addIndex(Index)" access="pub" jdoc="Add an index, associating it with a {@link Column}, and adding it as a {@link org.axiondb.TableModificationListener} to the table. @see #addIndex @see #addTableModificationListener @see #getIndexForColumn @see #isColumnIndexed @see #populateIndex @param index @exception AxionException">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.Table.removeIndex(Index)" access="pub" jdoc="Remove an index, both from the indices and as a TableModificationListener @param index @exception AxionException">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.Table.populateIndex(Index)" access="pub" jdoc="Populate an {@link Index}, adding my current rows to it. Does not {@link #addIndex add} the index. @see #addIndex @param index @exception AxionException">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.Table.getIndexForColumn(Column)" access="pub" jdoc="Return the first {@link Index} that pertains to the given{@link Column}, or &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; if no such{@link Index} exists. @return the pertinent {@link Column}, or &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; if no such {@link Index} exists">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.Table.isColumnIndexed(Column)" access="pub" jdoc="Check to see if an {@link Index} exists for the given{@link Column} @param column {@link Column} to check @return true iff there is an existing {@link Index} for the given {@link Column}">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.Table.addColumn(Column)" access="pub" jdoc="Add the given {@link Column} to this table.">
				<param name="col"/>
			</mth>
			<mth name="/:org.axiondb.Table.getColumn(int)" access="pub" jdoc="Return the {@link Column} corresponding to the given zero-based &amp;lt;i&amp;gt;index&amp;lt; i&amp;gt;.">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.Table.getColumn(String)" access="pub" jdoc="Return the {@link Column} for the given &amp;lt;i&amp;gt;name&amp;lt; i&amp;gt;.">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.Table.hasColumn(ColumnIdentifier)" access="pub" jdoc="Indicate whether the {@link ColumnIdentifier} references a column in this table">
				<param name="id"/>
			</mth>
			<mth name="/:org.axiondb.Table.getColumnIndex(String)" access="pub" jdoc="Return the zero-based index of the {@link Column} with the given &amp;lt;i&amp;gt;name&amp;lt; i&amp;gt;.">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.Table.getColumnIdentifiers()" access="pub" jdoc="Return an {@link Iterator} over the {@link ColumnIdentifier ColumnIdentifiers} for my{@link Column}s.">
			</mth>
			<mth name="/:org.axiondb.Table.getColumnCount()" access="pub" jdoc="Return the number of {@link Column}s I contain.">
			</mth>
			<mth name="/:org.axiondb.Table.addRow(Row)" access="pub" jdoc="Insert the given {@link Row}.">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.Table.getRowIterator(boolean)" access="pub" jdoc="Obtain an {@link RowIterator iterator} over my {@link Row}s. @param readOnly when &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;, the caller does not expect to be able to modify (i.e., call{@link RowIterator#set} or {@link RowIterator#remove} on) the returned {@link RowIterator}, the returned iterator &amp;lt;i&amp;gt;may&amp;lt; i&amp;gt; be unmodifiable.">
				<param name="readOnly"/>
			</mth>
			<mth name="/:org.axiondb.Table.getMatchingRows(List, List)" access="pub" jdoc="Obtain an {@link RowIterator iterator} over my {@link Row}s where each {@link Selectable Selectable} in the &amp;lt;i&amp;gt;selectable&amp;lt; i&amp;gt; {@link List list} {@link Selectable#evaluate evaluates} to the corresponding value in the &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; {@link List list}. This is functionally similiar to executing a SELECT over this table where &amp;lt;i&amp;gt;selectable[i]&amp;lt; i&amp;gt; = &amp;lt;i&amp;gt;value[i]&amp;lt; i&amp;gt; for each value of &amp;lt;i&amp;gt;i&amp;lt; i&amp;gt;. The return RowIterator is not modifiable.">
				<param name="selectables"/>
				<param name="values"/>
			</mth>
			<mth name="/:org.axiondb.Table.getIndexedRows(WhereNode, boolean)" access="pub" jdoc="@param readOnly when &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;, the caller does not expect to be able to modify (i.e., call{@link RowIterator#set} or {@link RowIterator#remove} on) the returned {@link RowIterator}, the returned iterator &amp;lt;i&amp;gt;may&amp;lt; i&amp;gt; be unmodifiable.">
				<param name="where"/>
				<param name="readOnly"/>
			</mth>
			<mth name="/:org.axiondb.Table.getRowCount()" access="pub" jdoc="Return the number of {@link Row}s I contain.">
			</mth>
			<mth name="/:org.axiondb.Table.getNextRowId()" access="pub" jdoc="Reserve a row id.">
			</mth>
			<mth name="/:org.axiondb.Table.freeRowId(int)" access="pub" jdoc="Un-reserve a row id.">
				<param name="id"/>
			</mth>
			<mth name="/:org.axiondb.Table.applyInserts(Iterator)" access="pub" jdoc="Insert the given {@link Row Rows}, but don&amp;apos;t invoke any{@link RowEvent}s, triggers, etc. @param rows an {@link Iterator} over {@link Row Rows} (but not a RowIterator) @throws AxionException">
				<param name="rows"/>
			</mth>
			<mth name="/:org.axiondb.Table.applyDeletes(IntIterator)" access="pub" jdoc="Delete the specified rows (by identifiers), but don&amp;apos;t invoke any {@link RowEvent}s, triggers, etc.">
				<param name="rowids"/>
			</mth>
			<mth name="/:org.axiondb.Table.applyUpdates(Iterator)" access="pub" jdoc="Update the given {@link Row Rows}, but don&amp;apos;t invoke any{@link RowEvent}s, triggers, etc.">
				<param name="rows"/>
			</mth>
			<mth name="/:org.axiondb.Table.drop()" access="pub" jdoc="Drop this table from the database.">
			</mth>
			<mth name="/:org.axiondb.Table.checkpoint()" access="pub" jdoc="Execute a CHECKPOINT, persisting any un-persisted data.">
			</mth>
			<mth name="/:org.axiondb.Table.shutdown()" access="pub" jdoc="The database is shutting down, shutdown this table also.">
			</mth>
			<mth name="/:org.axiondb.Table.remount(File, boolean)" access="pub" jdoc="Notify this table that its disk-location has moved.">
				<param name="dir"/>
				<param name="dataOnly"/>
			</mth>
			<mth name="/:org.axiondb.Table.makeTransactableTable()" access="pub" jdoc="Create a {@link TransactableTable} for this table.">
			</mth>
			<mth name="/:org.axiondb.Table.getIndices()" access="pub" jdoc="Obtain an {@link Iterator} over my indices.">
			</mth>
		</class>
		<class name="/:org.axiondb.TableFactory" intfc="y" abs="n" inn="n" sloc="3" jdoc="A simple factory for creating {@link Table} instances. @version $Revision: 1.2 $ $Date: 2002 12 17 17:02:44 $ @author Chuck Burdick @author Rodney Waldhoff">
			<mth name="/:org.axiondb.TableFactory.createTable(Database, String)" access="pub" jdoc="">
				<param name="database"/>
				<param name="name"/>
			</mth>
		</class>
		<class name="/:org.axiondb.Transactable" intfc="y" abs="n" inn="n" sloc="5" jdoc="Interface for entities that can take part in a transaction. @version $Revision: 1.4 $ $Date: 2002 12 16 22:18:29 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.Transactable.commit()" access="pub" jdoc="This transaction has been committed.">
			</mth>
			<mth name="/:org.axiondb.Transactable.rollback()" access="pub" jdoc="This transaction has been aborted.">
			</mth>
			<mth name="/:org.axiondb.Transactable.apply()" access="pub" jdoc="Apply this {@link #commit committed} transaction..">
			</mth>
		</class>
		<class name="/:org.axiondb.NamedIdentifier" intfc="n" abs="y" inn="n" sloc="9" jdoc="A named object in the database @version $Revision: 1.1 $ $Date: 2002 07 02 00:51:22 $ @author Chuck Burdick">
			<mth name="/:org.axiondb.NamedIdentifier.toUpperOrNull(String)" access="prot" jdoc="">
				<param name="str"/>
			</mth>
		</class>
		<class name="/:org.axiondb.Column" intfc="n" abs="n" inn="n" sloc="31" jdoc="Describes a column within a {@link Table}. @version $Revision: 1.16 $ $Date: 2002 12 12 19:12:09 $ @author Chuck Burdick @author Rodney Waldhoff">
			<field name="_name" access="priv" jdoc=""/>
			<field name="_type" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.Column.Column(String, DataType)" access="pub" jdoc="Create column with the given &amp;lt;i&amp;gt;name&amp;lt; i&amp;gt; and &amp;lt;i&amp;gt;type&amp;lt; i&amp;gt;. @param name the name of this column, which MUST NOT be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @param type the {@link DataType} of this column, which MUST NOT be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @throws NullPointerException if either parameter is &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;">
				<param name="name"/>
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.Column.getName()" access="pub" jdoc="Get the name of this column.">
			</mth>
			<mth name="/:org.axiondb.Column.getDataType()" access="pub" jdoc="Get the {@link DataType} of this column.">
			</mth>
			<mth name="/:org.axiondb.Column.equals(Object)" access="pub" jdoc="Two {@link Column}s are equal if they have the same name.">
				<param name="that"/>
			</mth>
			<mth name="/:org.axiondb.Column.hashCode()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.FunctionFactory" intfc="y" abs="n" inn="n" sloc="3" jdoc="A simple factory for creating new {@link ConcreteFunction} instances. @version $Revision: 1.2 $ $Date: 2002 07 04 16:39:12 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.FunctionFactory.makeNewInstance()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.RowIterator" intfc="y" abs="n" inn="n" sloc="20" jdoc="A bidirectional iterator over a collection of {@link Row}s. @version $Revision: 1.9 $ $Date: 2002 12 17 17:02:44 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.RowIterator.current()" access="pub" jdoc="Returns the last {@link Row} returned by me (by {@link #next}, {@link #previous},{@link #first}, {@link #last}, etc.). @throws NoSuchElementException when no {@link Row} has yet been returned">
			</mth>
			<mth name="/:org.axiondb.RowIterator.next()" access="pub" jdoc="Returns the next {@link Row} in the list, or throws {@link java.util.NoSuchElementException}if no next &amp;lt;code&amp;gt;Row&amp;lt; code&amp;gt; exists. @throws NoSuchElementException when there is no next {@link Row} @throws AxionException when a problem occurs accessing the {@link Row}">
			</mth>
			<mth name="/:org.axiondb.RowIterator.previous()" access="pub" jdoc="Returns the previous {@link Row} in the list, or throws {@link java.util.NoSuchElementException}if no next &amp;lt;code&amp;gt;Row&amp;lt; code&amp;gt; exists. @throws NoSuchElementException when there is no next {@link Row} @throws AxionException when a problem occurs accessing the {@link Row}">
			</mth>
			<mth name="/:org.axiondb.RowIterator.hasNext()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; if I have more {@link Row}s when traversing the list in the forward direction. (In other words, returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; iff {@link #next} would return a {@link Row} rather than throwing an exception.)">
			</mth>
			<mth name="/:org.axiondb.RowIterator.hasPrevious()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; if I have more {@link Row}s when traversing the list in the reverse direction. (In other words, returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; iff {@link #previous} would return a {@link Row} rather than throwing an exception.)">
			</mth>
			<mth name="/:org.axiondb.RowIterator.hasCurrent()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; if I have a current {@link Row}. (In other words, returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; iff{@link #current} would return a {@link Row} rather than throwing an exception.)">
			</mth>
			<mth name="/:org.axiondb.RowIterator.isEmpty()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; if there are no rows to report with this iterator.">
			</mth>
			<mth name="/:org.axiondb.RowIterator.first()" access="pub" jdoc="Returns the first {@link Row} in the list, positioning the cursor to just before the first {@link Row} in the list. (In other words, after &amp;lt;code&amp;gt;first&amp;lt; code&amp;gt; is called both {@link #next} and {@link #current} will return the first row in the list.) @throws NoSuchElementException when there is no first {@link Row} @throws AxionException when a problem occurs accessing the {@link Row}">
			</mth>
			<mth name="/:org.axiondb.RowIterator.last()" access="pub" jdoc="Returns the last {@link Row} in the list, positioning the cursor to just after the last {@link Row} in the list. (In other words, after &amp;lt;code&amp;gt;last&amp;lt; code&amp;gt; is called both {@link #previous} and {@link #current} will return the last row in the list.) @throws NoSuchElementException when there is no last {@link Row} @throws AxionException when a problem occurs accessing the {@link Row}">
			</mth>
			<mth name="/:org.axiondb.RowIterator.peekNext()" access="pub" jdoc="Return the value that would be returned by a call to {@link #next}, if any, but don&amp;apos;t update my position. @throws NoSuchElementException when there is no next {@link Row} @throws AxionException when a problem occurs accessing the {@link Row}">
			</mth>
			<mth name="/:org.axiondb.RowIterator.peekPrevious()" access="pub" jdoc="Return the value that would be returned by a call to {@link #previous}, if any, but don&amp;apos;t update my position. @throws NoSuchElementException when there is no previous {@link Row} @throws AxionException when a problem occurs accessing the {@link Row}">
			</mth>
			<mth name="/:org.axiondb.RowIterator.reset()" access="pub" jdoc="Re-initialize this &amp;lt;code&amp;gt;RowIterator&amp;lt; code&amp;gt; to its initial state (positioned just before the first {@link Row} in the list).">
			</mth>
			<mth name="/:org.axiondb.RowIterator.add(Row)" access="pub" jdoc="Add a {@link Row} at the current position in my underlying collection, or throw {@link UnsupportedOperationException}. (Optional operation.)">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.RowIterator.set(Row)" access="pub" jdoc="Set the {@link Row} at the current position in my underlying collection, or throw {@link UnsupportedOperationException}. (Optional operation.)">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.RowIterator.remove()" access="pub" jdoc="Set the {@link Row} at the current position in my underlying collection, or throw {@link UnsupportedOperationException}. (Optional operation.)">
			</mth>
			<mth name="/:org.axiondb.RowIterator.currentIndex()" access="pub" jdoc="Returns the index of the {@link #current} row, if any. @throws NoSuchElementException when no {@link Row} has yet been returned">
			</mth>
			<mth name="/:org.axiondb.RowIterator.nextIndex()" access="pub" jdoc="Returns the index of the {@link #next} row, if any, or the number of elements is the iterator if we&amp;apos;ve reached the end.">
			</mth>
			<mth name="/:org.axiondb.RowIterator.previousIndex()" access="pub" jdoc="Returns the index of the {@link #previous} row, if any, or -1 if we&amp;apos;re add the beginning of the list.">
			</mth>
		</class>
		<class name="/:org.axiondb.OrderNode" intfc="n" abs="n" inn="n" sloc="23" jdoc="One part of an ORDER BY clause. @version $Revision: 1.4 $ $Date: 2003 05 13 19:33:46 $ @author Morgan Delagrange @author Rodney Waldhoff">
			<field name="_sel" access="priv" jdoc=""/>
			<field name="_descending" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.OrderNode.OrderNode(Selectable, boolean)" access="pub" jdoc="Create an &amp;lt;code&amp;gt;OrderNode&amp;lt; code&amp;gt; that sorts the given &amp;lt;i&amp;gt;selectable&amp;lt; i&amp;gt; in ascending or descending order. @param selectable the {@link Selectable} to sort by @param descending when &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; sort in descending (greatest to least) order">
				<param name="selectable"/>
				<param name="descending"/>
			</mth>
			<mth name="/:org.axiondb.OrderNode.getSelectable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.OrderNode.setSelectable(Selectable)" access="pub" jdoc="">
				<param name="sel"/>
			</mth>
			<mth name="/:org.axiondb.OrderNode.isDescending()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.OrderNode.setDescending(boolean)" access="pub" jdoc="">
				<param name="desc"/>
			</mth>
			<mth name="/:org.axiondb.OrderNode.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.TransactableTable" intfc="y" abs="n" inn="n" sloc="2" jdoc="A {@link Transactable} version of a {@link Table}. @version $Revision: 1.2 $ $Date: 2002 12 16 22:18:29 $ @author Rodney Waldhoff">
		</class>
		<class name="/:org.axiondb.AxionException" intfc="n" abs="n" inn="n" sloc="21" jdoc="Root exception for Axion related or specific problems. @version $Revision: 1.2 $ $Date: 2002 11 02 23:38:21 $ @author Rodney Waldhoff">
			<field name="_nested" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.AxionException.AxionException()" access="pub" jdoc="Equivalent to {@link #AxionException(java.lang.String,java.lang.Throwable) AxionException(null,null)}.">
			</mth>
			<mth name="/:org.axiondb.AxionException.AxionException(String)" access="pub" jdoc="Equivalent to {@link #AxionException(java.lang.String,java.lang.Throwable) AxionException(message,null)}.">
				<param name="message"/>
			</mth>
			<mth name="/:org.axiondb.AxionException.AxionException(Throwable)" access="pub" jdoc="Equivalent to {@link #AxionException(java.lang.String,java.lang.Throwable) AxionException(null,nested)}.">
				<param name="nested"/>
			</mth>
			<mth name="/:org.axiondb.AxionException.AxionException(String, Throwable)" access="pub" jdoc="Construct a new {@link AxionException} with the given &amp;lt;i&amp;gt;message&amp;lt; i&amp;gt;, wrapping the given {@link Throwable}. @param message my detailed message (possibly &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;) @param nested a {@link Throwable} to wrap (possibly &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;)">
				<param name="message"/>
				<param name="nested"/>
			</mth>
			<mth name="/:org.axiondb.AxionException.getNestedThrowable()" access="pub" jdoc="Return the {@link Throwable} I&amp;apos;m wrapping, if any. @return the {@link Throwable} I&amp;apos;m wrapping, if any.">
			</mth>
		</class>
		<class name="/:org.axiondb.BranchWhereNode" intfc="n" abs="y" inn="n" sloc="2" jdoc="A {@link WhereNode} composed of one or more child nodes. @version $Revision: 1.3 $ $Date: 2002 12 16 22:18:29 $ @author Rodney Waldhoff">
		</class>
		<class name="/:org.axiondb.TableIdentifier" intfc="n" abs="n" inn="n" sloc="55" jdoc="An identifier for a table. &amp;lt;p&amp;gt; Table names and aliases always stored (and returned) in upper case. @version $Revision: 1.2 $ $Date: 2002 07 02 00:51:22 $ @author Rodney Waldhoff @author Chuck Burdick">
			<field name="_table" access="priv" jdoc=""/>
			<field name="_tableAlias" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.TableIdentifier.TableIdentifier()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.TableIdentifier.TableIdentifier(String)" access="pub" jdoc="">
				<param name="tablename"/>
			</mth>
			<mth name="/:org.axiondb.TableIdentifier.TableIdentifier(String, String)" access="pub" jdoc="">
				<param name="tablename"/>
				<param name="tablealias"/>
			</mth>
			<mth name="/:org.axiondb.TableIdentifier.setTableName(String)" access="pub" jdoc="">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.TableIdentifier.getTableName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.TableIdentifier.setTableAlias(String)" access="pub" jdoc="">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.TableIdentifier.getTableAlias()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.TableIdentifier.equals(Object)" access="pub" jdoc="">
				<param name="otherobject"/>
			</mth>
			<mth name="/:org.axiondb.TableIdentifier.hashCode()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.TableIdentifier.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.NotWhereNode" intfc="n" abs="n" inn="n" sloc="33" jdoc="A {@link WhereNode} representing a Boolean combination of its children. @version $Revision: 1.5 $ $Date: 2003 07 09 21:48:48 $ @author Rodney Waldhoff @author Amrish Lal @author Chuck Burdick">
			<field name="_child" access="priv" jdoc=""/>
			<const name="RETURN_TYPE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.NotWhereNode.NotWhereNode(WhereNode)" access="pub" jdoc="">
				<param name="child"/>
			</mth>
			<mth name="/:org.axiondb.NotWhereNode.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.NotWhereNode.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.NotWhereNode.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.NotWhereNode.getLabel()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.NotWhereNode.getChild()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.NotWhereNode.setChild(WhereNode)" access="pub" jdoc="">
				<param name="child"/>
			</mth>
			<mth name="/:org.axiondb.NotWhereNode.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.WhereNodeVisitor" intfc="y" abs="n" inn="n" sloc="3" jdoc="A visitor over a {@link WhereNode} tree.">
			<mth name="/:org.axiondb.WhereNodeVisitor.visit(WhereNode)" access="pub" jdoc="">
				<param name="node"/>
			</mth>
		</class>
		<class name="/:org.axiondb.DataTypeFactory" intfc="y" abs="n" inn="n" sloc="3" jdoc="A simple factory for creating new {@link DataType} instances. @version $Revision: 1.2 $ $Date: 2002 07 04 16:39:12 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.DataTypeFactory.makeNewInstance()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.RowDecorator" intfc="n" abs="n" inn="n" sloc="45" jdoc="A {@link org.axiondb.Row} with meta-information. (Note that we&amp;apos;ve intentionally not implemented &amp;lt;code&amp;gt;Row&amp;lt; code&amp;gt; here. &amp;lt;code&amp;gt;Row&amp;lt; code&amp;gt; and &amp;lt;code&amp;gt;RowDecorator&amp;lt; code&amp;gt; have different contracts. A reference to a &amp;lt;code&amp;gt;Row&amp;lt; code&amp;gt; is somewhat persistent--it can be added to a Collection, for example. A {@link RowDecorator} changes all the time.) @version $Revision: 1.5 $ $Date: 2003 03 27 19:14:04 $ @author Rodney Waldhoff">
			<field name="_row" access="priv" jdoc=""/>
			<field name="_fieldMap" access="priv" jdoc=""/>
			<field name="_rowndx" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.RowDecorator.RowDecorator(Map)" access="pub" jdoc="">
				<param name="selectableToFieldMap"/>
			</mth>
			<mth name="/:org.axiondb.RowDecorator.setRow(Row)" access="pub" jdoc="Sets the {@link Row} I&amp;apos;m currently decorating.">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.RowDecorator.setRow(int, Row)" access="pub" jdoc="Sets the {@link Row} I&amp;apos;m currently decorating.">
				<param name="rowndx"/>
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.RowDecorator.getRow()" access="pub" jdoc="Gets the {@link Row} I&amp;apos;m currently decorating.">
			</mth>
			<mth name="/:org.axiondb.RowDecorator.get(ColumnIdentifier)" access="pub" jdoc="Returns the value of the specified column.">
				<param name="colid"/>
			</mth>
			<mth name="/:org.axiondb.RowDecorator.set(ColumnIdentifier, Object)" access="pub" jdoc="Sets the value of the specified column. This operation is optional.">
				<param name="colid"/>
				<param name="val"/>
			</mth>
			<mth name="/:org.axiondb.RowDecorator.getRowIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.RowDecorator.getFieldIndex(Selectable)" access="priv" jdoc="">
				<param name="sel"/>
			</mth>
		</class>
		<class name="/:org.axiondb.RowComparator" intfc="n" abs="n" inn="n" sloc="51" jdoc="A {@link Comparator} for {@link Row Rows}, which will sort a collection according to the value of a single selectable. By using a ComparatorChain, one can perform in-memory sorts over multiple columns. @author Morgan Delagrange @author Rodney Waldhoff (the hacks are all mine ;)">
			<field name="_sel" access="priv" jdoc=""/>
			<field name="_dec" access="priv" jdoc=""/>
			<field name="_cmp" access="priv" jdoc=""/>
			<field name="_log" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.RowComparator.RowComparator(Selectable, RowDecorator)" access="pub" jdoc="">
				<param name="sel"/>
				<param name="dec"/>
			</mth>
			<mth name="/:org.axiondb.RowComparator.compare(Object, Object)" access="pub" jdoc="">
				<param name="o1"/>
				<param name="o2"/>
			</mth>
			<mth name="/:org.axiondb.RowComparator.evaluate(Object)" access="priv" jdoc="">
				<comm cntt="XXX FIX ME XXX"/>
				<comm cntt="XXX FIX ME XXX"/>
				<param name="obj"/>
			</mth>
		</class>
		<class name="/:org.axiondb.Index" intfc="y" abs="n" inn="n" sloc="11" jdoc="A database index. (Right now, this class assumes an Index over a single column. Multipart indices will come later.) @version $Revision: 1.15 $ $Date: 2003 03 27 19:14:04 $ @author Morgan Delagrange @author Rodney Waldhoff @author Chuck Burdick">
			<mth name="/:org.axiondb.Index.getName()" access="pub" jdoc="Returns my name.">
			</mth>
			<mth name="/:org.axiondb.Index.getIndexedColumn()" access="pub" jdoc="Returns the column I index.">
			</mth>
			<mth name="/:org.axiondb.Index.isUnique()" access="pub" jdoc="Whether or not I allow duplicate values.">
			</mth>
			<mth name="/:org.axiondb.Index.getRowIterator(RowSource, ComparisonOperator, Object)" access="pub" jdoc="Returns a {@link RowIterator} over the indexed rows, limited by the given {@link ComparisonOperator} value pair, using the default sort order. @param operator the {@link ComparisonOperator} to apply @param value the value to compare the indexed column to">
				<param name="source"/>
				<param name="theOperator"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.Index.supportsOperator(ComparisonOperator)" access="pub" jdoc="Returns &amp;lt;tt&amp;gt;true&amp;lt; tt&amp;gt; iff {@link #getRowIterator(org.axiondb.RowSource,org.axiondb.ComparisonOperator,java.lang.Object)} can support the given operator, &amp;lt;tt&amp;gt;false&amp;lt; tt&amp;gt; otherwise.">
				<param name="op"/>
			</mth>
			<mth name="/:org.axiondb.Index.save(File)" access="pub" jdoc="">
				<param name="dataDirectory"/>
			</mth>
			<mth name="/:org.axiondb.Index.getIndexLoader()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.Index.changeRowId(Table, Row, int, int)" access="pub" jdoc="">
				<param name="table"/>
				<param name="row"/>
				<param name="oldId"/>
				<param name="newId"/>
			</mth>
		</class>
		<class name="/:org.axiondb.Constraint" intfc="y" abs="n" inn="n" sloc="11" jdoc="A database constraint, such as UNIQUE or NOT NULL. @version $Revision: 1.13 $ $Date: 2003 02 12 16:19:54 $ @author Rodney Waldhoff @author James Strachan">
			<mth name="/:org.axiondb.Constraint.resolve(Database, TableIdentifier)" access="pub" jdoc="Resolve any unresolved {@link org.axiondb.Selectableidentifiers} I may have.">
				<param name="db"/>
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.Constraint.evaluate(RowEvent)" access="pub" jdoc="Evaluate the given &amp;lt;i&amp;gt;event&amp;lt; i&amp;gt; under me. Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; if the constraint I represent has been violated.">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.Constraint.isDeferred()" access="pub" jdoc="Return whether or not I am deferred. Deferred constraints are not evaluated until the transaction is committed.">
			</mth>
			<mth name="/:org.axiondb.Constraint.setDeferred(boolean)" access="pub" jdoc="Set whether or not I am deferred. Deferred constraints are not evaluated until the transaction is committed. Throws an exception if I am not {@link #isDeferrable deferrable} and &amp;lt;i&amp;gt;deferred&amp;lt; i&amp;gt; is &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;.">
				<param name="deferred"/>
			</mth>
			<mth name="/:org.axiondb.Constraint.isDeferrable()" access="pub" jdoc="Return whether or not I am deferrable.">
			</mth>
			<mth name="/:org.axiondb.Constraint.setDeferrable(boolean)" access="pub" jdoc="Set whether or not I am deferrable.">
				<param name="deferrable"/>
			</mth>
			<mth name="/:org.axiondb.Constraint.getName()" access="pub" jdoc="Get my name.">
			</mth>
			<mth name="/:org.axiondb.Constraint.setName(String)" access="pub" jdoc="Set my name.">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.Constraint.getType()" access="pub" jdoc="Get a human-readable descrption of the type of constraint I represent.">
			</mth>
		</class>
	</pkg>
	<pkg name="/:org.axiondb.constraints">
		<class name="/:org.axiondb.constraints.NotNullConstraint" intfc="n" abs="n" inn="n" sloc="24" jdoc="A NOT NULL constraint, which is violated whenever one or more of the specified {@link Selectable}s is &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;. @version $Revision: 1.10 $ $Date: 2003 03 27 19:14:03 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.constraints.NotNullConstraint.NotNullConstraint()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.constraints.NotNullConstraint.NotNullConstraint(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.constraints.NotNullConstraint.evaluate(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
		</class>
		<class name="/:org.axiondb.constraints.CheckConstraint" intfc="n" abs="n" inn="n" sloc="39" jdoc="A CHECK constraint, which is violated whenever the given {@link #setCondition condition} is violated. @version $Revision: 1.8 $ $Date: 2003 05 13 19:33:47 $ @author Rodney Waldhoff @author Amrish Lal">
			<field name="_condition" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.constraints.CheckConstraint.CheckConstraint(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.constraints.CheckConstraint.setCondition(WhereNode)" access="pub" jdoc="">
				<param name="where"/>
			</mth>
			<mth name="/:org.axiondb.constraints.CheckConstraint.getCondition()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.constraints.CheckConstraint.resolve(Database, TableIdentifier)" access="pub" jdoc="">
				<param name="db"/>
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.constraints.CheckConstraint.evaluate(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.constraints.CheckConstraint.toSqlString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.constraints.BaseConstraint" intfc="n" abs="y" inn="n" sloc="54" jdoc="Abstract base {@link Constraint} implementation. @version $Revision: 1.10 $ $Date: 2003 02 12 16:19:28 $ @author Rodney Waldhoff @author James Strachan">
			<field name="_name" access="priv" jdoc=""/>
			<field name="_type" access="priv" jdoc=""/>
			<field name="_deferred" access="priv" jdoc=""/>
			<field name="_deferrable" access="priv" jdoc=""/>
			<field name="_idCounter" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.constraints.BaseConstraint.BaseConstraint(String, String)" access="pub" jdoc="Creates a {@link Constraint} with the given &amp;lt;i&amp;gt;name&amp;lt; i&amp;gt; and &amp;lt;i&amp;gt;type&amp;lt; i&amp;gt;. @param name the name of this constraint (see {@link #setName}) which may be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @param type the type of this constraint (see {@link #getType}), which should not be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;">
				<param name="name"/>
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.constraints.BaseConstraint.evaluate(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.constraints.BaseConstraint.resolve(Database, TableIdentifier)" access="pub" jdoc="This base implementation is a no-op.">
				<param name="db"/>
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.constraints.BaseConstraint.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.constraints.BaseConstraint.setName(String)" access="pub" jdoc="Sets the name of this constraint. When &amp;lt;i&amp;gt;name&amp;lt; i&amp;gt; is &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; a unique name is programatically generated.">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.constraints.BaseConstraint.getType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.constraints.BaseConstraint.isDeferred()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.constraints.BaseConstraint.setDeferred(boolean)" access="pub" jdoc="">
				<param name="deferred"/>
			</mth>
			<mth name="/:org.axiondb.constraints.BaseConstraint.isDeferrable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.constraints.BaseConstraint.setDeferrable(boolean)" access="pub" jdoc="">
				<param name="deferrable"/>
			</mth>
		</class>
		<class name="/:org.axiondb.constraints.UniqueConstraint" intfc="n" abs="n" inn="n" sloc="34" jdoc="A UNIQUE constraint, which is violated when my collection of {@link Selectable}s is not unique within my table. @version $Revision: 1.11 $ $Date: 2003 05 13 19:33:47 $ @author Rodney Waldhoff @author James Strachan">
			<mth name="/:org.axiondb.constraints.UniqueConstraint.UniqueConstraint(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.constraints.UniqueConstraint.UniqueConstraint(String, String)" access="pub" jdoc="">
				<param name="name"/>
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.constraints.UniqueConstraint.evaluate(RowEvent)" access="pub" jdoc="">
				<comm cntt="in this case, any matching row causes failure"/>
				<comm cntt="otherwise, check that the matching row isn&amp;apos;t the one we&amp;apos;re updating"/>
				<param name="event"/>
			</mth>
		</class>
		<class name="/:org.axiondb.constraints.NullConstraint" intfc="n" abs="n" inn="n" sloc="11" jdoc="A NULL constraint, which is never violated but may be created and dropped. @version $Revision: 1.7 $ $Date: 2003 07 10 16:34:33 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.constraints.NullConstraint.NullConstraint()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.constraints.NullConstraint.NullConstraint(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.constraints.NullConstraint.evaluate(RowEvent)" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;.">
				<param name="event"/>
			</mth>
		</class>
		<class name="/:org.axiondb.constraints.BaseSelectableBasedConstraint" intfc="n" abs="y" inn="n" sloc="32" jdoc="Abstract base {@link SelectableBasedConstraint} implementation. @version $Revision: 1.4 $ $Date: 2003 02 12 16:19:28 $ @author Rodney Waldhoff @author James Strachan">
			<field name="_selectables" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.constraints.BaseSelectableBasedConstraint.BaseSelectableBasedConstraint(String, String)" access="pub" jdoc="Creates a {@link org.axiondb.Constraint} with the given &amp;lt;i&amp;gt;name&amp;lt; i&amp;gt; and &amp;lt;i&amp;gt;type&amp;lt; i&amp;gt;. @param name the name of this constraint (see {@link #setName}) which may be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @param type the type of this constraint (see {@link #getType}), which should not be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;">
				<param name="name"/>
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.constraints.BaseSelectableBasedConstraint.evaluate(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.constraints.BaseSelectableBasedConstraint.addSelectable(Selectable)" access="pub" jdoc="">
				<param name="sel"/>
			</mth>
			<mth name="/:org.axiondb.constraints.BaseSelectableBasedConstraint.getSelectableCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.constraints.BaseSelectableBasedConstraint.getSelectable(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.constraints.BaseSelectableBasedConstraint.getSelectableList()" access="pub" jdoc="">
				<comm cntt="XXX FIX ME XXX would an iterator suffice?"/>
			</mth>
			<mth name="/:org.axiondb.constraints.BaseSelectableBasedConstraint.resolve(Database, TableIdentifier)" access="pub" jdoc="This base implementation {@link Database#resolveSelectable resolves} all of the{@link Selectable}s in my list.">
				<param name="db"/>
				<param name="table"/>
			</mth>
		</class>
		<class name="/:org.axiondb.constraints.PrimaryKeyConstraint" intfc="n" abs="n" inn="n" sloc="22" jdoc="A PRIMARY KEY constraint, which is violated whenever any of my {@link Selectable}s are &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; or my collection of {@link Selectable}s is not{@link UniqueConstraint#evaluate unique}. @version $Revision: 1.9 $ $Date: 2003 05 13 19:33:47 $ @author James Strachan @author Rodney Waldhoff">
			<mth name="/:org.axiondb.constraints.PrimaryKeyConstraint.PrimaryKeyConstraint(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.constraints.PrimaryKeyConstraint.evaluate(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/:org.axiondb.engine">
		<class name="/:org.axiondb.engine.AxionColumnsMetaTableUpdater" intfc="n" abs="n" inn="n" sloc="137" jdoc="Updates the &amp;lt;code&amp;gt;AXION_TABLES&amp;lt; code&amp;gt; meta table @version $Revision: 1.4 $ $Date: 2003 03 27 19:14:03 $ @author Chuck Burdick @author Rodney Waldhoff">
			<comm cntt="===================================== TableModificationListener Interface"/>
			<field name="_log" access="priv" jdoc=""/>
			<field name="_db" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.AxionColumnsMetaTableUpdater.AxionColumnsMetaTableUpdater(Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionColumnsMetaTableUpdater.tableAdded(DatabaseModifiedEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionColumnsMetaTableUpdater.tableDropped(DatabaseModifiedEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionColumnsMetaTableUpdater.columnAdded(ColumnEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionColumnsMetaTableUpdater.rowInserted(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionColumnsMetaTableUpdater.rowDeleted(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionColumnsMetaTableUpdater.rowUpdated(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionColumnsMetaTableUpdater.constraintAdded(ConstraintEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionColumnsMetaTableUpdater.constraintRemoved(ConstraintEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionColumnsMetaTableUpdater.updateNullableStatus(ConstraintEvent, boolean)" access="pub" jdoc="">
				<param name="event"/>
				<param name="changeNullableTo"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionColumnsMetaTableUpdater.createRowForColumnAdded(Table, Column)" access="prot" jdoc="">
				<comm cntt="table_cat"/>
				<comm cntt="table schem"/>
				<comm cntt="table_name"/>
				<comm cntt="column_name"/>
				<comm cntt="data_type"/>
				<comm cntt="type_name"/>
				<comm cntt="column_size"/>
				<comm cntt="buffer_length (unused)"/>
				<comm cntt="decimal_digits"/>
				<comm cntt="num_prec_radix"/>
				<comm cntt="nullable"/>
				<comm cntt="remarks"/>
				<comm cntt="column_def"/>
				<comm cntt="sql_data_type (unused)"/>
				<comm cntt="sql_datetime_sub (unused)"/>
				<comm cntt="char_octet_length"/>
				<comm cntt="ordinal_position"/>
				<comm cntt="is_nullable"/>
				<param name="t"/>
				<param name="col"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionColumnsMetaTableUpdater.createUpdateNullableCmd(Table, String, boolean)" access="priv" jdoc="">
				<param name="t"/>
				<param name="colName"/>
				<param name="isnullable"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionColumnsMetaTableUpdater.isNullable(Table, String)" access="priv" jdoc="">
				<comm cntt="XXX FIX ME XXX: this is a little hack"/>
				<param name="table"/>
				<param name="column"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.BaseBTreeIndex" intfc="n" abs="y" inn="n" sloc="27" jdoc="Abstract base implementation for B-Tree based {@link Index indices}. @version $Revision: 1.6 $ $Date: 2003 03 27 19:14:03 $ @author Dave Pekarek Krohn">
			<mth name="/:org.axiondb.engine.BaseBTreeIndex.BaseBTreeIndex(String, Column, boolean)" access="pub" jdoc="">
				<param name="name"/>
				<param name="column"/>
				<param name="unique"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseBTreeIndex.supportsOperator(ComparisonOperator)" access="pub" jdoc="">
				<param name="op"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseBTreeIndex.save(File)" access="pub" jdoc="">
				<param name="dataDirectory"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.BaseWhereNodeVisitor" intfc="n" abs="n" inn="n" sloc="38" jdoc="A {@link WhereNodeVisitor} that delegates incoming {@link WhereNode WhereNodes} to the appropriate method. @version $Revision: 1.5 $ $Date: 2003 03 27 19:14:03 $ @author Morgan Delagrange @author Chuck Burdick">
			<mth name="/:org.axiondb.engine.BaseWhereNodeVisitor.visit(WhereNode)" access="pub" jdoc="">
				<param name="node"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseWhereNodeVisitor.visitLeafWhereNode(LeafWhereNode)" access="prot" jdoc="">
				<param name="node"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseWhereNodeVisitor.visitInWhereNode(InWhereNode)" access="prot" jdoc="">
				<param name="node"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseWhereNodeVisitor.visitBranchWhereNode(BranchWhereNode)" access="prot" jdoc="">
				<param name="node"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseWhereNodeVisitor.visitBinaryBranchWhereNode(BinaryBranchWhereNode)" access="prot" jdoc="">
				<param name="node"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseWhereNodeVisitor.visitNotWhereNode(NotWhereNode)" access="prot" jdoc="">
				<param name="node"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseWhereNodeVisitor.transverseWhereNode(WhereNode)" access="prot" jdoc="">
				<param name="node"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.ArrayIndexFactory" intfc="n" abs="n" inn="n" sloc="11" jdoc="An {@link IndexFactory} for {@link BaseArrayIndex array indices}. @version $Revision: 1.2 $ $Date: 2002 12 16 22:18:29 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.engine.ArrayIndexFactory.ArrayIndexFactory()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.ArrayIndexFactory.makeNewInstance(String, Column, boolean)" access="pub" jdoc="">
				<param name="name"/>
				<param name="col"/>
				<param name="unique"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.MemoryTable" intfc="n" abs="n" inn="n" sloc="145" jdoc="A memory-resident {@link Table}. @version $Revision: 1.23 $ $Date: 2003 07 08 06:55:39 $ @author Chuck Burdick">
			<field name="_rows" access="priv" jdoc=""/>
			<field name="_freeIds" access="priv" jdoc=""/>
			<field name="_rowCount" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.MemoryTable.MemoryTable(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.MemoryTable.populateIndex(Index)" access="pub" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.engine.MemoryTable.getNextRowId()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.MemoryTable.freeRowId(int)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:org.axiondb.engine.MemoryTable.getRowCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.MemoryTable.getRow(int)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:org.axiondb.engine.MemoryTable.applyInserts(Iterator)" access="pub" jdoc="">
				<param name="rows"/>
			</mth>
			<mth name="/:org.axiondb.engine.MemoryTable.applyDeletes(IntIterator)" access="pub" jdoc="">
				<param name="iter"/>
			</mth>
			<mth name="/:org.axiondb.engine.MemoryTable.applyUpdates(Iterator)" access="pub" jdoc="">
				<param name="rows"/>
			</mth>
			<mth name="/:org.axiondb.engine.MemoryTable.getRowIterator()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.MemoryTable.applyInsert(Row)" access="priv" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.MemoryTable.applyDelete(int)" access="priv" jdoc="">
				<param name="rowid"/>
			</mth>
			<mth name="/:org.axiondb.engine.MemoryTable.getRowList()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.ObjectArrayIndex" intfc="n" abs="n" inn="n" sloc="88" jdoc="An {@link BaseArrayIndex index} over &amp;lt;code&amp;gt;Object&amp;lt; code&amp;gt; keys. @version $Revision: 1.7 $ $Date: 2003 07 11 17:04:06 $ @author Rodney Waldhoff">
			<field name="_keys" access="priv" jdoc=""/>
			<const name="LOADER" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.ObjectArrayIndex.ObjectArrayIndex(String, Column, boolean)" access="pub" jdoc="">
				<param name="name"/>
				<param name="column"/>
				<param name="unique"/>
			</mth>
			<mth name="/:org.axiondb.engine.ObjectArrayIndex.ObjectArrayIndex(String, Column, boolean, ArrayList, IntList)" access="pub" jdoc="">
				<param name="name"/>
				<param name="column"/>
				<param name="unique"/>
				<param name="keys"/>
				<param name="values"/>
			</mth>
			<mth name="/:org.axiondb.engine.ObjectArrayIndex.find(Object, boolean)" access="prot" jdoc="">
				<comm cntt="if(comp &amp;gt; 0)"/>
				<param name="seeking"/>
				<param name="required"/>
			</mth>
			<mth name="/:org.axiondb.engine.ObjectArrayIndex.removeKey(Object)" access="prot" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.ObjectArrayIndex.removeKey(Comparable)" access="prot" jdoc="">
				<param name="seeking"/>
			</mth>
			<mth name="/:org.axiondb.engine.ObjectArrayIndex.removeKeyAt(int)" access="prot" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.engine.ObjectArrayIndex.insertKey(Object)" access="prot" jdoc="">
				<comm cntt="if(comp &amp;gt; 0)"/>
				<param name="seeking"/>
			</mth>
			<mth name="/:org.axiondb.engine.ObjectArrayIndex.getIndexLoader()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.ObjectArrayIndex.getKeyList()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.ObjectArrayIndex.getKeyList(int, int)" access="prot" jdoc="">
				<param name="minIndex"/>
				<param name="maxIndex"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.DiskSystemTable" intfc="n" abs="n" inn="n" sloc="82" jdoc="A disk-resident {@link org.axiondb.Table} in plain-text format. @version $Revision: 1.6 $ $Date: 2003 03 27 19:14:03 $ @author Chuck Burdick">
			<comm cntt="-------------------------------------------------------------- INTERFACE"/>
			<const name="_log" access="priv" jdoc=""/>
			<field name="_dir" access="priv" jdoc=""/>
			<field name="_dirty" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.DiskSystemTable.DiskSystemTable(String, File)" access="pub" jdoc="">
				<param name="name"/>
				<param name="dir"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskSystemTable.getDirectory()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskSystemTable.checkpoint()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskSystemTable.isDirty()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskSystemTable.columnAdded(ColumnEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskSystemTable.rowInserted(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskSystemTable.rowDeleted(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskSystemTable.rowUpdated(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskSystemTable.constraintAdded(ConstraintEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskSystemTable.constraintRemoved(ConstraintEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.ObjectBTreeIndexLoader" intfc="n" abs="n" inn="n" sloc="45" jdoc="An {@link IndexLoader} for {@link ObjectBTreeIndex}. @version $Revision: 1.2 $ $Date: 2002 12 16 22:18:30 $ @author Dave Pekarek Krohn">
			<mth name="/:org.axiondb.engine.ObjectBTreeIndexLoader.ObjectBTreeIndexLoader()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.ObjectBTreeIndexLoader.loadIndex(Table, File)" access="pub" jdoc="">
				<comm cntt="read version number"/>
				<comm cntt="read column name"/>
				<comm cntt="read unique flag"/>
				<comm cntt="create index"/>
				<comm cntt="return it"/>
				<param name="table"/>
				<param name="dataDirectory"/>
			</mth>
			<mth name="/:org.axiondb.engine.ObjectBTreeIndexLoader.saveIndex(Index, File)" access="pub" jdoc="">
				<comm cntt="write version number"/>
				<comm cntt="write column name"/>
				<comm cntt="write unique flag"/>
				<comm cntt="flush"/>
				<param name="ndx"/>
				<param name="dataDirectory"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.AxionTablesMetaTableUpdater" intfc="n" abs="n" inn="n" sloc="38" jdoc="Updates the &amp;lt;code&amp;gt;AXION_TABLES&amp;lt; code&amp;gt; meta table @version $Revision: 1.3 $ $Date: 2003 03 27 19:14:03 $ @author Chuck Burdick @author Rodney Waldhoff">
			<field name="_log" access="priv" jdoc=""/>
			<field name="_db" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.AxionTablesMetaTableUpdater.AxionTablesMetaTableUpdater(Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionTablesMetaTableUpdater.tableAdded(DatabaseModifiedEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionTablesMetaTableUpdater.tableDropped(DatabaseModifiedEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionTablesMetaTableUpdater.createRowForAddedTable(Table)" access="prot" jdoc="">
				<comm cntt="table_cat"/>
				<comm cntt="table_schem"/>
				<comm cntt="table_name"/>
				<comm cntt="table_type"/>
				<comm cntt="remarks"/>
				<param name="table"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.ReferencesOtherTablesWhereNodeVisitor" intfc="n" abs="n" inn="n" sloc="30" jdoc="Return true if reference a table other than the given one, false otherwise. @author Rodney Waldhoff">
			<field name="_hasResult" access="priv" jdoc=""/>
			<field name="_result" access="priv" jdoc=""/>
			<field name="_id" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.ReferencesOtherTablesWhereNodeVisitor.ReferencesOtherTablesWhereNodeVisitor(TableIdentifier)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:org.axiondb.engine.ReferencesOtherTablesWhereNodeVisitor.getResult()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.ReferencesOtherTablesWhereNodeVisitor.visit(WhereNode)" access="pub" jdoc="">
				<param name="node"/>
			</mth>
			<mth name="/:org.axiondb.engine.ReferencesOtherTablesWhereNodeVisitor.visitLeafWhereNode(LeafWhereNode)" access="pub" jdoc="">
				<param name="node"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.BaseDiskTable" intfc="n" abs="y" inn="n" sloc="279" jdoc="Abstract base disk-resident implementation of {@link Table}. &amp;lt;code&amp;gt;BaseDiskTable&amp;lt; code&amp;gt; manages the column meta-data for a disk-based table. @version $Revision: 1.6 $ $Date: 2003 05 20 17:59:10 $ @author Chuck Burdick @author Rodney Waldhoff">
			<comm cntt="------------------------------------------------------------- Constructors"/>
			<comm cntt="---------------------------------------------------------------- Abstract"/>
			<comm cntt="------------------------------------------------------------------ Public"/>
			<comm cntt="--------------------------------------------------------------- Protected"/>
			<comm cntt="----------------------------------------------------------------- Private"/>
			<comm cntt="--------------------------------------------------------------- Attributes"/>
			<field name="_metaFile" access="priv" jdoc=""/>
			<field name="_log" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.BaseDiskTable.BaseDiskTable(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.closeFiles()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.getLobDir()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.getRootDir()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.addColumn(Column)" access="pub" jdoc="">
				<param name="col"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.addColumn(Column, boolean)" access="pub" jdoc="">
				<comm cntt="XXX FIX ME XXX there ought to be a better way to do this"/>
				<param name="col"/>
				<param name="metaUpdateNeeded"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.drop()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.shutdown()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.remount(File, boolean)" access="pub" jdoc="">
				<param name="newdir"/>
				<param name="datafilesonly"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.createOrLoadMetaFile()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.loadIndices(File)" access="prot" jdoc="">
				<param name="parentdir"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.writeNameToFile(File, Object)" access="prot" jdoc="">
				<param name="file"/>
				<param name="obj"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.deleteFile(File)" access="prot" jdoc="">
				<param name="file"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.parseMetaFile(File)" access="prot" jdoc="">
				<comm cntt="read version number"/>
				<comm cntt="read number of columns"/>
				<comm cntt="read column name"/>
				<comm cntt="read data type class name"/>
				<comm cntt="create instance of datatype"/>
				<param name="file"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.writeMetaFile(File)" access="prot" jdoc="">
				<comm cntt="write version number"/>
				<comm cntt="write number of columns"/>
				<comm cntt="for each column"/>
				<comm cntt="write column name"/>
				<comm cntt="write data type class name"/>
				<param name="file"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.writeIntFile(String, IntList)" access="prot" jdoc="Writes a list of &amp;lt;tt&amp;gt;int&amp;lt; tt&amp;gt; values to a file. @param file the {@link File} to write to">
				<param name="file"/>
				<param name="list"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.writeLongFile(String, LongList)" access="prot" jdoc="Writes a list of &amp;lt;tt&amp;gt;long&amp;lt; tt&amp;gt; values to a file. @param file the {@link File} to write to">
				<param name="file"/>
				<param name="list"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.appendLongFile(String, long)" access="prot" jdoc="Appends a long value to a file. @param file the {@link File} to append to @param value the value to write">
				<param name="file"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.appendLongFile(String, LongList)" access="prot" jdoc="Appends several long values to a file. @param file the {@link File} to append to @param values the values to write">
				<param name="file"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.parseLongFile(File)" access="prot" jdoc="Reads a list of long values from a file. @param file the {@link File} to read from">
				<param name="file"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.parseIntFile(File)" access="prot" jdoc="Reads a list of int values from a file. @param file the {@link File} to read from">
				<param name="file"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.getMetaFile()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseDiskTable.clearMetaFileReference()" access="priv" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.BaseArrayIndex" intfc="n" abs="y" inn="n" sloc="149" jdoc="Abstract base implemenation for {@link Index indices}that maintain an in-memory, sorted array of key values (and their associated row identifiers). This type of index is fast to read, relatively slow to write and somewhat memory expensive when very large. @version $Revision: 1.12 $ $Date: 2003 05 02 13:25:42 $ @author Rodney Waldhoff @author Chuck Burdick">
			<field name="_rowIds" access="priv" jdoc=""/>
			<field name="_log" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.BaseArrayIndex.getIndexLoader()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseArrayIndex.find(Object, boolean)" access="prot" jdoc="">
				<param name="value"/>
				<param name="required"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseArrayIndex.insertKey(Object)" access="prot" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseArrayIndex.removeKey(Object)" access="prot" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseArrayIndex.removeKeyAt(int)" access="prot" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseArrayIndex.getKeyList()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseArrayIndex.getKeyList(int, int)" access="prot" jdoc="">
				<param name="minIndex"/>
				<param name="maxIndex"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseArrayIndex.BaseArrayIndex(String, Column, boolean)" access="pub" jdoc="">
				<param name="name"/>
				<param name="column"/>
				<param name="unique"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseArrayIndex.BaseArrayIndex(String, Column, boolean, IntList)" access="pub" jdoc="">
				<param name="name"/>
				<param name="column"/>
				<param name="unique"/>
				<param name="values"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseArrayIndex.supportsOperator(ComparisonOperator)" access="pub" jdoc="">
				<param name="op"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseArrayIndex.getRowIterator(RowSource, ComparisonOperator, Object)" access="pub" jdoc="">
				<comm cntt="null fails all comparisions I support"/>
				<comm cntt="if the operator was EQUAL and we matched one row, we know the key value"/>
				<comm cntt="otherwise we don&amp;apos;t really know the key value, so just return the lazy row"/>
				<param name="source"/>
				<param name="op"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseArrayIndex.rowInserted(RowEvent)" access="pub" jdoc="">
				<comm cntt="null values aren&amp;apos;t indexed"/>
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseArrayIndex.rowDeleted(RowEvent)" access="pub" jdoc="">
				<comm cntt="null values aren&amp;apos;t indexed"/>
				<comm cntt="if we&amp;apos;re unique, just remove the entry at key"/>
				<comm cntt="if we&amp;apos;re not unique, scroll thru to find the right row to remove"/>
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseArrayIndex.rowUpdated(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseArrayIndex.save(File)" access="pub" jdoc="">
				<param name="dataDirectory"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseArrayIndex.getValueList()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseArrayIndex.changeRowId(Table, Row, int, int)" access="pub" jdoc="">
				<comm cntt="null values aren&amp;apos;t indexed"/>
				<param name="table"/>
				<param name="row"/>
				<param name="oldId"/>
				<param name="newId"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.MemoryDatabase" intfc="n" abs="n" inn="n" sloc="33" jdoc="A memory-resident {@link org.axiondb.Database}. @version $Revision: 1.6 $ $Date: 2003 05 01 16:39:00 $ @author Chuck Burdick @author Rodney Waldhoff @author Morgan Delagrange">
			<comm cntt="------------------------------------------------------------- Constructors"/>
			<comm cntt="-------------------------------------------------------------- Attributes"/>
			<const name="DEFAULT_TABLE_FACTORY" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.MemoryDatabase.MemoryDatabase()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.MemoryDatabase.MemoryDatabase(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.MemoryDatabase.MemoryDatabase(String, Properties)" access="pub" jdoc="">
				<param name="name"/>
				<param name="props"/>
			</mth>
			<mth name="/:org.axiondb.engine.MemoryDatabase.getTableFactory(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.MemoryDatabase.getTableDirectory()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.MemoryDatabase.createSystemTable(String)" access="prot" jdoc="">
				<param name="name"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.IntArrayIndex" intfc="n" abs="n" inn="n" sloc="94" jdoc="An {@link BaseArrayIndex array index} over integer keys. @version $Revision: 1.5 $ $Date: 2003 04 22 19:15:14 $ @author Rodney Waldhoff">
			<field name="_keys" access="priv" jdoc=""/>
			<const name="LOADER" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.IntArrayIndex.IntArrayIndex(String, Column, boolean)" access="pub" jdoc="">
				<param name="name"/>
				<param name="column"/>
				<param name="unique"/>
			</mth>
			<mth name="/:org.axiondb.engine.IntArrayIndex.IntArrayIndex(String, Column, boolean, IntList, IntList)" access="pub" jdoc="">
				<param name="name"/>
				<param name="column"/>
				<param name="unique"/>
				<param name="keys"/>
				<param name="values"/>
			</mth>
			<mth name="/:org.axiondb.engine.IntArrayIndex.find(Object, boolean)" access="prot" jdoc="">
				<param name="value"/>
				<param name="required"/>
			</mth>
			<mth name="/:org.axiondb.engine.IntArrayIndex.find(int, boolean)" access="prot" jdoc="">
				<comm cntt="if(_keys.getInt(cur) &amp;lt; seeking)"/>
				<param name="seeking"/>
				<param name="required"/>
			</mth>
			<mth name="/:org.axiondb.engine.IntArrayIndex.removeKey(Object)" access="prot" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.IntArrayIndex.removeKey(int)" access="prot" jdoc="">
				<param name="seeking"/>
			</mth>
			<mth name="/:org.axiondb.engine.IntArrayIndex.removeKeyAt(int)" access="prot" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.engine.IntArrayIndex.insertKey(Object)" access="prot" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.IntArrayIndex.insertKey(int)" access="prot" jdoc="">
				<comm cntt="if(_keys.getInt(cur) &amp;lt; seeking)"/>
				<param name="seeking"/>
			</mth>
			<mth name="/:org.axiondb.engine.IntArrayIndex.getIndexLoader()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.IntArrayIndex.getKeyList()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.IntArrayIndex.getKeyList(int, int)" access="prot" jdoc="">
				<param name="minIndex"/>
				<param name="maxIndex"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.SimpleRow" intfc="n" abs="n" inn="n" sloc="29" jdoc="A simple implementation of {@link Row}. @version $Revision: 1.5 $ $Date: 2003 05 10 00:07:07 $ @author Rodney Waldhoff">
			<field name="_fields" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.SimpleRow.SimpleRow(Row)" access="pub" jdoc="">
				<param name="that"/>
			</mth>
			<mth name="/:org.axiondb.engine.SimpleRow.SimpleRow(Object[])" access="pub" jdoc="">
				<param name="values"/>
			</mth>
			<mth name="/:org.axiondb.engine.SimpleRow.SimpleRow(int, int)" access="pub" jdoc="">
				<param name="id"/>
				<param name="size"/>
			</mth>
			<mth name="/:org.axiondb.engine.SimpleRow.SimpleRow(int)" access="pub" jdoc="">
				<param name="size"/>
			</mth>
			<mth name="/:org.axiondb.engine.SimpleRow.get(int)" access="pub" jdoc="Get the value of field &amp;lt;i&amp;gt;i&amp;lt; i&amp;gt;. Note that the index is zero-based.">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.engine.SimpleRow.set(int, Object)" access="pub" jdoc="Set the value of field &amp;lt;i&amp;gt;i&amp;lt; i&amp;gt; to &amp;lt;i&amp;gt;val&amp;lt; i&amp;gt;. Note that the index is zero-based.">
				<param name="i"/>
				<param name="val"/>
			</mth>
			<mth name="/:org.axiondb.engine.SimpleRow.size()" access="pub" jdoc="Return the number of fields I contain.">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.ObjectBTreeIndex" intfc="n" abs="n" inn="n" sloc="125" jdoc="A {@link BaseBTreeIndex B-Tree index} over &amp;lt;code&amp;gt;Object&amp;lt; code&amp;gt; keys. @version $Revision: 1.13 $ $Date: 2003 07 11 17:04:06 $ @author Dave Pekarek Krohn">
			<comm cntt="TABLE MODIFICATION LISTENER"/>
			<const name="_log" access="priv" jdoc=""/>
			<field name="_tree" access="priv" jdoc=""/>
			<const name="LOADER" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.ObjectBTreeIndex.ObjectBTreeIndex(String, Column, boolean, File)" access="pub" jdoc="">
				<param name="name"/>
				<param name="column"/>
				<param name="unique"/>
				<param name="dataDirectory"/>
			</mth>
			<mth name="/:org.axiondb.engine.ObjectBTreeIndex.ObjectBTreeIndex(String, Column, boolean)" access="pub" jdoc="">
				<param name="name"/>
				<param name="column"/>
				<param name="unique"/>
			</mth>
			<mth name="/:org.axiondb.engine.ObjectBTreeIndex.getRowIterator(RowSource, ComparisonOperator, Object)" access="pub" jdoc="">
				<comm cntt="null fails all comparisions I support"/>
				<comm cntt="TODO: use SingletonIntListIterator instead?"/>
				<param name="source"/>
				<param name="theOperator"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.ObjectBTreeIndex.getIndexLoader()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.ObjectBTreeIndex.getBTree()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.ObjectBTreeIndex.rowInserted(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.ObjectBTreeIndex.rowDeleted(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.ObjectBTreeIndex.rowUpdated(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.ObjectBTreeIndex.changeRowId(Table, Row, int, int)" access="pub" jdoc="">
				<param name="table"/>
				<param name="row"/>
				<param name="oldId"/>
				<param name="newId"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.FlattenWhereNodeVisitor" intfc="n" abs="n" inn="n" sloc="24" jdoc="Decomposes a {@link WhereNode} tree into a {@link HashSet}of {@link WhereNode}s that were originally ANDed together in the source tree. @author Morgan Delagrange @author Chuck Burdick">
			<field name="_nodes" access="prot" jdoc=""/>
			<mth name="/:org.axiondb.engine.FlattenWhereNodeVisitor.getNodes(WhereNode)" access="pub" jdoc="">
				<param name="node"/>
			</mth>
			<mth name="/:org.axiondb.engine.FlattenWhereNodeVisitor.visitBinaryBranchWhereNode(BinaryBranchWhereNode)" access="pub" jdoc="">
				<param name="node"/>
			</mth>
			<mth name="/:org.axiondb.engine.FlattenWhereNodeVisitor.visitLeafWhereNode(LeafWhereNode)" access="pub" jdoc="">
				<param name="node"/>
			</mth>
			<mth name="/:org.axiondb.engine.FlattenWhereNodeVisitor.visitInWhereNode(InWhereNode)" access="pub" jdoc="">
				<param name="node"/>
			</mth>
			<mth name="/:org.axiondb.engine.FlattenWhereNodeVisitor.visitNotWhereNode(NotWhereNode)" access="pub" jdoc="">
				<param name="node"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.TransactableTableImpl" intfc="n" abs="n" inn="n" sloc="400" jdoc="An implemenation of {@link TransactableTable}. @version $Revision: 1.44 $ $Date: 2003 07 08 06:55:39 $ @author Rodney Waldhoff @author Chuck Burdick">
			<comm cntt="XXX TO DO: XXX"/>
			<comm cntt="some of this code is cut-and-paste from BaseTable it would be"/>
			<comm cntt="helpful to refactor so that BaseTable and TransactableTableImpl"/>
			<comm cntt="share more code directly"/>
			<field name="_table" access="pub" jdoc=""/>
			<field name="_reservedRowIds" access="pub" jdoc="{@link IntArrayList} of row identifiers that have been reserved from my underlying table."/>
			<field name="_insertedRows" access="priv" jdoc="{@link List} of {@link Row}s that have been inserted."/>
			<field name="_updatedRows" access="pub" jdoc="{@link Map} of {@link Row}s that have been updated, keyed by row identifier."/>
			<field name="_deletedRows" access="pub" jdoc="{@link IntArrayList} of row identifiers that have been deleted."/>
			<field name="_state" access="priv" jdoc="My current state."/>
			<field name="_log" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.TransactableTableImpl(Table)" access="pub" jdoc="">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.getType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.makeRowDecorator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.addConstraint(Constraint)" access="pub" jdoc="">
				<param name="constraint"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.removeConstraint(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.getConstraints()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.addIndex(Index)" access="pub" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.removeIndex(Index)" access="pub" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.populateIndex(Index)" access="pub" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.getIndexForColumn(Column)" access="pub" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.isColumnIndexed(Column)" access="pub" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.addColumn(Column)" access="pub" jdoc="">
				<param name="col"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.getColumn(int)" access="pub" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.getColumn(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.hasColumn(ColumnIdentifier)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.getColumnIndex(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.getColumnIdentifiers()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.getColumnCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.getIndices()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.addRow(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.getRowIterator(boolean)" access="pub" jdoc="">
				<param name="readOnly"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.getMatchingRows(List, List)" access="pub" jdoc="">
				<comm cntt="TODO: may be able to optimize this by first checking for for indices or"/>
				<comm cntt="with a special subclass of AbstractAcceptingRowIterator rather"/>
				<comm cntt="than creating a WhereNode"/>
				<param name="selectables"/>
				<param name="values"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.getIndexedRows(WhereNode, boolean)" access="pub" jdoc="">
				<comm cntt="NOTE: TransactableTableImpl can&amp;apos;t currently support modifiable indexed-derived RowIterators."/>
				<comm cntt="(Need a good way to have a &amp;quot;live&amp;quot; iterator across the _updatedRows.values() set)"/>
				<comm cntt="create a chain of..."/>
				<comm cntt="if no updates or deletes have been"/>
				<comm cntt="applied, only the underlying iterator is needed"/>
				<comm cntt="else filter out the updated or deleted rows"/>
				<comm cntt="(matching updates will be added back in below)"/>
				<comm cntt="if any rows have been inserted,"/>
				<comm cntt="add the matching inserted rows"/>
				<comm cntt="if not read only or any rows have been updated,"/>
				<comm cntt="add the matching updated rows"/>
				<comm cntt="NOTE: this is the part that doesn&amp;apos;t handle later updates correctly,"/>
				<comm cntt="since our matching.listIterator is disassociated from the"/>
				<comm cntt="underlying _updateRows.values()"/>
				<param name="node"/>
				<param name="readOnly"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.getComparatorForWhereNode(WhereNode)" access="priv" jdoc="">
				<param name="node"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.getRowCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.getNextRowId()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.freeRowId(int)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.drop()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.checkpoint()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.shutdown()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.remount(File, boolean)" access="pub" jdoc="">
				<param name="dir"/>
				<param name="dataOnly"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.getRow(int)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.applyInserts(Iterator)" access="pub" jdoc="">
				<param name="rows"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.applyDeletes(IntIterator)" access="pub" jdoc="">
				<param name="rowids"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.applyUpdates(Iterator)" access="pub" jdoc="">
				<param name="rows"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.commit()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.rollback()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.apply()" access="pub" jdoc="">
				<comm cntt="apply deletes"/>
				<comm cntt="apply updates"/>
				<comm cntt="apply inserts"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.makeTransactableTable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.checkConstraints(RowEvent)" access="prot" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.checkConstraints(RowEvent, boolean)" access="prot" jdoc="">
				<param name="event"/>
				<param name="deferred"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.hasDeferredConstraint()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.deleteRow(Row)" access="pub" jdoc="">
				<comm cntt="by construction, this method should never be"/>
				<comm cntt="called for a row that only exists in _insertedRows,"/>
				<comm cntt="so we&amp;apos;ll ignore that case"/>
				<comm cntt="add the row to our list of deleted rows"/>
				<comm cntt="delete from _updatedRows, if it&amp;apos;s in there"/>
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.updateRow(Row, Row)" access="pub" jdoc="">
				<param name="oldrow"/>
				<param name="newrow"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.getInsertedRow(int)" access="priv" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.assertOpen()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.assertCommitted()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.excludeDeletedTransformUpdated(RowIterator)" access="priv" jdoc="">
				<param name="base"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.excludeDeletedAndUpdated(RowIterator)" access="priv" jdoc="">
				<param name="base"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.hasUpdates()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.hasDeletes()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl.hasInserts()" access="priv" jdoc="">
			</mth>
		<class name="/:org.axiondb.engine.TransactableTableImpl$TransactableTableRowIterator" intfc="n" abs="n" inn="y" sloc="11" jdoc="Overrides {@link #remove} and {@link #set} to apply them to the current transaction.">
			<mth name="/:org.axiondb.engine.TransactableTableImpl$TransactableTableRowIterator.TransactableTableRowIterator(RowIterator)" access="pub" jdoc="">
				<param name="iter"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl$TransactableTableRowIterator.remove()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl$TransactableTableRowIterator.set(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.TransactableTableImpl$ExcludeDeleted" intfc="n" abs="n" inn="y" sloc="8" jdoc="Filters out rows that have been deleted in the current transaction.">
			<mth name="/:org.axiondb.engine.TransactableTableImpl$ExcludeDeleted.ExcludeDeleted(RowIterator)" access="pub" jdoc="">
				<param name="iter"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl$ExcludeDeleted.acceptable(int, Row)" access="prot" jdoc="">
				<param name="rowindex"/>
				<param name="row"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.TransactableTableImpl$ExcludeUpdated" intfc="n" abs="n" inn="y" sloc="8" jdoc="Filters out rows that have been updated in the current transaction.">
			<mth name="/:org.axiondb.engine.TransactableTableImpl$ExcludeUpdated.ExcludeUpdated(RowIterator)" access="pub" jdoc="">
				<param name="iter"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl$ExcludeUpdated.acceptable(int, Row)" access="prot" jdoc="">
				<param name="rowindex"/>
				<param name="row"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.TransactableTableImpl$TransformUpdated" intfc="n" abs="n" inn="y" sloc="19" jdoc="Transforms rows that have been updated within the current transaction.">
			<mth name="/:org.axiondb.engine.TransactableTableImpl$TransformUpdated.TransformUpdated(RowIterator)" access="pub" jdoc="">
				<param name="iter"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl$TransformUpdated.remove()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl$TransformUpdated.set(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl$TransformUpdated.transform(Row)" access="prot" jdoc="">
				<param name="row"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.TransactableTableImpl$InsertedRowIterator" intfc="n" abs="n" inn="y" sloc="11" jdoc="">
			<mth name="/:org.axiondb.engine.TransactableTableImpl$InsertedRowIterator.InsertedRowIterator(ListIterator)" access="pub" jdoc="">
				<param name="iter"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactableTableImpl$InsertedRowIterator.remove()" access="pub" jdoc="">
			</mth>
		</class>
		</class>
		<class name="/:org.axiondb.engine.Databases" intfc="n" abs="n" inn="n" sloc="54" jdoc="A static {@link Map} of {@link Database}s by name. @version $Revision: 1.5 $ $Date: 2003 05 20 20:21:28 $ @author Rodney Waldhoff">
			<const name="INSTANCE" access="pub" jdoc=""/>
			<field name="_map" access="priv" jdoc=""/>
			<const name="RUN_ON_STARTUP_PREFIX" access="priv" jdoc=""/>
			<const name="RUN_ON_STARTUP_SUFFIX" access="priv" jdoc=""/>
			<field name="_log" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.Databases.Databases()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.Databases.getOrCreateDatabase(String, File)" access="pub" jdoc="">
				<param name="name"/>
				<param name="dir"/>
			</mth>
			<mth name="/:org.axiondb.engine.Databases.forgetDatabase(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.Databases.runOnStartup(Database)" access="priv" jdoc="">
				<param name="db"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.BTreeIndexFactory" intfc="n" abs="n" inn="n" sloc="11" jdoc="An {@link IndexFactory} for {@link BaseBTreeIndex B-Tree indices}. @version $Revision: 1.4 $ $Date: 2003 03 27 19:14:03 $ @author Dave Perkarek Krohn">
			<mth name="/:org.axiondb.engine.BTreeIndexFactory.BTreeIndexFactory()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BTreeIndexFactory.makeNewInstance(String, Column, boolean)" access="pub" jdoc="">
				<param name="name"/>
				<param name="col"/>
				<param name="unique"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.ClearBindVariableWhereNodeVisitor" intfc="n" abs="n" inn="n" sloc="12" jdoc="A {@link WhereNodeVisitor} that {@link BindVariable#clearBoundValue clears}any {@link BindVariable}s found in the tree. &amp;lt;p&amp;gt; This visitor is completely stateless, and can be re-used or used in parallel without any problem. @version $Revision: 1.3 $ $Date: 2003 03 27 19:14:03 $ @author Rod Waldhoff">
			<mth name="/:org.axiondb.engine.ClearBindVariableWhereNodeVisitor.ClearBindVariableWhereNodeVisitor()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.ClearBindVariableWhereNodeVisitor.visitLeafWhereNode(LeafWhereNode)" access="pub" jdoc="">
				<param name="node"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.LazyRow" intfc="n" abs="n" inn="n" sloc="38" jdoc="A {@link Row} which loads data from a {@link RowSource}as needed. @version $Revision: 1.4 $ $Date: 2003 05 13 23:42:59 $ @author Rodney Waldhoff">
			<field name="_row" access="priv" jdoc=""/>
			<field name="_source" access="priv" jdoc=""/>
			<field name="_knownColumnIndex" access="priv" jdoc=""/>
			<field name="_knownValue" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.LazyRow.LazyRow(RowSource, int)" access="pub" jdoc="">
				<param name="source"/>
				<param name="id"/>
			</mth>
			<mth name="/:org.axiondb.engine.LazyRow.LazyRow(RowSource, int, int, Object)" access="pub" jdoc="">
				<param name="source"/>
				<param name="id"/>
				<param name="col"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.LazyRow.get(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.engine.LazyRow.set(int, Object)" access="pub" jdoc="">
				<param name="i"/>
				<param name="val"/>
			</mth>
			<mth name="/:org.axiondb.engine.LazyRow.size()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.LazyRow.getRow()" access="priv" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.BaseDatabase" intfc="n" abs="y" inn="n" sloc="546" jdoc="Abstract base {@link Database} implementation. @version $Revision: 1.34 $ $Date: 2003 07 07 23:36:12 $ @author Chuck Burdick @author Rodney Waldhoff @author Morgan Delagrange @author James Strachan @author Amrish Lal @author Rahul Dwivedi">
			<comm cntt="------------------------------------------------------------ Constructors"/>
			<comm cntt="------------------------------------------------------------------ Public"/>
			<comm cntt="--------------------------------------------------------------- Protected"/>
			<comm cntt="----------------------------------------------------------------- Private"/>
			<comm cntt="-------------------------------------------------------------- Attributes"/>
			<field name="_name" access="priv" jdoc=""/>
			<field name="_readOnly" access="priv" jdoc=""/>
			<field name="_listeners" access="priv" jdoc=""/>
			<field name="_tables" access="priv" jdoc=""/>
			<field name="_dataTypes" access="priv" jdoc=""/>
			<field name="_functions" access="priv" jdoc=""/>
			<field name="_indexTypes" access="priv" jdoc=""/>
			<field name="_tableTypes" access="priv" jdoc=""/>
			<field name="_sequences" access="priv" jdoc=""/>
			<field name="_transactionManager" access="priv" jdoc=""/>
			<field name="_colUpd" access="priv" jdoc=""/>
			<field name="_seqUpd" access="priv" jdoc=""/>
			<field name="_log" access="priv" jdoc=""/>
			<field name="_props" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.BaseDatabase.BaseDatabase(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.isReadOnly()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.getIndexFactory(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.getTableFactory(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.getDataType(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.getTable(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.getTable(TableIdentifier)" access="pub" jdoc="">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.dropTable(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.tableAltered(Table)" access="pub" jdoc="">
				<param name="t"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.addTable(Table)" access="pub" jdoc="">
				<param name="t"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.shutdown()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.remount(File)" access="pub" jdoc="">
				<param name="newdir"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.resolveFromNode(FromNode, TableIdentifier[])" access="pub" jdoc="">
				<param name="node"/>
				<param name="tables"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.resolveWhereNode(WhereNode, TableIdentifier[])" access="pub" jdoc="Resolves all {@link Selectable}s within the given {@link WhereNode} tree, relative to the given {@link Database} and{@link TableIdentifier tables}.">
				<param name="node"/>
				<param name="tables"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.resolveSelectable(Selectable, TableIdentifier[])" access="pub" jdoc="">
				<comm cntt="rahul added for evaluating expression"/>
				<param name="selectable"/>
				<param name="tables"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.checkpoint()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.createSequence(Sequence)" access="pub" jdoc="">
				<param name="seq"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.dropSequence(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.getSequence(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.getTransactionManager()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.addDatabaseModificationListener(DatabaseModificationListener)" access="pub" jdoc="">
				<param name="l"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.getDatabaseModificationListeners()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.getSequences()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.getSequenceCount()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.getTables()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.loadProperties(Properties)" access="prot" jdoc="">
				<param name="props"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.getBaseProperties()" access="prot" jdoc="Callers should treat the returned Properties as immutable.">
				<comm cntt="lets try the class loader that loaded me"/>
				<comm cntt="lets try the context class loader"/>
				<comm cntt="PROPOGATE UP!?!"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.createSystemTable(String)" access="prot" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.createMetaDataTables()" access="prot" jdoc="Should get called by subclasses in constructors">
				<comm cntt="yes, StringType &amp;quot;NO&amp;quot;, &amp;quot;YES&amp;quot;, &amp;quot;&amp;quot;"/>
				<comm cntt="bootstrap AXION_COLUMNS into AXION_TABLES"/>
				<comm cntt="XXX FIX ME XXX"/>
				<comm cntt="these are a bit hacked"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.addIndexType(String, String)" access="priv" jdoc="">
				<param name="typename"/>
				<param name="factoryclassname"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.addIndexType(String, IndexFactory)" access="priv" jdoc="">
				<param name="typename"/>
				<param name="factory"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.addDataType(String, String)" access="priv" jdoc="">
				<param name="typename"/>
				<param name="factoryclassname"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.addDataType(String, DataTypeFactory)" access="priv" jdoc="">
				<param name="typename"/>
				<param name="factory"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.addFunction(String, String)" access="priv" jdoc="">
				<param name="fnname"/>
				<param name="factoryclassname"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.addFunction(String, FunctionFactory)" access="priv" jdoc="">
				<param name="fnname"/>
				<param name="factory"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.getFunction(String)" access="priv" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.assertNotNull(Object, Object)" access="priv" jdoc="">
				<param name="obj1"/>
				<param name="obj2"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.getInstanceForClassName(String)" access="priv" jdoc="">
				<param name="classname"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.getDataType(String, String)" access="priv" jdoc="">
				<param name="tablename"/>
				<param name="columnname"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.resolveColumn(ColumnIdentifier, TableIdentifier[])" access="priv" jdoc="">
				<comm cntt="if the column already has a table name, table alias and data type, we&amp;apos;re done"/>
				<comm cntt="if the column&amp;apos;s table name is the table&amp;apos;s alias name,"/>
				<comm cntt="the column belongs to this table"/>
				<comm cntt="else if the column&amp;apos;s table name is the table&amp;apos;s name"/>
				<comm cntt="the column belongs to this table"/>
				<comm cntt="else if the column has no table name"/>
				<comm cntt="if the column is &amp;quot; &amp;quot;, we&amp;apos;re done"/>
				<comm cntt="look for it in this table"/>
				<param name="column"/>
				<param name="tables"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.resolveFunctionIdentifier(FunctionIdentifier, TableIdentifier[])" access="priv" jdoc="">
				<param name="fn"/>
				<param name="tables"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseDatabase.resolveExpression(ExpressionIdentifier, TableIdentifier[])" access="priv" jdoc="">
				<param name="expr"/>
				<param name="tables"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.BaseTable" intfc="n" abs="y" inn="n" sloc="317" jdoc="An abstract base implementation of {@link Table}. @version $Revision: 1.35 $ $Date: 2003 07 08 06:55:39 $ @author Chuck Burdick @author Rodney Waldhoff">
			<field name="_name" access="priv" jdoc=""/>
			<field name="_type" access="priv" jdoc=""/>
			<field name="_cols" access="priv" jdoc=""/>
			<field name="_indices" access="priv" jdoc=""/>
			<field name="_constraints" access="priv" jdoc=""/>
			<field name="_colIndexToColIdMap" access="priv" jdoc=""/>
			<field name="_log" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.BaseTable.getRowIterator()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.BaseTable(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.getRowIterator(boolean)" access="pub" jdoc="">
				<param name="readOnly"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.addRow(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.deleteRow(Row)" access="prot" jdoc="">
				<comm cntt="TODO: create singletonIntIterator(int) method in commons-collections"/>
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.updateRow(Row, Row)" access="prot" jdoc="">
				<param name="oldrow"/>
				<param name="newrow"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.getType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.setType(String)" access="prot" jdoc="">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.addConstraint(Constraint)" access="pub" jdoc="">
				<param name="constraint"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.removeConstraint(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.getPrimaryKey()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.getConstraints()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.addIndex(Index)" access="pub" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.removeIndex(Index)" access="pub" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.getIndexForColumn(Column)" access="pub" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.isColumnIndexed(Column)" access="pub" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.getMatchingRows(List, List)" access="pub" jdoc="">
				<comm cntt="TODO: may be able to optimize this by first checking for for indices or"/>
				<comm cntt="with a special subclass of AbstractAcceptingRowIterator rather"/>
				<comm cntt="than creating a WhereNode"/>
				<param name="selectables"/>
				<param name="values"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.getIndexedRows(WhereNode, boolean)" access="pub" jdoc="">
				<param name="node"/>
				<param name="readOnly"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.addColumn(Column)" access="pub" jdoc="Add the given {@link Column} to this table. This implementation throws an {@link AxionException}if rows have already been added to the table.">
				<comm cntt="XXX FIX ME XXX"/>
				<param name="col"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.hasColumn(ColumnIdentifier)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.getColumn(int)" access="pub" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.getColumn(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.getColumnIndex(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.getColumnIdentifiers()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.getColumnCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.drop()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.remount(File, boolean)" access="pub" jdoc="">
				<param name="dir"/>
				<param name="datafilesonly"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.checkpoint()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.shutdown()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.makeRowDecorator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.makeTransactableTable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.getIndices()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.checkConstraints(RowEvent)" access="prot" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.checkConstraints(RowEvent, boolean)" access="prot" jdoc="">
				<param name="event"/>
				<param name="deferred"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.hasDeferredConstraint()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.notifyColumnsOfNewLobDir(File)" access="prot" jdoc="">
				<param name="directory"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseTable.getIndexedRows(WhereNode)" access="priv" jdoc="">
				<param name="node"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.MemoryTableFactory" intfc="n" abs="n" inn="n" sloc="7" jdoc="A {@link TableFactory} for {@link MemoryTable memory-based tables}. @version $Revision: 1.2 $ $Date: 2002 12 16 22:18:30 $ @author Chuck Burdick">
			<mth name="/:org.axiondb.engine.MemoryTableFactory.MemoryTableFactory()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.MemoryTableFactory.createTable(Database, String)" access="pub" jdoc="">
				<param name="database"/>
				<param name="name"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.BaseIndex" intfc="n" abs="y" inn="n" sloc="33" jdoc="Abstract base implementation of {@link Index}. @version $Revision: 1.9 $ $Date: 2003 07 11 17:04:06 $ @author Chuck Burdick">
			<field name="_name" access="priv" jdoc=""/>
			<field name="_col" access="priv" jdoc=""/>
			<field name="_dataType" access="priv" jdoc=""/>
			<field name="_comparator" access="priv" jdoc=""/>
			<field name="_isUnique" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.BaseIndex.BaseIndex(String, Column, boolean)" access="pub" jdoc="">
				<param name="name"/>
				<param name="column"/>
				<param name="unique"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseIndex.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseIndex.getIndexedColumn()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseIndex.isUnique()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseIndex.getRowIterator(RowSource, ComparisonOperator, Object)" access="pub" jdoc="">
				<param name="source"/>
				<param name="theOperator"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseIndex.supportsOperator(ComparisonOperator)" access="pub" jdoc="">
				<param name="op"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseIndex.save(File)" access="pub" jdoc="">
				<param name="dataDirectory"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseIndex.getIndexLoader()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseIndex.getDataType()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseIndex.getComparator()" access="prot" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.IntBTreeIndexLoader" intfc="n" abs="n" inn="n" sloc="43" jdoc="An {@link IndexLoader} for {@link IntBTreeIndex}. @version $Revision: 1.3 $ $Date: 2002 12 16 22:18:30 $ @author Dave Pekarek Krohn">
			<mth name="/:org.axiondb.engine.IntBTreeIndexLoader.IntBTreeIndexLoader()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.IntBTreeIndexLoader.loadIndex(Table, File)" access="pub" jdoc="">
				<comm cntt="read version number"/>
				<comm cntt="read column name"/>
				<comm cntt="read unique flag"/>
				<comm cntt="create index"/>
				<comm cntt="return it"/>
				<param name="table"/>
				<param name="dataDirectory"/>
			</mth>
			<mth name="/:org.axiondb.engine.IntBTreeIndexLoader.saveIndex(Index, File)" access="pub" jdoc="">
				<comm cntt="write version number"/>
				<comm cntt="write column name"/>
				<comm cntt="write unique flag"/>
				<comm cntt="flush"/>
				<param name="ndx"/>
				<param name="dataDirectory"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.DiskTable" intfc="n" abs="n" inn="n" sloc="596" jdoc="A disk-resident {@link Table}. @version $Revision: 1.30 $ $Date: 2003 07 08 06:55:39 $ @author Chuck Burdick @author Rodney Waldhoff">
			<comm cntt="------------------------------------------------------------- Constructors"/>
			<comm cntt="------------------------------------------------------------------ Public"/>
			<comm cntt="--------------------------------------------------------------- Protected"/>
			<comm cntt="----------------------------------------------------------------- Private"/>
			<comm cntt="--------------------------------------------------------------- Attributes"/>
			<field name="_dir" access="priv" jdoc="The directory in which my data are stored."/>
			<field name="_pidxFileName" access="priv" jdoc="The name of my &amp;quot;.pidx&amp;quot; file."/>
			<field name="_freeIdsFileName" access="priv" jdoc="The name of my &amp;quot;.frid&amp;quot; file."/>
			<field name="_dataFile" access="priv" jdoc="The name of my &amp;quot;.data&amp;quot; file."/>
			<field name="_lobDir" access="priv" jdoc="The directory in which my LOB data are stored."/>
			<field name="_indexDir" access="priv" jdoc="The directory in which my indices are stored."/>
			<field name="_pidx" access="pub" jdoc="List of offsets into the .data file, by row id."/>
			<field name="_freeIds" access="priv" jdoc="List of free ids."/>
			<field name="_readFile" access="priv" jdoc=""/>
			<field name="_writeFile" access="priv" jdoc=""/>
			<field name="_modCount" access="priv" jdoc=""/>
			<field name="_savedAtModCount" access="priv" jdoc=""/>
			<field name="_rowCache" access="priv" jdoc=""/>
			<field name="_rowCount" access="priv" jdoc=""/>
			<const name="INVALID_OFFSET" access="priv" jdoc=""/>
			<const name="_log" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.DiskTable.DiskTable(String, File)" access="pub" jdoc="">
				<comm cntt="create the type file if it doesn&amp;apos;t already exist"/>
				<comm cntt="indices - directory containing index files"/>
				<param name="name"/>
				<param name="parentdir"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.getNextRowId()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.freeRowId(int)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.getRowCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.applyDeletes(IntIterator)" access="pub" jdoc="">
				<param name="iter"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.applyUpdates(Iterator)" access="pub" jdoc="">
				<comm cntt="write all the rows to a buffer, keeping track of the offsets"/>
				<comm cntt="update the slot in the pidx file to point to the new data"/>
				<comm cntt="do we still want this?"/>
				<comm cntt="now write out the buffered rows"/>
				<comm cntt="ignored"/>
				<comm cntt="ignored"/>
				<param name="rows"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.checkpoint()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.populateIndex(Index)" access="pub" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.getRowIterator()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.getRow(int)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.remount(File, boolean)" access="pub" jdoc="">
				<comm cntt="TODO: hack - prevent error when remounting while transactions"/>
				<comm cntt="are pending if NEVER_APPLY is true"/>
				<param name="newdir"/>
				<param name="datafilesonly"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.defrag()" access="pub" jdoc="">
				<comm cntt="the new pidx list"/>
				<comm cntt="the new .data file"/>
				<comm cntt="for each row"/>
				<comm cntt="skip the invalid ones"/>
				<comm cntt="for valid ones, read the old row"/>
				<comm cntt="append it to the new pidx list"/>
				<comm cntt="write it to the new file"/>
				<comm cntt="and notify the indices that the rowid has changed"/>
				<comm cntt="write out the new files"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.glomLobs()" access="pub" jdoc="">
				<comm cntt="the glommed .data file"/>
				<comm cntt="the glommed .pidx file"/>
				<comm cntt="FOR EACH ROW"/>
				<comm cntt="FOR EACH COLUMN"/>
				<comm cntt="FOR EACH LOB COLUMN"/>
				<comm cntt="GET THE OLD FILE"/>
				<comm cntt="WRITE IT TO THE NEW FILE"/>
				<comm cntt="SET THE LOB LOCATOR FOR THAT"/>
				<comm cntt="SET THE NEW PIDX ENTRY"/>
				<comm cntt="WRITE THE ROW TO THE NEW DATA FILE"/>
				<comm cntt="CLOSE OUT ALL THE GLOMMED FILES"/>
				<comm cntt="CLOSE OUT THE GLOMMED .DATA FILE"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.applyInserts(Iterator)" access="pub" jdoc="">
				<comm cntt="write all the rows to a buffer, keeping track of the offsets"/>
				<comm cntt="do we still want this?"/>
				<comm cntt="now write out the buffered rows"/>
				<comm cntt="ignored"/>
				<comm cntt="ignored"/>
				<param name="rows"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.getLobDir()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.getRootDir()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.closeFiles()" access="prot" jdoc="">
				<comm cntt="ignored"/>
				<comm cntt="ignored"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.saveIndices()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.createOrLoadPidxFile()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.createOrLoadFreeIdsFile()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.createOrLoadDataFile()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.getRowByOffset(int, long)" access="pub" jdoc="">
				<param name="idToAssign"/>
				<param name="ptr"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.getRowByOffset(int, long, RandomAccessFile)" access="priv" jdoc="">
				<param name="idToAssign"/>
				<param name="ptr"/>
				<param name="data"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.getReadFile()" access="priv" jdoc="">
				<comm cntt="_readFile = new BufferedRandomAccessFile(getDataFile(),&amp;quot;r&amp;quot;,32);"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.getWriteFile()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.initFiles(File, boolean)" access="priv" jdoc="">
				<param name="basedir"/>
				<param name="datafilesonly"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.getDataFile()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.clearDataFileReference()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.createRowCache()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.cacheRow(int, Row)" access="priv" jdoc="">
				<param name="rowid"/>
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.cacheRow(Integer, Row)" access="priv" jdoc="">
				<param name="rowid"/>
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.uncacheRow(int)" access="priv" jdoc="">
				<param name="rowid"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.getCachedRow(int)" access="priv" jdoc="">
				<param name="rowid"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.initializeRowCount()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.writePidxFile()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.writeFridFile()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskTable.appendToPidxFile(LongList)" access="priv" jdoc="">
				<param name="values"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.AxionSequencesMetaTableUpdater" intfc="n" abs="n" inn="n" sloc="32" jdoc="Updates the &amp;lt;code&amp;gt;AXION_SEQUENCES&amp;lt; code&amp;gt; meta table @version $Revision: 1.4 $ $Date: 2003 05 01 16:39:00 $ @author Chuck Burdick @author Rodney Waldhoff">
			<field name="_log" access="priv" jdoc=""/>
			<field name="_db" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.AxionSequencesMetaTableUpdater.AxionSequencesMetaTableUpdater(Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionSequencesMetaTableUpdater.sequenceAdded(DatabaseSequenceEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionSequencesMetaTableUpdater.sequenceIncremented(DatabaseSequenceEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.AxionTypesMetaTableUpdater" intfc="n" abs="n" inn="n" sloc="37" jdoc="Updates the &amp;lt;code&amp;gt;AXION_TYPES&amp;lt; code&amp;gt; meta table @version $Revision: 1.2 $ $Date: 2003 03 27 19:14:03 $ @author Chuck Burdick @author Rodney Waldhoff">
			<field name="_log" access="priv" jdoc=""/>
			<field name="_db" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.AxionTypesMetaTableUpdater.AxionTypesMetaTableUpdater(Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionTypesMetaTableUpdater.typeAdded(DatabaseTypeEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.engine.AxionTypesMetaTableUpdater.createRowForAddedType(String, DataType)" access="priv" jdoc="">
				<comm cntt="TYPE_NAME"/>
				<comm cntt="DATA_TYPE"/>
				<comm cntt="PRECISION"/>
				<comm cntt="LITERAL_PREFIX"/>
				<comm cntt="LITERAL_SUFFIX"/>
				<comm cntt="CREATE_PARAMS"/>
				<comm cntt="NULLABLE"/>
				<comm cntt="CASE_SENSITIVE"/>
				<comm cntt="SEARCHABLE"/>
				<comm cntt="UNSIGNED_ATTRIBUTE"/>
				<comm cntt="FIXED_PREC_SCALE"/>
				<comm cntt="AUTO_INCREMENT"/>
				<comm cntt="LOCAL_TYPE_NAME"/>
				<comm cntt="MINIMUM_SCALE"/>
				<comm cntt="MAXIMUM_SCALE"/>
				<comm cntt="SQL_DATA_TYPE"/>
				<comm cntt="SQL_DATETIME_SUB"/>
				<comm cntt="NUM_PREC_RADIX"/>
				<param name="name"/>
				<param name="type"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.SortedMapIndex" intfc="n" abs="n" inn="n" sloc="198" jdoc="An {@link Index} based upon a {@link SortedMap}. @version $Revision: 1.14 $ $Date: 2003 05 02 15:11:18 $ @author Morgan Delagrange @author Rodney Waldhoff">
			<field name="_map" access="priv" jdoc=""/>
			<field name="_name" access="priv" jdoc=""/>
			<field name="_column" access="priv" jdoc=""/>
			<field name="_unique" access="priv" jdoc=""/>
			<field name="_log" access="priv" jdoc=""/>
			<const name="LOADER" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.SortedMapIndex.SortedMapIndex(String, Column)" access="pub" jdoc="">
				<param name="name"/>
				<param name="col"/>
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.SortedMapIndex(String, Column, boolean)" access="pub" jdoc="">
				<param name="name"/>
				<param name="col"/>
				<param name="unique"/>
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.SortedMapIndex(String, Column, SortedMap)" access="pub" jdoc="">
				<param name="name"/>
				<param name="col"/>
				<param name="map"/>
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.SortedMapIndex(String, Column, SortedMap, boolean)" access="pub" jdoc="">
				<param name="name"/>
				<param name="col"/>
				<param name="map"/>
				<param name="unique"/>
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.getIndexedColumn()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.isUnique()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.getRowIterator(RowSource, ComparisonOperator, Object)" access="pub" jdoc="">
				<param name="source"/>
				<param name="op"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.supportsOperator(ComparisonOperator)" access="pub" jdoc="">
				<param name="op"/>
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.columnAdded(ColumnEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.rowInserted(RowEvent)" access="pub" jdoc="">
				<comm cntt="_log.debug(&amp;quot;SortedMapIndex.rowInserted(): No value found for key, inserting.&amp;quot;);"/>
				<comm cntt="_log.debug(&amp;quot;SortedMapIndex.rowInserted(): List found for key, appending.&amp;quot;);"/>
				<comm cntt="_log.debug(&amp;quot;SortedMapIndex.rowInserted(): Non-list value found for key, creating new list.&amp;quot;);"/>
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.rowDeleted(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.rowUpdated(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.constraintAdded(ConstraintEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.constraintRemoved(ConstraintEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.save(File)" access="pub" jdoc="">
				<param name="dataDirectory"/>
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.getIndexLoader()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.changeRowId(Table, Row, int, int)" access="pub" jdoc="">
				<param name="table"/>
				<param name="row"/>
				<param name="oldId"/>
				<param name="newId"/>
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.flattenLists(Collection)" access="priv" jdoc="">
				<param name="values"/>
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex.getMap()" access="prot" jdoc="">
			</mth>
		<class name="/:org.axiondb.engine.SortedMapIndex$IntMapEntry" intfc="n" abs="n" inn="y" sloc="17" jdoc="">
			<field name="_key" access="priv" jdoc=""/>
			<field name="_value" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.SortedMapIndex$IntMapEntry.IntMapEntry(Object, int)" access="pub" jdoc="">
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex$IntMapEntry.getKey()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex$IntMapEntry.getValue()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndex$IntMapEntry.setValue(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
		</class>
		</class>
		<class name="/:org.axiondb.engine.DiskTableFactory" intfc="n" abs="n" inn="n" sloc="7" jdoc="A {@link TableFactory} for {@link DiskTable disk-based tables}. @version $Revision: 1.2 $ $Date: 2002 12 16 22:18:30 $ @author Chuck Burdick @author Rodney Waldhoff">
			<mth name="/:org.axiondb.engine.DiskTableFactory.DiskTableFactory()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskTableFactory.createTable(Database, String)" access="pub" jdoc="">
				<param name="database"/>
				<param name="name"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.DiskDatabase" intfc="n" abs="n" inn="n" sloc="179" jdoc="A disk-resident {@link org.axiondb.Database}. @version $Revision: 1.10 $ $Date: 2003 05 09 21:49:41 $ @author Chuck Burdick @author Rodney Waldhoff @author Morgan Delagrange">
			<comm cntt="------------------------------------------------------------- Constructors"/>
			<comm cntt="-------------------------------------------------------------- Attributes"/>
			<comm cntt="----------------------------------------------------------- Inner Classes"/>
			<const name="DEFAULT_TABLE_FACTORY" access="priv" jdoc=""/>
			<field name="_log" access="priv" jdoc=""/>
			<field name="_tableDirectory" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.DiskDatabase.DiskDatabase(File)" access="pub" jdoc="">
				<param name="dbDir"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskDatabase.DiskDatabase(String, File)" access="pub" jdoc="">
				<param name="name"/>
				<param name="dbDir"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskDatabase.DiskDatabase(String, File, Properties)" access="pub" jdoc="">
				<comm cntt="PROPOGATE UP!?!"/>
				<param name="name"/>
				<param name="dbDir"/>
				<param name="props"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskDatabase.getTableDirectory()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskDatabase.remount(File)" access="pub" jdoc="">
				<param name="newdir"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskDatabase.getTableFactory(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskDatabase.defrag()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskDatabase.createSystemTable(String)" access="prot" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskDatabase.loadTables(File)" access="priv" jdoc="">
				<comm cntt="TableLoader[] loaders = new TableLoader[tables.length];"/>
				<param name="parentdir"/>
			</mth>
			<mth name="/:org.axiondb.engine.DiskDatabase.loadSequences()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskDatabase.checkpoint()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.DiskDatabase.createSequence(Sequence)" access="pub" jdoc="">
				<param name="seq"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.IntArrayIndexLoader" intfc="n" abs="n" inn="n" sloc="62" jdoc="An {@link IndexLoader} for {@link IntArrayIndex}. @version $Revision: 1.4 $ $Date: 2003 04 22 19:15:14 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.engine.IntArrayIndexLoader.IntArrayIndexLoader()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.IntArrayIndexLoader.loadIndex(Table, File)" access="pub" jdoc="">
				<comm cntt="read version number"/>
				<comm cntt="read column name"/>
				<comm cntt="read unique flag"/>
				<comm cntt="read keys"/>
				<comm cntt="read values"/>
				<comm cntt="create index"/>
				<comm cntt="return it"/>
				<param name="table"/>
				<param name="dataDirectory"/>
			</mth>
			<mth name="/:org.axiondb.engine.IntArrayIndexLoader.saveIndex(Index, File)" access="pub" jdoc="">
				<comm cntt="write version number"/>
				<comm cntt="write column name"/>
				<comm cntt="write unique flag"/>
				<comm cntt="write keys"/>
				<comm cntt="size"/>
				<comm cntt="values"/>
				<comm cntt="write values"/>
				<comm cntt="size"/>
				<comm cntt="values"/>
				<comm cntt="flush"/>
				<param name="ndx"/>
				<param name="dataDirectory"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.IntBTreeIndex" intfc="n" abs="n" inn="n" sloc="118" jdoc="A {@link BaseBTreeIndex B-Tree index} over integer keys. @version $Revision: 1.20 $ $Date: 2003 05 20 17:59:10 $ @author Chuck Burdick @author Dave Pekarek Krohn">
			<comm cntt="TABLE MODIFICATION LISTENER"/>
			<field name="_tree" access="priv" jdoc=""/>
			<const name="LOADER" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.IntBTreeIndex.IntBTreeIndex(String, Column, boolean, File)" access="pub" jdoc="">
				<param name="name"/>
				<param name="column"/>
				<param name="unique"/>
				<param name="dataDirectory"/>
			</mth>
			<mth name="/:org.axiondb.engine.IntBTreeIndex.IntBTreeIndex(String, Column, boolean)" access="pub" jdoc="">
				<param name="name"/>
				<param name="column"/>
				<param name="unique"/>
			</mth>
			<mth name="/:org.axiondb.engine.IntBTreeIndex.getRowIterator(RowSource, ComparisonOperator, Object)" access="pub" jdoc="">
				<comm cntt="null fails all comparisions I support"/>
				<comm cntt="TODO: use SingletonIntListIterator instead?"/>
				<comm cntt="NOTE: _tree.valueIterator returns a continuation rather than enumerating all"/>
				<comm cntt="elements of the RowIterator first. This is slightly slower than the"/>
				<comm cntt="getAllFrom for small tables, but faster and less memory consumptive"/>
				<comm cntt="memory for large tables, especially when we rarely visit the tail of the"/>
				<comm cntt="result set. This also postpones loading the index nodes until the data"/>
				<comm cntt="is actually read (in constrast, getAllFrom(&amp;lt;some small value&amp;gt;) will load"/>
				<comm cntt="all or nearly all nodes."/>
				<comm cntt="For optimal performance it may be best to determine how large the index"/>
				<comm cntt="is and use that to figure out which approach--enumeration or"/>
				<comm cntt="continuation--is most appropriate for the given query."/>
				<comm cntt="resultIds = _tree.getAllFrom(iSuccessor);"/>
				<comm cntt="NOTE: see note above."/>
				<comm cntt="resultIds = _tree.getAllFrom(iVal);"/>
				<param name="source"/>
				<param name="theOperator"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.IntBTreeIndex.getIndexLoader()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.IntBTreeIndex.getBTree()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.IntBTreeIndex.rowInserted(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.IntBTreeIndex.rowDeleted(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.IntBTreeIndex.rowUpdated(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.IntBTreeIndex.changeRowId(Table, Row, int, int)" access="pub" jdoc="">
				<param name="table"/>
				<param name="row"/>
				<param name="oldId"/>
				<param name="newId"/>
			</mth>
			<mth name="/:org.axiondb.engine.IntBTreeIndex.getSuccessor(DataType, Object)" access="priv" jdoc="">
				<param name="type"/>
				<param name="convertedValue"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.TransactionManagerImpl" intfc="n" abs="n" inn="n" sloc="113" jdoc="An implemenation of {@link TransactionManager} currently only supportd {@link SnapshotIsolationTransaction}s. @version $Revision: 1.12 $ $Date: 2003 06 10 22:53:06 $ @author Rodney Waldhoff">
			<comm cntt="allow a System property to indicate that we should never apply a transaction"/>
			<field name="_committedTransactions" access="priv" jdoc=""/>
			<field name="_openTransactions" access="priv" jdoc=""/>
			<field name="_database" access="priv" jdoc=""/>
			<const name="NEVER_APPLY" access="prot" jdoc=""/>
			<field name="_log" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.TransactionManagerImpl.TransactionManagerImpl(Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactionManagerImpl.createTransaction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactionManagerImpl.commitTransaction(Transaction)" access="pub" jdoc="">
				<comm cntt="check for conflicts"/>
				<param name="t"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactionManagerImpl.abortTransaction(Transaction)" access="pub" jdoc="">
				<param name="t"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactionManagerImpl.shutdown()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactionManagerImpl.isShutdown()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactionManagerImpl.inConflict(Transaction, Transaction)" access="priv" jdoc="">
				<comm cntt="if the new transaction changed anything"/>
				<comm cntt="then check that none of the tables read were changed"/>
				<comm cntt="by the already committed transaction"/>
				<comm cntt="(note that this is much too strong of a conflict detection"/>
				<comm cntt="alogrithm, it&amp;apos;ll give a lot of false conflicts)."/>
				<param name="newT"/>
				<param name="oldT"/>
			</mth>
			<mth name="/:org.axiondb.engine.TransactionManagerImpl.assertNotShutdown()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactionManagerImpl.tryToApply()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.TransactionManagerImpl.getLastCommittedTransaction()" access="priv" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.ObjectArrayIndexLoader" intfc="n" abs="n" inn="n" sloc="66" jdoc="An {@link IndexLoader} for {@link ObjectArrayIndex}. @version $Revision: 1.3 $ $Date: 2003 04 22 19:15:14 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.engine.ObjectArrayIndexLoader.ObjectArrayIndexLoader()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.ObjectArrayIndexLoader.loadIndex(Table, File)" access="pub" jdoc="">
				<comm cntt="read version number"/>
				<comm cntt="read column name"/>
				<comm cntt="read unique"/>
				<comm cntt="read keys"/>
				<comm cntt="read values"/>
				<comm cntt="create index"/>
				<comm cntt="return it"/>
				<param name="table"/>
				<param name="dataDirectory"/>
			</mth>
			<mth name="/:org.axiondb.engine.ObjectArrayIndexLoader.saveIndex(Index, File)" access="pub" jdoc="">
				<comm cntt="write version number"/>
				<comm cntt="write column name"/>
				<comm cntt="write unique flag"/>
				<comm cntt="write keys"/>
				<comm cntt="size"/>
				<comm cntt="values"/>
				<comm cntt="write values"/>
				<comm cntt="size"/>
				<comm cntt="values"/>
				<comm cntt="flush"/>
				<param name="ndx"/>
				<param name="dataDirectory"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.FindBindVariableWhereNodeVisitor" intfc="n" abs="n" inn="n" sloc="35" jdoc="A {@link WhereNodeVisitor} that finds an indexed {@link BindVariable}within the visited tree. @version $Revision: 1.4 $ $Date: 2003 01 06 19:30:56 $ @author Rod Waldhoff @deprecated Apparently no longer used (replaced by CollectBindVariableWhereNodeVisitor)">
			<field name="_index" access="priv" jdoc=""/>
			<field name="_bindVar" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.FindBindVariableWhereNodeVisitor.FindBindVariableWhereNodeVisitor(int)" access="pub" jdoc="@param index the 1-based index of the {@link BindVariable} to find">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.engine.FindBindVariableWhereNodeVisitor.getBindVariable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.FindBindVariableWhereNodeVisitor.visit(WhereNode)" access="pub" jdoc="">
				<param name="node"/>
			</mth>
			<mth name="/:org.axiondb.engine.FindBindVariableWhereNodeVisitor.visitLeafWhereNode(LeafWhereNode)" access="pub" jdoc="">
				<param name="node"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.BaseRow" intfc="n" abs="y" inn="n" sloc="56" jdoc="An abstract base implementation of {@link Row}, providing {@link #equals equals}, {@link #hashCode hashCode} and{@link #toString toString} implementations. @version $Revision: 1.2 $ $Date: 2002 07 22 23:34:29 $ @author Rodney Waldhoff">
			<field name="_id" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.BaseRow.hashCode()" access="pub" jdoc="Return a hash code for me, in keeping with the generic {@link Object#hashCode}contract.">
			</mth>
			<mth name="/:org.axiondb.engine.BaseRow.equals(Object)" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; iff &amp;lt;i&amp;gt;that&amp;lt; i&amp;gt; is a {@link Row} with the same number of fields and each is equal to the corresponding field in me. &amp;lt;p&amp;gt; Adheres to the generic {@link Object#equals}contract.">
				<comm cntt="they&amp;apos;re both null, so keep going"/>
				<param name="that"/>
			</mth>
			<mth name="/:org.axiondb.engine.BaseRow.toString()" access="pub" jdoc="Returns a simple {@link String} representation of me, perhaps suitable for debugging purposes.">
			</mth>
			<mth name="/:org.axiondb.engine.BaseRow.getIdentifier()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.BaseRow.setIdentifier(int)" access="pub" jdoc="">
				<param name="id"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.SnapshotIsolationTransaction" intfc="n" abs="n" inn="n" sloc="164" jdoc="A {@link Transaction} implementation that provides &amp;quot;snapshot isolation&amp;quot;, which supports TRANSACTION_SERIALIZABLE isolation without locking. @version $Revision: 1.19 $ $Date: 2003 07 07 23:36:12 $ @author Rodney Waldhoff @author Chuck Burdick @author Amrish Lal">
			<field name="_modifiedTables" access="priv" jdoc=""/>
			<field name="_readTables" access="priv" jdoc=""/>
			<field name="_wrappedTables" access="priv" jdoc=""/>
			<field name="_openOnTransaction" access="priv" jdoc=""/>
			<field name="_state" access="priv" jdoc=""/>
			<field name="_log" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.SnapshotIsolationTransaction(Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.getState()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.getTable(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.getTable(TableIdentifier)" access="pub" jdoc="">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.dropTable(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.addTable(Table)" access="pub" jdoc="">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.tableAltered(Table)" access="pub" jdoc="">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.getDataType(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.getIndexFactory(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.getTableFactory(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.getTableDirectory()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.resolveSelectable(Selectable, TableIdentifier[])" access="pub" jdoc="">
				<param name="selectable"/>
				<param name="tables"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.resolveFromNode(FromNode, TableIdentifier[])" access="pub" jdoc="">
				<param name="from"/>
				<param name="tables"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.resolveWhereNode(WhereNode, TableIdentifier[])" access="pub" jdoc="">
				<param name="where"/>
				<param name="tables"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.checkpoint()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.shutdown()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.remount(File)" access="pub" jdoc="">
				<param name="newdir"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.isReadOnly()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.createSequence(Sequence)" access="pub" jdoc="">
				<param name="seq"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.getSequence(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.dropSequence(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.commit()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.rollback()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.apply()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.addDatabaseModificationListener(DatabaseModificationListener)" access="pub" jdoc="FIXME - Needs Impl! (CB, 12 23 2002">
				<param name="l"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.getDatabaseModificationListeners()" access="pub" jdoc="FIXME - Needs Impl! (CB, 12 23 2002">
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.columnAdded(ColumnEvent)" access="pub" jdoc="FIXME - Needs Impl! (CB, 12 23 2002">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.rowInserted(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.rowDeleted(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.rowUpdated(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.constraintAdded(ConstraintEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.constraintRemoved(ConstraintEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.getOpenOnTransaction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.getModifiedTables()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.getReadTables()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.getTransactionManager()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.getWrappedTable(TableIdentifier)" access="priv" jdoc="">
				<param name="id"/>
			</mth>
			<mth name="/:org.axiondb.engine.SnapshotIsolationTransaction.assertOpen()" access="priv" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.SortedMapIndexLoader" intfc="n" abs="n" inn="n" sloc="52" jdoc="An {@link IndexLoader} for {@link SortedMapIndex}. @version $Revision: 1.2 $ $Date: 2002 12 16 22:18:30 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.engine.SortedMapIndexLoader.SortedMapIndexLoader()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndexLoader.makeNewInstance(String, Column, boolean)" access="pub" jdoc="">
				<param name="name"/>
				<param name="col"/>
				<param name="unique"/>
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndexLoader.loadIndex(Table, File)" access="pub" jdoc="">
				<comm cntt="read version number"/>
				<comm cntt="read column name"/>
				<comm cntt="read unique flag"/>
				<comm cntt="read map"/>
				<comm cntt="create index"/>
				<comm cntt="return it"/>
				<param name="table"/>
				<param name="dataDirectory"/>
			</mth>
			<mth name="/:org.axiondb.engine.SortedMapIndexLoader.saveIndex(Index, File)" access="pub" jdoc="">
				<comm cntt="write version number"/>
				<comm cntt="write column name"/>
				<comm cntt="write unique flag"/>
				<comm cntt="write map"/>
				<comm cntt="flush"/>
				<param name="ndx"/>
				<param name="dataDirectory"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/:org.axiondb.engine.commands">
		<class name="/:org.axiondb.engine.commands.CheckFileStateCommand" intfc="n" abs="n" inn="n" sloc="74" jdoc="A &amp;lt;code&amp;gt;CHECKFILESTATE&amp;lt; code&amp;gt; query. Generates a non-empty {@link java.sql.ResultSet} if the database&amp;apos;s files are accessible, an empty one otherwise. @version $Revision: 1.11 $ $Date: 2003 01 09 19:36:02 $ @author Rodney Waldhoff">
			<field name="_log" access="priv" jdoc=""/>
			<const name="SELECTED" access="priv" jdoc=""/>
			<const name="MAP" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.commands.CheckFileStateCommand.CheckFileStateCommand()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CheckFileStateCommand.execute(Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CheckFileStateCommand.executeQuery(Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CheckFileStateCommand.createSuccessResultSet()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CheckFileStateCommand.createFailureResultSet()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CheckFileStateCommand.executeUpdate(Database)" access="pub" jdoc="">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CheckFileStateCommand.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.commands.SelectCommand" intfc="n" abs="n" inn="n" sloc="520" jdoc="A &amp;lt;tt&amp;gt;SELECT&amp;lt; tt&amp;gt; query. @version $Revision: 1.39 $ $Date: 2003 07 01 13:42:23 $ @author Morgan Delagrange @author Rodney Waldhoff @author Chuck Burdick @author Amrish Lal">
			<comm cntt="------------------------------------------------------------ Constructors"/>
			<comm cntt="-------------------------------------------------------------- Properties"/>
			<comm cntt="-------------------------------------------------- Command Implementation"/>
			<comm cntt="----------------------------------------------------------------- Members"/>
			<comm cntt="---"/>
			<field name="_select" access="priv" jdoc=""/>
			<field name="_from" access="priv" jdoc=""/>
			<field name="_where" access="priv" jdoc=""/>
			<field name="_orderBy" access="priv" jdoc=""/>
			<field name="_distinct" access="priv" jdoc=""/>
			<field name="_resolved" access="priv" jdoc=""/>
			<field name="_foundAggregateFunction" access="priv" jdoc=""/>
			<field name="_limit" access="priv" jdoc=""/>
			<field name="_offset" access="priv" jdoc=""/>
			<field name="_currentDatabase" access="priv" jdoc=""/>
			<field name="_colIdToFieldMap" access="priv" jdoc=""/>
			<field name="_indexOffset" access="priv" jdoc=""/>
			<field name="_unappliedWhereNodes" access="priv" jdoc=""/>
			<field name="_literals" access="priv" jdoc=""/>
			<field name="_rows" access="priv" jdoc=""/>
			<field name="_selected" access="priv" jdoc=""/>
			<field name="_applyWhereNodesAfterJoin" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.SelectCommand()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.setSelect(List)" access="pub" jdoc="">
				<param name="columns"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.addSelect(Selectable)" access="pub" jdoc="Adds a {@link Selectable} to the list of items being selected. @param column the {@link Selectable} to add @throws IllegalStateException if I have already been resolved">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.getSelect(int)" access="pub" jdoc="Gets the &amp;lt;i&amp;gt;i&amp;lt; i&amp;gt;&amp;lt;sup&amp;gt;th&amp;lt; sup&amp;gt; {@link Selectable} being selected. Clients should treat the returned value as immutable. @param i the zero-based index">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.setSelect(int, Selectable)" access="pub" jdoc="Sets the &amp;lt;i&amp;gt;i&amp;lt; i&amp;gt;&amp;lt;sup&amp;gt;th&amp;lt; sup&amp;gt; {@link Selectable} being selected. @param i the zero-based index @param sel the new {@link Selectable} @throws IllegalStateException if I have already been resolved">
				<param name="i"/>
				<param name="sel"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.getSelectCount()" access="pub" jdoc="Gets the number of {@link Selectable}s being selected.">
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.setFrom(FromNode)" access="pub" jdoc="Sets the root {@link FromNode} for the select statement.">
				<param name="from"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.addFrom(TableIdentifier)" access="pub" jdoc="Adds a {@link TableIdentifier} to the list of tables being selected from. @param table a {@link TableIdentifier} @throws IllegalStateException if I have already been resolved">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.getFrom()" access="pub" jdoc="Gets the root {@link FromNode} for the select statement.">
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.getFrom(int)" access="pub" jdoc="Gets the &amp;lt;i&amp;gt;i&amp;lt; i&amp;gt;&amp;lt;sup&amp;gt;th&amp;lt; sup&amp;gt; table being selected. Clients should treat the returned value as immutable. @param i the zero-based index">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.getFromCount()" access="pub" jdoc="Gets the number of tables being from.">
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.setWhere(WhereNode)" access="pub" jdoc="Sets the {@link WhereNode where tree} for this query. @param where a {@link WhereNode} @throws IllegalStateException if I have already been resolved">
				<param name="where"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.getWhere()" access="pub" jdoc="Returns the {@link WhereNode where tree} for this query. Clients should treat the returned value as immutable. @return the {@link WhereNode where tree} for this query, or &amp;lt;tt&amp;gt;null&amp;lt; tt&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.setOrderBy(List)" access="pub" jdoc="Sets the order by clause for this query. @param orderby a {@link List} of {@link OrderNode}s. @throws IllegalStateException if I have already been resolved">
				<param name="orderby"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.addOrderBy(OrderNode)" access="pub" jdoc="Appends an {@link OrderNode} to the order by clause for this query @param orderby an {@link OrderNode} to append @throws IllegalStateException if I have already been resolved">
				<param name="orderby"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.getOrderBy(int)" access="pub" jdoc="Gets the &amp;lt;i&amp;gt;i&amp;lt; i&amp;gt;&amp;lt;sup&amp;gt;th&amp;lt; sup&amp;gt; {@link OrderNode} in my order by clause. Clients should treat the returned value as immutable. @param i the zero-based index">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.getOrderByCount()" access="pub" jdoc="Gets the number of {@link OrderNode}s in my query.">
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.setDistinct(boolean)" access="pub" jdoc="Determines if the {@link java.sql.ResultSet} generated from this object will contain distinct tuples (default is false). @param distinct true for distinct tuples">
				<param name="distinct"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.getDistinct()" access="pub" jdoc="Indicates if the {@link java.sql.ResultSet} generated from this object will contain distinct tuples. @return &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; for distinct tuples">
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.setLimit(Literal)" access="pub" jdoc="">
				<param name="limit"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.getLimit()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.setOffset(Literal)" access="pub" jdoc="">
				<param name="offset"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.getOffset()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.getFromArray()" access="priv" jdoc="@deprecated">
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.executeQuery(Database)" access="pub" jdoc="Execute this command, returning a {@link java.sql.ResultSet}. @return the {@link java.sql.ResultSet} generated by this command. @throws SQLException">
				<comm cntt="apply aggregate function, if any"/>
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.getBindVariableIterator()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.processQuery(Database)" access="priv" jdoc="">
				<comm cntt="the map of column identifiers to field locations (index of column in row&amp;apos;s array)"/>
				<comm cntt="And apply any remaining where nodes to the join."/>
				<comm cntt="apply distinct, if needed"/>
				<comm cntt="apply the ORDER BY if any"/>
				<comm cntt="if there&amp;apos;s a limit, apply it"/>
				<comm cntt="We&amp;apos;re done."/>
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.processFromTree(FromNode, Database)" access="priv" jdoc="">
				<comm cntt="determine if we can use index to carry out join (faster)."/>
				<comm cntt="System.out.println(&amp;quot;Table : &amp;quot; + tid.toString());"/>
				<comm cntt="System.out.println(&amp;quot;lcol : &amp;quot; + lcol.toString());"/>
				<comm cntt="System.out.println(&amp;quot;rcol : &amp;quot; + rcol.toString());"/>
				<comm cntt="check if table has index on rcol."/>
				<comm cntt="table does not have index on rcol. Index access cannot be carried out on the table."/>
				<comm cntt="System.out.println(&amp;quot;Table &amp;quot; + tid.toString() + &amp;quot; does not have index on &amp;quot; + rcol.toString());"/>
				<comm cntt="new syntax join is being processed; hence, apply all the conditions in the"/>
				<comm cntt="WHERE clause after doing join."/>
				<comm cntt="Get row iterator from left subtree."/>
				<comm cntt="Get row iterator from right subtree."/>
				<comm cntt="Get row iterator for literals, if any, in the select list"/>
				<comm cntt="set _literals to null, so that they are not processed"/>
				<comm cntt="by each recursive call to processFromTree."/>
				<comm cntt="System.out.println(&amp;quot;IndexJoinedRowIterator being created.&amp;quot;);"/>
				<comm cntt="Join is carried out using nested loop algorithm; hence, in case of"/>
				<comm cntt="of right outer join, we make the right table as the outer table of"/>
				<comm cntt="the nested loop algorithm. (Note that no change is made to _colIdToFieldmap)."/>
				<comm cntt="if literals exist, add them to the join."/>
				<comm cntt="set join type and join condition."/>
				<comm cntt="no join"/>
				<comm cntt="statements of type &amp;quot;select &amp;apos;literal&amp;apos;&amp;quot; are allowed."/>
				<param name="from"/>
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.processTable(TableIdentifier, Database, ColumnIdentifier, int)" access="priv" jdoc="">
				<comm cntt="Create a references to the RowIterator for this table."/>
				<comm cntt="And create the set of WhereNodes that apply to this table."/>
				<comm cntt="If the node only references this table..."/>
				<comm cntt=".. and we haven&amp;apos;t yet applied an index,..."/>
				<comm cntt="...then try to find an index for this node."/>
				<comm cntt="If we still don&amp;apos;t have an iterator,"/>
				<comm cntt="then no index is available, so add the node"/>
				<comm cntt="to the whereNodesForTable set..."/>
				<comm cntt="Else if we&amp;apos;ve already applied an index,"/>
				<comm cntt="then add the node to the whereNodesForTable"/>
				<comm cntt="Remove the WhereNode from the unapplied where nodes,"/>
				<comm cntt="since we&amp;apos;ve either added it to the whereNodesForTable set,"/>
				<comm cntt="or we applied it via the index."/>
				<comm cntt="If we still don&amp;apos;t have a RowIterator for this table,"/>
				<comm cntt="then we&amp;apos;ll use a table scan."/>
				<comm cntt="Apply any unapplied whereNodesForTable."/>
				<param name="tableident"/>
				<param name="db"/>
				<param name="col"/>
				<param name="pos"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.generateSelectArrayForResultSet(Database)" access="priv" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.executeUpdate(Database)" access="pub" jdoc="Unsupported">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.execute(Database)" access="pub" jdoc="">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.resolve(Database)" access="priv" jdoc="">
				<comm cntt="resolve the Seletables"/>
				<comm cntt="resolve SELECT part"/>
				<comm cntt="resolve WHERE part"/>
				<comm cntt="resolve ORDER BY part"/>
				<comm cntt="check for aggregate functions"/>
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.createLiteralList()" access="priv" jdoc="Create a list of all the literals that have been selected, returning null if there aren&amp;apos;t any.">
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.onlyReferencesTable(TableIdentifier, WhereNode)" access="priv" jdoc="">
				<param name="table"/>
				<param name="node"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.generateOrderChain(Map)" access="priv" jdoc="">
				<param name="indexMap"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.SelectCommand.populateColumnIdToFieldMap(Map, TableIdentifier, int, Database)" access="priv" jdoc="">
				<comm cntt="determine which selected column id matches, if any"/>
				<param name="indexMap"/>
				<param name="tableIdent"/>
				<param name="offset"/>
				<param name="db"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.commands.UpdateCommand" intfc="n" abs="n" inn="n" sloc="112" jdoc="An &amp;lt;tt&amp;gt;UPDATE&amp;lt; tt&amp;gt; command. @version $Revision: 1.20 $ $Date: 2003 05 09 19:48:15 $ @author Rodney Waldhoff @author Chuck Burdick">
			<comm cntt="------------------------------------------------------------ Constructors"/>
			<comm cntt="---------------------------------------------------------- Public Methods"/>
			<comm cntt="-------------------------------------------------------------- Attributes"/>
			<field name="_table" access="priv" jdoc=""/>
			<field name="_cols" access="priv" jdoc=""/>
			<field name="_vals" access="priv" jdoc=""/>
			<field name="_where" access="priv" jdoc=""/>
			<field name="_resolved" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.commands.UpdateCommand.UpdateCommand()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.UpdateCommand.getTable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.UpdateCommand.setTable(TableIdentifier)" access="pub" jdoc="">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.UpdateCommand.addColumn(ColumnIdentifier)" access="pub" jdoc="">
				<param name="col"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.UpdateCommand.addValue(Selectable)" access="pub" jdoc="">
				<param name="val"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.UpdateCommand.getColumnCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.UpdateCommand.getColumnIterator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.UpdateCommand.getValueIterator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.UpdateCommand.getValueCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.UpdateCommand.setWhere(WhereNode)" access="pub" jdoc="">
				<param name="where"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.UpdateCommand.getWhere()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.UpdateCommand.executeUpdate(org.axiondb.Database)" access="pub" jdoc="">
				<comm cntt="grab the table"/>
				<comm cntt="build the indexMap (ColumnIdentifiers --&amp;gt; Integer index in Row)"/>
				<comm cntt="if there&amp;apos;s a where clause, apply it"/>
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.UpdateCommand.executeQuery(Database)" access="pub" jdoc="Unsupported, use {@link #executeUpdate} instead. @throws UnsupportedOperationException">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.UpdateCommand.execute(Database)" access="pub" jdoc="">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.UpdateCommand.getBindVariableIterator()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.UpdateCommand.resolve(Database)" access="priv" jdoc="">
				<comm cntt="for(Iterator iter = getValueIterator();iter.hasNext();) { db.resolveSelectable((Selectable)iter.next(),tables); }"/>
				<comm cntt="resolve WHERE part"/>
				<param name="db"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.commands.DropTableCommand" intfc="n" abs="n" inn="n" sloc="29" jdoc="A &amp;lt;code&amp;gt;DROP TABLE&amp;lt; code&amp;gt; command. @version $Revision: 1.10 $ $Date: 2003 07 07 16:14:28 $ @author Rodney Waldhoff">
			<field name="_tableName" access="pub" jdoc=""/>
			<field name="_exists" access="pub" jdoc=""/>
			<mth name="/:org.axiondb.engine.commands.DropTableCommand.DropTableCommand(String, boolean)" access="pub" jdoc="">
				<param name="tableName"/>
				<param name="exists"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DropTableCommand.execute(Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DropTableCommand.executeQuery(Database)" access="pub" jdoc="Unsupported">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DropTableCommand.executeUpdate(Database)" access="pub" jdoc="">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DropTableCommand.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.commands.ShutdownCommand" intfc="n" abs="n" inn="n" sloc="18" jdoc="A &amp;lt;tt&amp;gt;SHUTDOWN&amp;lt; tt&amp;gt; command, which closes the database. @version $Revision: 1.11 $ $Date: 2002 12 16 22:18:30 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.engine.commands.ShutdownCommand.ShutdownCommand()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.ShutdownCommand.execute(org.axiondb.Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.ShutdownCommand.executeQuery(Database)" access="pub" jdoc="Unsupported">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.ShutdownCommand.executeUpdate(Database)" access="pub" jdoc="">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.ShutdownCommand.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.commands.CheckpointCommand" intfc="n" abs="n" inn="n" sloc="18" jdoc="A &amp;lt;code&amp;gt;CHECKPOINT&amp;lt; code&amp;gt; command, which saves any unsaved data to the persistent store. @version $Revision: 1.8 $ $Date: 2002 12 16 22:18:30 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.engine.commands.CheckpointCommand.CheckpointCommand()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CheckpointCommand.execute(Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CheckpointCommand.executeQuery(Database)" access="pub" jdoc="Unsupported">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CheckpointCommand.executeUpdate(Database)" access="pub" jdoc="">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CheckpointCommand.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.commands.RemountCommand" intfc="n" abs="n" inn="n" sloc="73" jdoc="A &amp;lt;code&amp;gt;REMOUNT&amp;lt; code&amp;gt; command, which points the database at a new location. @version $Revision: 1.11 $ $Date: 2003 03 27 19:14:08 $ @author Rodney Waldhoff">
			<comm cntt="a literal or String"/>
			<field name="_dir" access="priv" jdoc=""/>
			<field name="_table" access="priv" jdoc=""/>
			<field name="_dataFilesOnly" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.commands.RemountCommand.RemountCommand()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.RemountCommand.setDirectory(String)" access="pub" jdoc="">
				<param name="dir"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.RemountCommand.setDirectory(Literal)" access="pub" jdoc="">
				<param name="dir"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.RemountCommand.getDirectory()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.RemountCommand.setTable(TableIdentifier)" access="pub" jdoc="">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.RemountCommand.getTable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.RemountCommand.setDataFilesOnly(boolean)" access="pub" jdoc="">
				<param name="data"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.RemountCommand.getDataFilesOnly()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.RemountCommand.execute(Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.RemountCommand.executeQuery(Database)" access="pub" jdoc="Unsupported">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.RemountCommand.executeUpdate(Database)" access="pub" jdoc="">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.RemountCommand.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.RemountCommand.getBindVariableIterator()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.RemountCommand.remountDatabase(Database)" access="priv" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.RemountCommand.remountTable(Database)" access="priv" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.RemountCommand.getPath()" access="priv" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.commands.BaseAxionCommand" intfc="n" abs="y" inn="n" sloc="111" jdoc="Abstract base {@link AxionCommand} implementation. @version $Revision: 1.10 $ $Date: 2003 05 01 16:39:00 $ @author Rodney Waldhoff @author Chuck Burdick">
			<field name="_rset" access="priv" jdoc=""/>
			<field name="_rowCount" access="priv" jdoc=""/>
			<const name="CLEAR_BINDINGS_VISITOR" access="priv" jdoc="A singleton instance of the stateless {@link ClearBindVariableWhereNodeVisitor}."/>
			<mth name="/:org.axiondb.engine.commands.BaseAxionCommand.setResultSet(ResultSet)" access="prot" jdoc="If subclasses create a {@link org.axiondb.jdbc.AxionResultSet}upon execution, they should set it here so that they can support {@link #execute}. @see #getResultSet">
				<param name="rset"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.BaseAxionCommand.getResultSet()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.BaseAxionCommand.setEffectedRowCount(int)" access="prot" jdoc="If sublasses return a number of rows effected, then upon execution, they should set that number here so it can support{@link #execute}">
				<param name="count"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.BaseAxionCommand.getEffectedRowCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.BaseAxionCommand.bind(int, Object)" access="pub" jdoc="Sets the &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; of the &amp;lt;i&amp;gt;i&amp;lt; i&amp;gt;&amp;lt;sup&amp;gt;th&amp;lt; sup&amp;gt; bind variable within this command. @param index the one-based index of the variable @param value the value to bind the variable to">
				<param name="index"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.BaseAxionCommand.clearBindings()" access="pub" jdoc="Clears all bind variables within this command.">
			</mth>
			<mth name="/:org.axiondb.engine.commands.BaseAxionCommand.clearBindings(WhereNode)" access="prot" jdoc="Clear all {@link BindVariable} bindings within the given {@link WhereNode node}.">
				<param name="node"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.BaseAxionCommand.assertNotReadOnly(Database)" access="prot" jdoc="Throws an {@link AxionException} if the given {@link Database} is read-only.">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.BaseAxionCommand.getBindVariableIterator()" access="prot" jdoc="Returns an {@link Iterator} over all my {@link BindVariable}s, in the proper order. Default impl returns empty iterator.">
			</mth>
			<mth name="/:org.axiondb.engine.commands.BaseAxionCommand.appendBindVariables(Selectable, List)" access="pub" jdoc="">
				<param name="sel"/>
				<param name="list"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.BaseAxionCommand.appendBindVariables(WhereNode, List)" access="pub" jdoc="">
				<param name="where"/>
				<param name="list"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.BaseAxionCommand.processWhereTree(WhereNode)" access="prot" jdoc="Decomposes the given {@link WhereNode} into a {@link Set}of nodes that were originally joined by ANDs, and adds to this set predicates that are implied by the original tree (for example, given &amp;lt;tt&amp;gt;A = 1&amp;lt; tt&amp;gt; and &amp;lt;tt&amp;gt;A = B&amp;lt; tt&amp;gt;, we can infer &amp;lt;tt&amp;gt;B = 1&amp;lt; tt&amp;gt;.)">
				<comm cntt="flatten into an ANDed set"/>
				<comm cntt="if(_log.isDebugEnabled()) { _log.debug(&amp;quot;Adding &amp;quot; + node + &amp;quot; to WHERE because I found &amp;quot; + join + &amp;quot; AND &amp;quot; + assign); }"/>
				<comm cntt="if(_log.isDebugEnabled()) { _log.debug(&amp;quot;Adding &amp;quot; + node + &amp;quot; to WHERE because I found &amp;quot; + join + &amp;quot; AND &amp;quot; + assign); }"/>
				<comm cntt="if(_log.isDebugEnabled()) { _log.debug(&amp;quot;Adding &amp;quot; + node + &amp;quot; to WHERE because I found &amp;quot; + join + &amp;quot; AND &amp;quot; + assign); }"/>
				<comm cntt="if(_log.isDebugEnabled()) { _log.debug(&amp;quot;Adding &amp;quot; + node + &amp;quot; to WHERE because I found &amp;quot; + join + &amp;quot; AND &amp;quot; + assign); }"/>
				<param name="tree"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.commands.CollectBindVariablesWhereNodeVisitor" intfc="n" abs="n" inn="n" sloc="13" jdoc="@version $Revision: 1.1 $ $Date: 2003 01 06 19:30:56 $ @author Rod Waldhoff">
			<field name="_list" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.commands.CollectBindVariablesWhereNodeVisitor.CollectBindVariablesWhereNodeVisitor()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CollectBindVariablesWhereNodeVisitor.getList()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CollectBindVariablesWhereNodeVisitor.visitLeafWhereNode(LeafWhereNode)" access="pub" jdoc="">
				<param name="node"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.commands.DeleteCommand" intfc="n" abs="n" inn="n" sloc="72" jdoc="A &amp;lt;tt&amp;gt;DELETE&amp;lt; tt&amp;gt; command. @version $Revision: 1.15 $ $Date: 2003 05 09 19:48:15 $ @author Rodney Waldhoff @author Chuck Burdick">
			<field name="_table" access="priv" jdoc=""/>
			<field name="_where" access="priv" jdoc=""/>
			<field name="_resolved" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.commands.DeleteCommand.DeleteCommand()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.DeleteCommand.DeleteCommand(String, WhereNode)" access="pub" jdoc="">
				<param name="tableName"/>
				<param name="where"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DeleteCommand.DeleteCommand(TableIdentifier, WhereNode)" access="pub" jdoc="">
				<param name="table"/>
				<param name="where"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DeleteCommand.getTable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.DeleteCommand.setTable(TableIdentifier)" access="pub" jdoc="">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DeleteCommand.setWhere(WhereNode)" access="pub" jdoc="">
				<param name="where"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DeleteCommand.getWhere()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.DeleteCommand.executeUpdate(org.axiondb.Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DeleteCommand.executeQuery(Database)" access="pub" jdoc="Unsupported">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DeleteCommand.execute(Database)" access="pub" jdoc="">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DeleteCommand.getBindVariableIterator()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.DeleteCommand.resolve(Database)" access="priv" jdoc="">
				<param name="db"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.commands.DropSequenceCommand" intfc="n" abs="n" inn="n" sloc="24" jdoc="A &amp;lt;code&amp;gt;DROP SEQUENCE&amp;lt; code&amp;gt; command. @version $Revision: 1.8 $ $Date: 2002 12 16 22:18:30 $ @author Chuck Burdick">
			<field name="_sequenceName" access="pub" jdoc=""/>
			<mth name="/:org.axiondb.engine.commands.DropSequenceCommand.DropSequenceCommand(String)" access="pub" jdoc="">
				<param name="sequenceName"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DropSequenceCommand.execute(Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DropSequenceCommand.executeQuery(Database)" access="pub" jdoc="Unsupported">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DropSequenceCommand.executeUpdate(Database)" access="pub" jdoc="">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DropSequenceCommand.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.commands.AddConstraintCommand" intfc="n" abs="n" inn="n" sloc="58" jdoc="An &amp;lt;code&amp;gt;ADD CONSTRAINT&amp;lt; code&amp;gt; command, as generated by &amp;lt;code&amp;gt;ALTER TABLE&amp;lt; code&amp;gt; and &amp;lt;code&amp;gt;CREATE TABLE&amp;lt; code&amp;gt; statements. @version $Revision: 1.8 $ $Date: 2002 12 16 22:18:30 $ @author James Strachan @author Rodney Waldhoff">
			<field name="_tableName" access="priv" jdoc=""/>
			<field name="_constraint" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.commands.AddConstraintCommand.AddConstraintCommand()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.AddConstraintCommand.AddConstraintCommand(String)" access="pub" jdoc="">
				<param name="tableName"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.AddConstraintCommand.AddConstraintCommand(String, Constraint)" access="pub" jdoc="">
				<param name="tableName"/>
				<param name="constraint"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.AddConstraintCommand.getConstraint()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.AddConstraintCommand.setConstraint(Constraint)" access="pub" jdoc="">
				<param name="c"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.AddConstraintCommand.setTableName(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.AddConstraintCommand.getTableName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.AddConstraintCommand.execute(Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.AddConstraintCommand.executeQuery(Database)" access="pub" jdoc="Unsupported">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.AddConstraintCommand.executeUpdate(Database)" access="pub" jdoc="">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.AddConstraintCommand.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.commands.CreateSequenceCommand" intfc="n" abs="n" inn="n" sloc="50" jdoc="A &amp;lt;code&amp;gt;CREATE SEQUENCE&amp;lt; code&amp;gt; command. @version $Revision: 1.10 $ $Date: 2002 12 16 22:18:30 $ @author Chuck Burdick">
			<field name="_sequenceName" access="priv" jdoc=""/>
			<field name="_startVal" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.commands.CreateSequenceCommand.CreateSequenceCommand()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateSequenceCommand.CreateSequenceCommand(String)" access="pub" jdoc="">
				<param name="sequenceName"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateSequenceCommand.CreateSequenceCommand(String, int)" access="pub" jdoc="">
				<param name="sequenceName"/>
				<param name="startVal"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateSequenceCommand.setName(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateSequenceCommand.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateSequenceCommand.setStartValue(String)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateSequenceCommand.setStartValue(int)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateSequenceCommand.getStartValue()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateSequenceCommand.execute(org.axiondb.Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateSequenceCommand.executeQuery(Database)" access="pub" jdoc="Unsupported">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateSequenceCommand.executeUpdate(Database)" access="pub" jdoc="">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateSequenceCommand.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.commands.InsertCommand" intfc="n" abs="n" inn="n" sloc="123" jdoc="An &amp;lt;tt&amp;gt;INSERT&amp;lt; tt&amp;gt; statement. @version $Revision: 1.20 $ $Date: 2003 07 11 15:05:44 $ @author Rodney Waldhoff @author Chuck Burdick">
			<comm cntt="------------------------------------------------------------ Constructors"/>
			<comm cntt="---------------------------------------------------------- Public Methods"/>
			<comm cntt="-------------------------------------------------------------- Attributes"/>
			<field name="_resolved" access="priv" jdoc=""/>
			<field name="_table" access="priv" jdoc=""/>
			<field name="_cols" access="priv" jdoc=""/>
			<field name="_vals" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.commands.InsertCommand.InsertCommand(TableIdentifier)" access="pub" jdoc="@param table The table in which to insert">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.InsertCommand.InsertCommand(TableIdentifier, ColumnIdentifier, Selectable)" access="pub" jdoc="@param table The table in which to insert @param column a column to insert @param values a value to insert in the corresponding column">
				<param name="table"/>
				<param name="column"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.InsertCommand.InsertCommand(TableIdentifier, List, List)" access="pub" jdoc="@param table The table in which to insert @param columns List of {@link ColumnIdentifier ColumnIdentifiers}, which may be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @param values List of {@link Object Objects}, which may be &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; @throws InvalidArgumentException if &amp;lt;code&amp;gt;columns.size() &amp;gt; 0 &amp;amp;&amp;amp; columns.size() != values.size()&amp;lt; code&amp;gt;">
				<param name="table"/>
				<param name="columns"/>
				<param name="values"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.InsertCommand.addColumn(ColumnIdentifier)" access="pub" jdoc="@throws IllegalStateException if I&amp;apos;ve already been resolved">
				<param name="col"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.InsertCommand.addValue(Selectable)" access="pub" jdoc="@throws IllegalStateException if I&amp;apos;ve already been resolved">
				<param name="val"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.InsertCommand.getColumnCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.InsertCommand.getColumnIterator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.InsertCommand.getValueIterator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.InsertCommand.getValueCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.InsertCommand.getTable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.InsertCommand.executeUpdate(org.axiondb.Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.InsertCommand.executeQuery(Database)" access="pub" jdoc="Unsupported, use {@link #executeUpdate} instead. @throws UnsupportedOperationException">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.InsertCommand.execute(Database)" access="pub" jdoc="">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.InsertCommand.getBindVariableIterator()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.InsertCommand.resolve(Database)" access="priv" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.InsertCommand.buildRowDecorator(Table)" access="priv" jdoc="">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.InsertCommand.getSelectableIterator(Table)" access="priv" jdoc="">
				<param name="table"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.commands.CreateTableCommand" intfc="n" abs="n" inn="n" sloc="99" jdoc="A &amp;lt;code&amp;gt;CREATE[&amp;lt;i&amp;gt;TYPE&amp;lt; i&amp;gt;] TABLE&amp;lt; code&amp;gt; command. @version $Revision: 1.13 $ $Date: 2002 12 16 22:18:30 $ @author Chuck Burdick @author James Strachan @author Rodney Waldhoff">
			<field name="_tableName" access="pub" jdoc=""/>
			<field name="_type" access="pub" jdoc=""/>
			<field name="_columnNames" access="pub" jdoc=""/>
			<field name="_dataTypes" access="pub" jdoc=""/>
			<field name="_childCommands" access="pub" jdoc=""/>
			<mth name="/:org.axiondb.engine.commands.CreateTableCommand.CreateTableCommand()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateTableCommand.CreateTableCommand(String)" access="pub" jdoc="">
				<param name="tableName"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateTableCommand.getColumnNames()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateTableCommand.getDataTypes()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateTableCommand.addColumn(String, String)" access="pub" jdoc="">
				<param name="name"/>
				<param name="datatypename"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateTableCommand.addChildCommand(AxionCommand)" access="pub" jdoc="">
				<param name="cmd"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateTableCommand.getChildCommandCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateTableCommand.getChildCommand(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateTableCommand.setType(String)" access="pub" jdoc="">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateTableCommand.getType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateTableCommand.setName(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateTableCommand.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateTableCommand.execute(Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateTableCommand.executeQuery(Database)" access="pub" jdoc="Unsupported">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateTableCommand.executeUpdate(Database)" access="pub" jdoc="">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateTableCommand.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.commands.CreateIndexCommand" intfc="n" abs="n" inn="n" sloc="97" jdoc="A &amp;lt;code&amp;gt;CREATE [UNIQUE] [&amp;lt;i&amp;gt;TYPE&amp;lt; i&amp;gt;] INDEX&amp;lt; code&amp;gt; command. @version $Revision: 1.10 $ $Date: 2002 12 16 22:18:30 $ @author Rodney Waldhoff">
			<field name="_unique" access="priv" jdoc=""/>
			<field name="_type" access="priv" jdoc=""/>
			<field name="_name" access="priv" jdoc=""/>
			<field name="_table" access="priv" jdoc=""/>
			<field name="_columns" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.commands.CreateIndexCommand.CreateIndexCommand()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateIndexCommand.setName(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateIndexCommand.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateIndexCommand.getTable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateIndexCommand.setTable(TableIdentifier)" access="pub" jdoc="">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateIndexCommand.setTable(String)" access="pub" jdoc="">
				<param name="tableName"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateIndexCommand.addColumn(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateIndexCommand.addColumn(ColumnIdentifier)" access="pub" jdoc="">
				<param name="col"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateIndexCommand.getColumn(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateIndexCommand.getColumnCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateIndexCommand.setUnique(boolean)" access="pub" jdoc="">
				<param name="unique"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateIndexCommand.isUnique()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateIndexCommand.setType(String)" access="pub" jdoc="">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateIndexCommand.getType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateIndexCommand.execute(Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateIndexCommand.executeQuery(Database)" access="pub" jdoc="Unsupported">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateIndexCommand.executeUpdate(Database)" access="pub" jdoc="">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.CreateIndexCommand.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.commands.DropConstraintCommand" intfc="n" abs="n" inn="n" sloc="52" jdoc="A &amp;lt;code&amp;gt;DROP CONSTRAINT&amp;lt; code&amp;gt; command. @version $Revision: 1.8 $ $Date: 2003 05 12 22:22:35 $ @author Rodney Waldhoff">
			<field name="_tableName" access="priv" jdoc=""/>
			<field name="_constraintName" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.commands.DropConstraintCommand.DropConstraintCommand(String, String)" access="pub" jdoc="">
				<param name="tableName"/>
				<param name="constraintName"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DropConstraintCommand.getConstraintName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.DropConstraintCommand.setConstraintName(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DropConstraintCommand.setTableName(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DropConstraintCommand.getTableName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.commands.DropConstraintCommand.execute(Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DropConstraintCommand.executeQuery(Database)" access="pub" jdoc="Unsupported">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DropConstraintCommand.executeUpdate(Database)" access="pub" jdoc="">
				<param name="database"/>
			</mth>
			<mth name="/:org.axiondb.engine.commands.DropConstraintCommand.toString()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/:org.axiondb.engine.rowiterators">
		<class name="/:org.axiondb.engine.rowiterators.FilteringRowIterator" intfc="n" abs="n" inn="n" sloc="16" jdoc="A {@link DelegatingRowIterator} that only returns {@link Row}s that match a given {@link WhereNode}. @version $Revision: 1.6 $ $Date: 2003 05 12 22:22:35 $ @author Rodney Waldhoff">
			<field name="_where" access="priv" jdoc=""/>
			<field name="_decorator" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.rowiterators.FilteringRowIterator.FilteringRowIterator(RowIterator, RowDecorator, WhereNode)" access="pub" jdoc="">
				<param name="iterator"/>
				<param name="decorator"/>
				<param name="where"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.FilteringRowIterator.acceptable(int, Row)" access="prot" jdoc="">
				<param name="rowindex"/>
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.FilteringRowIterator.decorate(int, Row)" access="priv" jdoc="">
				<param name="rowindex"/>
				<param name="row"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.BaseRowIterator" intfc="n" abs="y" inn="n" sloc="38" jdoc="An abstract base implementation of {@link RowIterator}. @version $Revision: 1.5 $ $Date: 2002 12 16 16:25:56 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.engine.rowiterators.BaseRowIterator.isEmpty()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseRowIterator.add(Row)" access="pub" jdoc="Not supported in the base implementation.">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseRowIterator.set(Row)" access="pub" jdoc="Not supported in the base implementation.">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseRowIterator.remove()" access="pub" jdoc="Not supported in the base implementation.">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseRowIterator.first()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseRowIterator.last()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseRowIterator.peekNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseRowIterator.peekPrevious()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator" intfc="n" abs="y" inn="n" sloc="69" jdoc="An abstract base {@link RowIterator} that delegates all calls to a wrapped instance. @version $Revision: 1.6 $ $Date: 2002 12 16 16:25:56 $ @author Rodney Waldhoff">
			<field name="_delegate" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.DelegatingRowIterator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.DelegatingRowIterator(RowIterator)" access="pub" jdoc="">
				<param name="iter"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.current()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.hasCurrent()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.first()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.last()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.next()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.previous()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.hasNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.hasPrevious()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.isEmpty()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.add(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.nextIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.previousIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.currentIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.remove()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.set(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.reset()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.peekNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.peekPrevious()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.getDelegate()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DelegatingRowIterator.setDelegate(RowIterator)" access="prot" jdoc="">
				<param name="delegate"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.LazyRowRowIterator" intfc="n" abs="n" inn="n" sloc="77" jdoc="A {@link org.axiondb.RowIterator} that creates{@link LazyRow}s based upon a list of {@link Row} identifiers. @version $Revision: 1.7 $ $Date: 2003 05 15 17:25:40 $ @author Rodney Waldhoff">
			<field name="_source" access="priv" jdoc=""/>
			<field name="_rowIdIter" access="priv" jdoc=""/>
			<field name="_valueIter" access="priv" jdoc=""/>
			<field name="_currentRow" access="priv" jdoc=""/>
			<field name="_currentIndex" access="priv" jdoc=""/>
			<field name="_knownColumnIndex" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.rowiterators.LazyRowRowIterator.LazyRowRowIterator(RowSource, IntListIterator)" access="pub" jdoc="">
				<param name="source"/>
				<param name="rowIdIter"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LazyRowRowIterator.LazyRowRowIterator(RowSource, ListIterator, int, ListIterator)" access="pub" jdoc="@deprecated use {@link LazyRowRowIteratorLazyRowRowIterator(RowSource,IntListIterator,int,valueIter)} instead.">
				<param name="source"/>
				<param name="rowIdIter"/>
				<param name="knownColumn"/>
				<param name="valueIter"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LazyRowRowIterator.LazyRowRowIterator(RowSource, IntListIterator, int, ListIterator)" access="pub" jdoc="">
				<param name="source"/>
				<param name="rowIdIter"/>
				<param name="knownColumn"/>
				<param name="valueIter"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LazyRowRowIterator.current()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LazyRowRowIterator.hasCurrent()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LazyRowRowIterator.add(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LazyRowRowIterator.hasNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LazyRowRowIterator.hasPrevious()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LazyRowRowIterator.next()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LazyRowRowIterator.previous()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LazyRowRowIterator.currentIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LazyRowRowIterator.nextIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LazyRowRowIterator.previousIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LazyRowRowIterator.remove()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LazyRowRowIterator.set(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LazyRowRowIterator.reset()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LazyRowRowIterator.setCurrentRow(int, Object)" access="priv" jdoc="">
				<param name="rowid"/>
				<param name="value"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.SimpleJoinedRowIterator" intfc="n" abs="n" inn="n" sloc="236" jdoc="A {@link RowIterator} that iterates over zero or more &amp;lt;code&amp;gt;RowIterator&amp;lt; code&amp;gt;s, returning{@link Row}s that are the cross product of the &amp;lt;code&amp;gt;Row&amp;lt; code&amp;gt;s returned by the contained iterators. This class implements the nested loop join algorithm and can produce inner join, left outer join, and right outer join of the contained iterators. @version $Revision: 1.3 $ $Date: 2003 04 21 15:55:06 $ @author Rodney Waldhoff @author Amrish Lal">
			<comm cntt="private void clearCurrentRow() { _currentRow = null; _currentRowSet = false; }"/>
			<field name="_acceptableStatus" access="prot" jdoc=""/>
			<mth name="/:org.axiondb.engine.rowiterators.SimpleJoinedRowIterator.SimpleJoinedRowIterator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SimpleJoinedRowIterator.SimpleJoinedRowIterator(int)" access="pub" jdoc="">
				<param name="joinType"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SimpleJoinedRowIterator.addRowIterator(RowIterator)" access="pub" jdoc="">
				<param name="iterator"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SimpleJoinedRowIterator.iteratorsAreEmpty()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SimpleJoinedRowIterator.iteratorsHasNext()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SimpleJoinedRowIterator.iteratorsHasPrevious()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SimpleJoinedRowIterator.iteratorsWillCycleToLast()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SimpleJoinedRowIterator.iteratorsWillCycleToFirst()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SimpleJoinedRowIterator.iteratorsNext()" access="priv" jdoc="">
				<comm cntt=""/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SimpleJoinedRowIterator.iteratorsPrevious()" access="priv" jdoc="">
				<comm cntt=""/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SimpleJoinedRowIterator.setNextRow()" access="prot" jdoc="">
				<comm cntt="continue to loop until we can not increment anymore or until"/>
				<comm cntt="a valid joined row is found."/>
				<comm cntt="construct a joined row. If joined row matches join condition"/>
				<comm cntt="return."/>
				<comm cntt="If we have cycled through the inner table and still there is"/>
				<comm cntt="no matching row then we need to carry out a left or right"/>
				<comm cntt="outer join if specified."/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SimpleJoinedRowIterator.setPreviousRow()" access="prot" jdoc="">
				<comm cntt="continue to loop until we cannot decrement anymore or until"/>
				<comm cntt="a valid joined row is found."/>
				<comm cntt="construct a new joined row. If the joined row matches the"/>
				<comm cntt="join condition then return"/>
				<comm cntt="If we have cycled through the inner table and still there is"/>
				<comm cntt="no matching row then we need to carry out a left or right"/>
				<comm cntt="outer join if specified."/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SimpleJoinedRowIterator.joinCurrent()" access="priv" jdoc="Produces a cross product row from the current rows of the contained iterators.">
				<comm cntt="For righter out join, the inner table is the right table and the"/>
				<comm cntt="outer table is the left table (see SelectCommand.java), so we"/>
				<comm cntt="need to add the inner table first and outer table next to create"/>
				<comm cntt="a valid right outer joined row."/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SimpleJoinedRowIterator.applyJoinType()" access="priv" jdoc="">
				<comm cntt="not supported yet."/>
				<comm cntt="there are atleast two tables present in the join."/>
				<comm cntt="number of columns in the right (or inner) table."/>
				<comm cntt="add the left table row."/>
				<comm cntt="add the null right table row."/>
				<comm cntt="number of columns in the left (or inner) table."/>
				<comm cntt="add the null left row to the join"/>
				<comm cntt="add the right row to the join."/>
				<comm cntt="literals exist"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SimpleJoinedRowIterator.acceptable(int, Row)" access="prot" jdoc="">
				<param name="rowindex"/>
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SimpleJoinedRowIterator.decorate(int, Row)" access="priv" jdoc="">
				<param name="rowindex"/>
				<param name="row"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.EmptyRowIterator" intfc="n" abs="n" inn="n" sloc="58" jdoc="A {@link RowIterator} that contains no {@link Row}s. @version $Revision: 1.6 $ $Date: 2003 03 27 19:14:08 $ @author Rodney Waldhoff">
			<field name="INSTANCE" access="pub" jdoc=""/>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.EmptyRowIterator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.current()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.hasCurrent()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.first()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.last()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.next()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.previous()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.hasNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.hasPrevious()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.isEmpty()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.add(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.nextIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.previousIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.currentIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.remove()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.set(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.peekNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.peekPrevious()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.EmptyRowIterator.reset()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.TransformingRowIterator" intfc="n" abs="y" inn="n" sloc="21" jdoc="A {@link DelegatingRowIterator} that {@link #transform transforms}each returned {@link Row}. @version $Revision: 1.4 $ $Date: 2002 12 16 23:34:54 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.engine.rowiterators.TransformingRowIterator.TransformingRowIterator(RowIterator)" access="pub" jdoc="">
				<param name="iter"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.TransformingRowIterator.transform(Row)" access="prot" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.TransformingRowIterator.current()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.TransformingRowIterator.first()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.TransformingRowIterator.last()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.TransformingRowIterator.next()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.TransformingRowIterator.previous()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.BaseJoinedRowIterator" intfc="n" abs="y" inn="n" sloc="122" jdoc="An abstract base implementation of {@link RowIterator}. @version $Revision: 1.2 $ $Date: 2003 05 13 23:42:59 $ @author Rodney Waldhoff @author Amrish Lal">
			<comm cntt=""/>
			<comm cntt=""/>
			<comm cntt=""/>
			<field name="_iterators" access="prot" jdoc=""/>
			<field name="_decorator" access="prot" jdoc=""/>
			<field name="_type" access="prot" jdoc=""/>
			<field name="_condition" access="prot" jdoc=""/>
			<field name="_previousRow" access="prot" jdoc=""/>
			<field name="_nextRow" access="prot" jdoc=""/>
			<field name="_currentRow" access="prot" jdoc=""/>
			<field name="_previousRowSet" access="prot" jdoc=""/>
			<field name="_nextRowSet" access="prot" jdoc=""/>
			<field name="_currentRowSet" access="prot" jdoc=""/>
			<field name="_currentIndex" access="prot" jdoc=""/>
			<field name="_nextIndex" access="prot" jdoc=""/>
			<mth name="/:org.axiondb.engine.rowiterators.BaseJoinedRowIterator.setJoinCondition(RowDecorator, WhereNode)" access="pub" jdoc="">
				<param name="decorator"/>
				<param name="condition"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseJoinedRowIterator.setJoinType(int)" access="pub" jdoc="">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseJoinedRowIterator.current()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseJoinedRowIterator.currentIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseJoinedRowIterator.hasCurrent()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseJoinedRowIterator.hasNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseJoinedRowIterator.next()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseJoinedRowIterator.nextIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseJoinedRowIterator.hasPrevious()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseJoinedRowIterator.previous()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseJoinedRowIterator.previousIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseJoinedRowIterator.first()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseJoinedRowIterator.last()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseJoinedRowIterator.reset()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseJoinedRowIterator.setNextRow()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.BaseJoinedRowIterator.setPreviousRow()" access="prot" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.RebindableIndexedRowIterator" intfc="n" abs="n" inn="n" sloc="17" jdoc="A {@link DelegatingRowIterator} that is wraps a {@link org.axiondb.RowIterator} from some {@link Index}, and that can be {@link #reset reset} to recreate the iterator for a new {@link BindVariable bound value}. @see org.axiondb.engine.BaseTable#getIndexedRows @see org.axiondb.Index @see org.axiondb.BindVariable @version $Revision: 1.5 $ $Date: 2003 03 27 19:14:08 $ @author Rodney Waldhoff">
			<field name="_index" access="priv" jdoc=""/>
			<field name="_table" access="priv" jdoc=""/>
			<field name="_op" access="priv" jdoc=""/>
			<field name="_bindVar" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.rowiterators.RebindableIndexedRowIterator.RebindableIndexedRowIterator(Index, Table, ComparisonOperator, BindVariable)" access="pub" jdoc="">
				<param name="index"/>
				<param name="table"/>
				<param name="op"/>
				<param name="bvar"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RebindableIndexedRowIterator.reset()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator" intfc="n" abs="n" inn="n" sloc="68" jdoc="A {@link RowDecoratorIterator} based upon some {@link RowDecorator decorator} and {@link RowIterator}. @version $Revision: 1.6 $ $Date: 2002 12 16 23:34:54 $ @author Rodney Waldhoff">
			<field name="_decorator" access="priv" jdoc=""/>
			<field name="_iterator" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.RowIteratorRowDecoratorIterator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.RowIteratorRowDecoratorIterator(RowIterator, RowDecorator)" access="pub" jdoc="">
				<param name="iterator"/>
				<param name="decorator"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.getDecorator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.setDecorator(RowDecorator)" access="pub" jdoc="">
				<param name="decorator"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.getIterator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.setIterator(RowIterator)" access="pub" jdoc="">
				<param name="iterator"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.current()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.next()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.previous()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.hasNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.hasPrevious()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.hasCurrent()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.first()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.last()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.nextIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.previousIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.remove()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.set(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.add(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.reset()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.RowIteratorRowDecoratorIterator.decorate(Row)" access="priv" jdoc="">
				<param name="row"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.DistinctRowIterator" intfc="n" abs="n" inn="n" sloc="41" jdoc="A {@link DelegatingRowIterator} implementing DISTINCT. @version $Revision: 1.6 $ $Date: 2003 05 12 22:22:35 $ @author Rodney Waldhoff">
			<field name="_decorator" access="priv" jdoc=""/>
			<field name="_selectables" access="priv" jdoc=""/>
			<field name="_timesEncountered" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.rowiterators.DistinctRowIterator.DistinctRowIterator(RowIterator, Map, Selectable[])" access="pub" jdoc="">
				<param name="iter"/>
				<param name="selectableMap"/>
				<param name="selectables"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DistinctRowIterator.reset()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DistinctRowIterator.acceptable(int, Row)" access="prot" jdoc="">
				<comm cntt="this is a hack, but figure out if we&amp;apos;re moving forward"/>
				<comm cntt="or back by comparing the currentIndex to the given index"/>
				<comm cntt="next"/>
				<comm cntt="previous"/>
				<param name="rowindex"/>
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.DistinctRowIterator.populateValueList(Row)" access="priv" jdoc="">
				<param name="row"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.AbstractAcceptingRowIterator" intfc="n" abs="y" inn="n" sloc="42" jdoc="Abstract base {@link DelegatingRowIterator} that excludes {@link Row}s that are not {@link #acceptable acceptable}. @version $Revision: 1.1 $ $Date: 2003 05 12 22:22:35 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.engine.rowiterators.AbstractAcceptingRowIterator.acceptable(int, Row)" access="prot" jdoc="My filtering method. Return &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; if the given {@link Row} should be included in the iteration, &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; otherwise.">
				<param name="rowindex"/>
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractAcceptingRowIterator.AbstractAcceptingRowIterator(RowIterator)" access="pub" jdoc="">
				<param name="iterator"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractAcceptingRowIterator.determineNextRow()" access="prot" jdoc="">
				<comm cntt="if _previousRowSet is true,"/>
				<comm cntt="then we&amp;apos;ve walked back in the delegate list"/>
				<comm cntt="so skip one matching row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractAcceptingRowIterator.determinePreviousRow()" access="prot" jdoc="">
				<comm cntt="if _nextRowSet is true,"/>
				<comm cntt="then we&amp;apos;ve walked forward in the delegate list"/>
				<comm cntt="so skip one matching row"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.ChainedRowIterator" intfc="n" abs="n" inn="n" sloc="90" jdoc="Chains together one or more {@link RowIterator}s to make them look like one (similiar to a SQL UNION). @version $Revision: 1.7 $ $Date: 2003 05 12 22:22:35 $ @author Rodney Waldhoff">
			<field name="_iterators" access="priv" jdoc=""/>
			<field name="_nextIndex" access="priv" jdoc=""/>
			<field name="_currentIndex" access="priv" jdoc=""/>
			<field name="_currentIterator" access="priv" jdoc=""/>
			<field name="_currentRow" access="priv" jdoc=""/>
			<field name="_currentRowSet" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.rowiterators.ChainedRowIterator.ChainedRowIterator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChainedRowIterator.addRowIterator(RowIterator)" access="pub" jdoc="">
				<param name="iter"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChainedRowIterator.current()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChainedRowIterator.hasCurrent()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChainedRowIterator.currentIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChainedRowIterator.reset()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChainedRowIterator.next()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChainedRowIterator.previous()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChainedRowIterator.hasNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChainedRowIterator.hasPrevious()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChainedRowIterator.nextIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChainedRowIterator.previousIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChainedRowIterator.remove()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChainedRowIterator.set(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChainedRowIterator.getCurrentRowIterator()" access="priv" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.SingleRowIterator" intfc="n" abs="n" inn="n" sloc="99" jdoc="A {@link RowIterator} over a single {@link Row}. @version $Revision: 1.6 $ $Date: 2003 03 27 19:14:08 $ @author Rodney Waldhoff">
			<field name="_row" access="priv" jdoc=""/>
			<field name="_currentSet" access="priv" jdoc=""/>
			<field name="_before" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.SingleRowIterator(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.current()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.hasCurrent()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.first()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.last()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.next()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.previous()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.hasNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.hasPrevious()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.add(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.isEmpty()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.nextIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.previousIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.currentIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.remove()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.set(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.peekNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.peekPrevious()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.SingleRowIterator.reset()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.IndexJoinedRowIterator" intfc="n" abs="n" inn="n" sloc="134" jdoc="An abstract base implementation of {@link RowIterator}. @version $Revision: 1.2 $ $Date: 2003 05 01 16:38:59 $ @author Amrish Lal">
			<field name="_keypos" access="priv" jdoc=""/>
			<field name="_colcount" access="priv" jdoc=""/>
			<field name="_lrow" access="priv" jdoc=""/>
			<field name="_rrow" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.rowiterators.IndexJoinedRowIterator.IndexJoinedRowIterator(int, int)" access="pub" jdoc="">
				<param name="keypos"/>
				<param name="colcount"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.IndexJoinedRowIterator.addRowIterator(RowIterator)" access="pub" jdoc="">
				<param name="iterator"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.IndexJoinedRowIterator.setNextRow()" access="prot" jdoc="">
				<comm cntt="_lrow = null;"/>
				<comm cntt="_rrow = null;"/>
				<comm cntt="check if iterators are empty"/>
				<comm cntt="this is the first time setNextRow has been called || riter does not have any more rows to join."/>
				<comm cntt="check if there are rows in riter;"/>
				<comm cntt="there are still rows in the riter"/>
				<comm cntt="no more rows in the riter and we still don&amp;apos;t have a joined row."/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.IndexJoinedRowIterator.setPreviousRow()" access="prot" jdoc="">
				<comm cntt="_lrow = null;"/>
				<comm cntt="_rrow = null;"/>
				<comm cntt="check if iterators are empty"/>
				<comm cntt="this is the irst time setNextRow has been called || riter does not have any more rows to join."/>
				<comm cntt="check if there are rows in riter;"/>
				<comm cntt="there are still rows in the riter"/>
				<comm cntt="no more rows in the riter and we still don&amp;apos;t have a joined row."/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.IndexJoinedRowIterator.getJoinedRow()" access="priv" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.ListIteratorRowIterator" intfc="n" abs="n" inn="n" sloc="63" jdoc="A {@link RowIterator} that simply wraps a {@link ListIterator}. @version $Revision: 1.4 $ $Date: 2003 05 14 17:00:30 $ @author Rodney Waldhoff">
			<field name="_iterator" access="priv" jdoc=""/>
			<field name="_currentRow" access="priv" jdoc=""/>
			<field name="_currentRowSet" access="priv" jdoc=""/>
			<field name="_currentIndex" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.rowiterators.ListIteratorRowIterator.ListIteratorRowIterator(ListIterator)" access="pub" jdoc="">
				<param name="iter"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ListIteratorRowIterator.current()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ListIteratorRowIterator.add(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ListIteratorRowIterator.hasCurrent()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ListIteratorRowIterator.hasNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ListIteratorRowIterator.hasPrevious()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ListIteratorRowIterator.next()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ListIteratorRowIterator.previous()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ListIteratorRowIterator.currentIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ListIteratorRowIterator.nextIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ListIteratorRowIterator.previousIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ListIteratorRowIterator.remove()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ListIteratorRowIterator.set(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ListIteratorRowIterator.reset()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.CollatingRowIterator" intfc="n" abs="n" inn="n" sloc="184" jdoc="Collates the results of two or more sorted {@link RowIterator}s according to the given {@link RowComparator}. It is assumed that each iterator is already ordered (ascending) according to the given {@link RowComparator}. @version $Revision: 1.9 $ $Date: 2003 05 20 17:59:10 $ @author Rodney Waldhoff">
			<comm cntt="XXX TO DO XXX"/>
			<comm cntt="This isn&amp;apos;t pretty but it seems to work."/>
			<comm cntt="There is probably substantial room for optimization here."/>
			<comm cntt="In particular, it&amp;apos;s probably not strictly necessary to maintain"/>
			<comm cntt="the stack of returned values, but I don&amp;apos;t see a better way right now."/>
			<comm cntt="XXX TO DO XXX"/>
			<field name="_comparator" access="priv" jdoc="My {@link RowComparator} to use for collating."/>
			<field name="_iterators" access="priv" jdoc="The list of {@link RowIterator}s to collate over."/>
			<field name="_nexts" access="priv" jdoc="{@link Row} values peeked from my {@link #_iterators}."/>
			<field name="_nextSet" access="priv" jdoc="Whether or not I&amp;apos;ve peeked ahead."/>
			<field name="_currentRow" access="priv" jdoc="The last {@link Row} returned by {@link #next} or {@link #previous}."/>
			<field name="_currentIndex" access="priv" jdoc="The index of {@link #_currentRow} within my iteration."/>
			<field name="_hasCurrent" access="priv" jdoc="Whether or not {@link #_currentRow} has been set."/>
			<field name="_lastReturnedFrom" access="priv" jdoc="The {@link #_iterators iterator} I last returned from."/>
			<field name="_nextIndex" access="priv" jdoc="The next index within my iteration."/>
			<field name="_prevFrom" access="priv" jdoc="A stack of the {@link #_iterators} from which {@link #next} obtained values from."/>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.CollatingRowIterator(RowComparator)" access="pub" jdoc="">
				<param name="comparator"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.addRowIterator(RowIterator)" access="pub" jdoc="">
				<param name="iter"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.previous()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.previousIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.hasPrevious()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.next()" access="pub" jdoc="">
				<comm cntt="peek ahead to the next value"/>
				<comm cntt="step forward past the previously peeked value"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.nextIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.hasNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.current()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.currentIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.hasCurrent()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.reset()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.set(Row)" access="pub" jdoc="">
				<comm cntt="XXX TO DO XXX - test me"/>
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.remove()" access="pub" jdoc="">
				<comm cntt="XXX TO DO XXX - test me"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.start()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.startIfNotStarted()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.started()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.getLastReturnedFrom()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.assertNotStarted()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.assertStarted()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.CollatingRowIterator.clearPeeked(int)" access="priv" jdoc="">
				<param name="i"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.LimitingRowIterator" intfc="n" abs="n" inn="n" sloc="54" jdoc="{@link RowIterator} implementing LIMIT and OFFSET. @version $Revision: 1.7 $ $Date: 2003 05 12 22:22:35 $ @author Rodney Waldhoff">
			<field name="_limit" access="priv" jdoc=""/>
			<field name="_offset" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.rowiterators.LimitingRowIterator.LimitingRowIterator(RowIterator, Literal, Literal)" access="pub" jdoc="">
				<param name="iter"/>
				<param name="limit"/>
				<param name="offset"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LimitingRowIterator.determineNextRow()" access="prot" jdoc="">
				<comm cntt="skip to offset if needed and possible"/>
				<comm cntt="check within my limit"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LimitingRowIterator.determinePreviousRow()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LimitingRowIterator.underLimit(int)" access="priv" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.LimitingRowIterator.overOffset(int)" access="priv" jdoc="">
				<param name="index"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.UnmodifiableRowIterator" intfc="n" abs="n" inn="n" sloc="17" jdoc="@version $Revision: 1.2 $ $Date: 2003 05 12 22:22:35 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.engine.rowiterators.UnmodifiableRowIterator.UnmodifiableRowIterator(RowIterator)" access="pub" jdoc="">
				<param name="iter"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.UnmodifiableRowIterator.add(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.UnmodifiableRowIterator.remove()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.UnmodifiableRowIterator.set(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.UnmodifiableRowIterator.wrap(RowIterator)" access="pub" jdoc="">
				<param name="that"/>
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.JoinedRow" intfc="n" abs="n" inn="n" sloc="39" jdoc="A {@link Row} composed of zero or more &amp;lt;code&amp;gt;Row&amp;lt; code&amp;gt;s, joined together end-to-end. @version $Revision: 1.4 $ $Date: 2003 05 12 22:22:35 $ @author Rodney Waldhoff">
			<field name="_rows" access="priv" jdoc=""/>
			<field name="_size" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.rowiterators.JoinedRow.JoinedRow()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.JoinedRow.addRow(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.JoinedRow.get(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.JoinedRow.set(int, Object)" access="pub" jdoc="">
				<param name="i"/>
				<param name="val"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.JoinedRow.size()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.ChangingIndexedRowIterator" intfc="n" abs="n" inn="n" sloc="37" jdoc="A {@link DelegatingRowIterator} that is wraps a {@link org.axiondb.RowIterator} from some {@link Index}, and that can be {@link #reset reset} to recreate the iterator for a new {@link BindVariable bound value}. @see org.axiondb.engine.BaseTable#getIndexedRows @see org.axiondb.Index @see org.axiondb.BindVariable @version $Revision: 1.2 $ $Date: 2003 04 21 15:55:06 $ @author Amrish Lal">
			<field name="_index" access="priv" jdoc=""/>
			<field name="_table" access="priv" jdoc=""/>
			<field name="_op" access="priv" jdoc=""/>
			<field name="_indexSet" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.rowiterators.ChangingIndexedRowIterator.ChangingIndexedRowIterator(Index, Table, ComparisonOperator)" access="pub" jdoc="">
				<param name="index"/>
				<param name="table"/>
				<param name="op"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChangingIndexedRowIterator.reset()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChangingIndexedRowIterator.removeIndexKey()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChangingIndexedRowIterator.isEmpty()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChangingIndexedRowIterator.setIndexKey(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.ChangingIndexedRowIterator.indexSet()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator" intfc="n" abs="y" inn="n" sloc="148" jdoc="@version $Revision: 1.9 $ $Date: 2003 05 13 23:42:58 $ @author Rodney Waldhoff">
			<field name="_previousRow" access="priv" jdoc=""/>
			<field name="_previousAvailable" access="priv" jdoc=""/>
			<field name="_nextRow" access="priv" jdoc=""/>
			<field name="_nextAvailable" access="priv" jdoc=""/>
			<field name="_nextIndex" access="priv" jdoc=""/>
			<field name="_currentRow" access="priv" jdoc=""/>
			<field name="_currentAvailable" access="priv" jdoc=""/>
			<field name="_currentIndex" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.AbstractFilteringRowIterator(RowIterator)" access="pub" jdoc="">
				<param name="iterator"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.determineNextRow()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.determinePreviousRow()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.current()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.currentIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.hasCurrent()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.add(Row)" access="pub" jdoc="Not supported in this base implementation.">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.hasNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.hasPrevious()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.next()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.nextIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.previous()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.previousIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.remove()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.set(Row)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.reset()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.first()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.last()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.peekNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.peekPrevious()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.setNext(Row)" access="prot" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.clearNextRow()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.setPrevious(Row)" access="prot" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.clearPreviousRow()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.isNextAvailable()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.engine.rowiterators.AbstractFilteringRowIterator.isPreviousAvailable()" access="prot" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/:org.axiondb.event">
		<class name="/:org.axiondb.event.RowUpdatedEvent" intfc="n" abs="n" inn="n" sloc="8" jdoc="An event signifying that a row has been updated into a {@link Table}. @version $Revision: 1.2 $ $Date: 2003 03 27 19:14:05 $ @author Chuck Burdick">
			<mth name="/:org.axiondb.event.RowUpdatedEvent.RowUpdatedEvent(Table, Row, Row)" access="pub" jdoc="">
				<param name="table"/>
				<param name="oldRow"/>
				<param name="newRow"/>
			</mth>
			<mth name="/:org.axiondb.event.RowUpdatedEvent.visit(TableModificationListener)" access="pub" jdoc="">
				<param name="listener"/>
			</mth>
		</class>
		<class name="/:org.axiondb.event.DatabaseSequenceEvent" intfc="n" abs="n" inn="n" sloc="17" jdoc="An event signifying that a database object has changed, for example, due to a {@link Table} being added or dropped. @version $Revision: 1.1 $ $Date: 2003 02 05 03:38:44 $ @author Chuck Burdick">
			<field name="_name" access="priv" jdoc=""/>
			<field name="_val" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.event.DatabaseSequenceEvent.DatabaseSequenceEvent(Sequence)" access="pub" jdoc="">
				<param name="seq"/>
			</mth>
			<mth name="/:org.axiondb.event.DatabaseSequenceEvent.DatabaseSequenceEvent(String, Integer)" access="pub" jdoc="">
				<param name="name"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.event.DatabaseSequenceEvent.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.event.DatabaseSequenceEvent.getValue()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.event.BaseTableModificationPublisher" intfc="n" abs="n" inn="n" sloc="19" jdoc="Provides utilities for publishing {@link RowEvent events}to one or more {@link TableModificationListener listeners}. @version $Revision: 1.3 $ $Date: 2003 03 27 19:14:05 $ @author Rodney Waldhoff @author Chuck Burdick">
			<field name="_tableModificationListeners" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.event.BaseTableModificationPublisher.addTableModificationListener(TableModificationListener)" access="pub" jdoc="">
				<param name="listener"/>
			</mth>
			<mth name="/:org.axiondb.event.BaseTableModificationPublisher.removeTableModificationListener(TableModificationListener)" access="pub" jdoc="">
				<param name="listener"/>
			</mth>
			<mth name="/:org.axiondb.event.BaseTableModificationPublisher.getTableModificationListeners()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.event.BaseTableModificationPublisher.publishEvent(TableModifiedEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
		</class>
		<class name="/:org.axiondb.event.BaseTableModificationListener" intfc="n" abs="y" inn="n" sloc="14" jdoc="No-op convenience class for quick{@link org.axiondb.TableModificationListener listener} implementations. @version $Revision: 1.2 $ $Date: 2003 02 12 16:31:53 $ @author Chuck Burdick">
			<mth name="/:org.axiondb.event.BaseTableModificationListener.columnAdded(ColumnEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.event.BaseTableModificationListener.rowInserted(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.event.BaseTableModificationListener.rowDeleted(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.event.BaseTableModificationListener.rowUpdated(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.event.BaseTableModificationListener.constraintAdded(ConstraintEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.event.BaseTableModificationListener.constraintRemoved(ConstraintEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
		</class>
		<class name="/:org.axiondb.event.BaseDatabaseModificationListener" intfc="n" abs="y" inn="n" sloc="12" jdoc="A no-op implementation of {@link DatabaseModificationListener}. @version $Revision: 1.2 $ $Date: 2003 02 05 03:38:44 $ @author Chuck Burdick">
			<mth name="/:org.axiondb.event.BaseDatabaseModificationListener.tableAdded(DatabaseModifiedEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.event.BaseDatabaseModificationListener.tableDropped(DatabaseModifiedEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.event.BaseDatabaseModificationListener.typeAdded(DatabaseTypeEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.event.BaseDatabaseModificationListener.sequenceAdded(DatabaseSequenceEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.event.BaseDatabaseModificationListener.sequenceDropped(DatabaseSequenceEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
		</class>
		<class name="/:org.axiondb.event.TableModificationListener" intfc="y" abs="n" inn="n" sloc="8" jdoc="An observer of {@link RowEvent}s. @version $Revision: 1.2 $ $Date: 2003 02 12 16:33:51 $ @author Rodney Waldhoff @author Chuck Burdick">
			<mth name="/:org.axiondb.event.TableModificationListener.columnAdded(ColumnEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.event.TableModificationListener.rowInserted(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.event.TableModificationListener.rowDeleted(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.event.TableModificationListener.rowUpdated(RowEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.event.TableModificationListener.constraintAdded(ConstraintEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
			<mth name="/:org.axiondb.event.TableModificationListener.constraintRemoved(ConstraintEvent)" access="pub" jdoc="">
				<param name="event"/>
			</mth>
		</class>
		<class name="/:org.axiondb.event.DatabaseModificationListener" intfc="y" abs="n" inn="n" sloc="7" jdoc="An observer of {@link DatabaseModifiedEvent}s. @version $Revision: 1.3 $ $Date: 2003 02 05 03:38:44 $ @author Chuck Burdick">
			<mth name="/:org.axiondb.event.DatabaseModificationListener.tableAdded(DatabaseModifiedEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.event.DatabaseModificationListener.tableDropped(DatabaseModifiedEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.event.DatabaseModificationListener.typeAdded(DatabaseTypeEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.event.DatabaseModificationListener.sequenceAdded(DatabaseSequenceEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.event.DatabaseModificationListener.sequenceDropped(DatabaseSequenceEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
		</class>
		<class name="/:org.axiondb.event.TableModifiedEvent" intfc="n" abs="y" inn="n" sloc="10" jdoc="An event signifying that a {@link Table} has changed, due to a DDL or DML command. @version $Revision: 1.2 $ $Date: 2003 02 12 16:22:56 $ @author Chuck Burdick">
			<field name="_table" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.event.TableModifiedEvent.getTable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.event.TableModifiedEvent.setTable(Table)" access="pub" jdoc="">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.event.TableModifiedEvent.visit(TableModificationListener)" access="pub" jdoc="">
				<param name="listener"/>
			</mth>
		</class>
		<class name="/:org.axiondb.event.DatabaseModifiedEvent" intfc="n" abs="n" inn="n" sloc="9" jdoc="An event signifying that a database object has changed, for example, due to a {@link Table} being added or dropped. @version $Revision: 1.1 $ $Date: 2003 01 12 14:12:52 $ @author Chuck Burdick">
			<field name="_table" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.event.DatabaseModifiedEvent.DatabaseModifiedEvent(Table)" access="pub" jdoc="">
				<param name="t"/>
			</mth>
			<mth name="/:org.axiondb.event.DatabaseModifiedEvent.getTable()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.event.DatabaseTypeEvent" intfc="n" abs="n" inn="n" sloc="14" jdoc="An event signifying that a database object has changed, for example, due to a {@link Table} being added or dropped. @version $Revision: 1.1 $ $Date: 2003 02 04 03:00:02 $ @author Chuck Burdick">
			<field name="_name" access="priv" jdoc=""/>
			<field name="_type" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.event.DatabaseTypeEvent.DatabaseTypeEvent(String, DataType)" access="pub" jdoc="">
				<param name="name"/>
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.event.DatabaseTypeEvent.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.event.DatabaseTypeEvent.getDataType()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.event.ConstraintEvent" intfc="n" abs="n" inn="n" sloc="26" jdoc="An event signifying that a constraint in a {@link Table} has changed. @version $Revision: 1.1 $ $Date: 2003 01 12 14:16:12 $ @author Chuck Burdick">
			<field name="_table" access="priv" jdoc=""/>
			<field name="_constraint" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.event.ConstraintEvent.ConstraintEvent(Table, Constraint)" access="pub" jdoc="">
				<param name="table"/>
				<param name="constraint"/>
			</mth>
			<mth name="/:org.axiondb.event.ConstraintEvent.getTable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.event.ConstraintEvent.setTable(Table)" access="pub" jdoc="">
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.event.ConstraintEvent.getConstraint()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.event.ConstraintEvent.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.event.RowDeletedEvent" intfc="n" abs="n" inn="n" sloc="8" jdoc="An event signifying that a row has been deleted into a {@link Table}. @version $Revision: 1.2 $ $Date: 2003 03 27 19:14:05 $ @author Chuck Burdick">
			<mth name="/:org.axiondb.event.RowDeletedEvent.RowDeletedEvent(Table, Row, Row)" access="pub" jdoc="">
				<param name="table"/>
				<param name="oldRow"/>
				<param name="newRow"/>
			</mth>
			<mth name="/:org.axiondb.event.RowDeletedEvent.visit(TableModificationListener)" access="pub" jdoc="">
				<param name="listener"/>
			</mth>
		</class>
		<class name="/:org.axiondb.event.RowEvent" intfc="n" abs="y" inn="n" sloc="32" jdoc="An event signifying that a row in a {@link Table} has changed, for example, due to a DML command. @version $Revision: 1.2 $ $Date: 2003 03 27 19:14:05 $ @author Rodney Waldhoff @author Chuck Burdick">
			<field name="_oldRow" access="priv" jdoc=""/>
			<field name="_newRow" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.event.RowEvent.RowEvent(Table, Row, Row)" access="pub" jdoc="">
				<param name="table"/>
				<param name="oldRow"/>
				<param name="newRow"/>
			</mth>
			<mth name="/:org.axiondb.event.RowEvent.getOldRow()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.event.RowEvent.setOldRow(Row)" access="pub" jdoc="">
				<param name="oldRow"/>
			</mth>
			<mth name="/:org.axiondb.event.RowEvent.getNewRow()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.event.RowEvent.setNewRow(Row)" access="pub" jdoc="">
				<param name="newRow"/>
			</mth>
			<mth name="/:org.axiondb.event.RowEvent.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.event.RowInsertedEvent" intfc="n" abs="n" inn="n" sloc="8" jdoc="An event signifying that a row has been inserted into a {@link Table}. @version $Revision: 1.2 $ $Date: 2003 03 27 19:14:05 $ @author Chuck Burdick">
			<mth name="/:org.axiondb.event.RowInsertedEvent.RowInsertedEvent(Table, Row, Row)" access="pub" jdoc="">
				<param name="table"/>
				<param name="oldRow"/>
				<param name="newRow"/>
			</mth>
			<mth name="/:org.axiondb.event.RowInsertedEvent.visit(TableModificationListener)" access="pub" jdoc="">
				<param name="listener"/>
			</mth>
		</class>
		<class name="/:org.axiondb.event.SequenceModificationListener" intfc="y" abs="n" inn="n" sloc="3" jdoc="An observer of {@link SequenceEvent}s. @version $Revision: 1.1 $ $Date: 2003 02 12 16:23:59 $ @author Chuck Burdick">
			<mth name="/:org.axiondb.event.SequenceModificationListener.sequenceIncremented(DatabaseSequenceEvent)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
		</class>
		<class name="/:org.axiondb.event.ColumnEvent" intfc="n" abs="n" inn="n" sloc="25" jdoc="An event signifying that a {@link Column} in a {@link Table} has changed, for example, due to a DDL command. @version $Revision: 1.1 $ $Date: 2003 02 12 16:22:56 $ @author Chuck Burdick">
			<field name="_col" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.event.ColumnEvent.ColumnEvent(Table, Column)" access="pub" jdoc="">
				<param name="table"/>
				<param name="col"/>
			</mth>
			<mth name="/:org.axiondb.event.ColumnEvent.getColumn()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.event.ColumnEvent.setColumn(Column)" access="pub" jdoc="">
				<param name="col"/>
			</mth>
			<mth name="/:org.axiondb.event.ColumnEvent.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.event.ColumnEvent.visit(TableModificationListener)" access="pub" jdoc="">
				<param name="listener"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/:org.axiondb.expression">
		<class name="/:org.axiondb.expression.ExpressionIdentifier" intfc="n" abs="n" inn="n" sloc="44" jdoc="A database expression identifier. @version $Revision: 1.4 $ $Date: 2003 07 07 21:50:15 $ @author Rahul Dwivedi">
			<field name="_name" access="priv" jdoc=""/>
			<field name="_leftSelectable" access="priv" jdoc=""/>
			<field name="_rightSelectable" access="priv" jdoc=""/>
			<field name="_operationType" access="priv" jdoc=""/>
			<field name="MINUS_OPERATION" access="pub" jdoc=""/>
			<field name="PLUS_OPERATION" access="pub" jdoc=""/>
			<field name="CONCAT_OPERATION" access="pub" jdoc=""/>
			<field name="MULT_OPERATION" access="pub" jdoc=""/>
			<field name="DIV_OPERATION" access="pub" jdoc=""/>
			<mth name="/:org.axiondb.expression.ExpressionIdentifier.ExpressionIdentifier(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.expression.ExpressionIdentifier.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.expression.ExpressionIdentifier.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.expression.ExpressionIdentifier.getLabel()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.expression.ExpressionIdentifier.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.expression.ExpressionIdentifier.setLeftSelectable(Selectable)" access="pub" jdoc="">
				<param name="sel"/>
			</mth>
			<mth name="/:org.axiondb.expression.ExpressionIdentifier.setRightSelectable(Selectable)" access="pub" jdoc="">
				<param name="sel"/>
			</mth>
			<mth name="/:org.axiondb.expression.ExpressionIdentifier.setOperationType(short)" access="pub" jdoc="">
				<param name="opType"/>
			</mth>
			<mth name="/:org.axiondb.expression.ExpressionIdentifier.getLeftSelectable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.expression.ExpressionIdentifier.getOperationType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.expression.ExpressionIdentifier.getRightSelectable()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.expression.Expression" intfc="n" abs="n" inn="n" sloc="155" jdoc="A database expression. @version $Revision: 1.3 $ $Date: 2003 06 10 17:48:42 $ @author Rahul Dwivedi">
			<comm cntt="Function identifies the return DataType resolved depending on the Type of Operation Performed."/>
			<field name="_name" access="priv" jdoc=""/>
			<field name="_leftSelectable" access="priv" jdoc=""/>
			<field name="_rightSelectable" access="priv" jdoc=""/>
			<field name="_operationType" access="priv" jdoc=""/>
			<field name="MINUS_OPERATION" access="pub" jdoc=""/>
			<field name="PLUS_OPERATION" access="pub" jdoc=""/>
			<field name="CONCAT_OPERATION" access="pub" jdoc=""/>
			<field name="MULT_OPERATION" access="pub" jdoc=""/>
			<field name="DIV_OPERATION" access="pub" jdoc=""/>
			<field name="_returnType" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.expression.Expression.Expression()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.expression.Expression.setLeftSelectable(Selectable)" access="pub" jdoc="">
				<param name="sel"/>
			</mth>
			<mth name="/:org.axiondb.expression.Expression.setRightSelectable(Selectable)" access="pub" jdoc="">
				<param name="sel"/>
			</mth>
			<mth name="/:org.axiondb.expression.Expression.setOperationType(short)" access="pub" jdoc="">
				<param name="opType"/>
			</mth>
			<mth name="/:org.axiondb.expression.Expression.getOperationType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.expression.Expression.getLeftSelectable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.expression.Expression.getRightSelectable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.expression.Expression.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.expression.Expression.doOperation(Object, Object, short)" access="priv" jdoc="">
				<param name="left"/>
				<param name="right"/>
				<param name="operationType"/>
			</mth>
			<mth name="/:org.axiondb.expression.Expression.doOperationForString(String, String, short)" access="priv" jdoc="">
				<param name="left"/>
				<param name="right"/>
				<param name="operationType"/>
			</mth>
			<mth name="/:org.axiondb.expression.Expression.doOperationForLong(Long, Long, short)" access="priv" jdoc="">
				<param name="left"/>
				<param name="right"/>
				<param name="operationType"/>
			</mth>
			<mth name="/:org.axiondb.expression.Expression.doOperationForShort(Short, Short, short)" access="priv" jdoc="">
				<param name="left"/>
				<param name="right"/>
				<param name="operationType"/>
			</mth>
			<mth name="/:org.axiondb.expression.Expression.doOperationForInteger(Integer, Integer, short)" access="priv" jdoc="">
				<param name="left"/>
				<param name="right"/>
				<param name="operationType"/>
			</mth>
			<mth name="/:org.axiondb.expression.Expression.doOperationForFloat(Float, Float, short)" access="priv" jdoc="">
				<param name="left"/>
				<param name="right"/>
				<param name="operationType"/>
			</mth>
			<mth name="/:org.axiondb.expression.Expression.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.expression.Expression.getLabel()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.expression.Expression.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.expression.Expression.resolveReturnType()" access="priv" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/:org.axiondb.functions">
		<class name="/:org.axiondb.functions.Base64DecodeFunction" intfc="n" abs="n" inn="n" sloc="30" jdoc="&amp;lt;tt&amp;gt;BASE64DECODE(string)&amp;lt; tt&amp;gt;: returns a byte array representing the Base64 decoded value of the given &amp;lt;i&amp;gt;string&amp;lt; i&amp;gt;. @version $Revision: 1.1 $ $Date: 2003 05 14 22:28:40 $ @author Rodney Waldhoff">
			<comm cntt="???"/>
			<const name="RETURN_TYPE" access="priv" jdoc=""/>
			<const name="STRING_TYPE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.functions.Base64DecodeFunction.Base64DecodeFunction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.Base64DecodeFunction.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.Base64DecodeFunction.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.Base64DecodeFunction.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.functions.Base64DecodeFunction.isValid()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.functions.ScalarFunction" intfc="y" abs="n" inn="n" sloc="3" jdoc="A {@link ConcreteFunction} that evaluates a single {@link org.axiondb.Row}. @version $Revision: 1.3 $ $Date: 2003 03 27 19:14:06 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.functions.ScalarFunction.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
		</class>
		<class name="/:org.axiondb.functions.AggregateFunction" intfc="y" abs="n" inn="n" sloc="3" jdoc="An aggregate function, which evalutes a collection of{@link org.axiondb.Row}s. @version $Revision: 1.2 $ $Date: 2002 12 16 23:34:54 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.functions.AggregateFunction.evaluate(RowDecoratorIterator)" access="pub" jdoc="">
				<param name="rows"/>
			</mth>
		</class>
		<class name="/:org.axiondb.functions.LowerFunction" intfc="n" abs="n" inn="n" sloc="34" jdoc="&amp;lt;tt&amp;gt;LOWER(string)&amp;lt; tt&amp;gt;: returns a {@link StringType string} containing the lower case version of the input &amp;lt;i&amp;gt;string&amp;lt; i&amp;gt;. @version $Revision: 1.2 $ $Date: 2002 12 16 23:34:55 $ @author Rodney Waldhoff">
			<const name="RETURN_TYPE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.functions.LowerFunction.LowerFunction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.LowerFunction.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.LowerFunction.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.LowerFunction.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.functions.LowerFunction.isValid()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.functions.ConcreteFunction" intfc="y" abs="n" inn="n" sloc="3" jdoc="An executable {@link Function}, as opposed to a {@link FunctionIdentifier}. @version $Revision: 1.2 $ $Date: 2002 12 16 23:34:54 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.functions.ConcreteFunction.isValid()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.functions.CountFunction" intfc="n" abs="n" inn="n" sloc="26" jdoc="&amp;lt;code&amp;gt;COUNT&amp;lt; code&amp;gt;: an aggregate function returning the number of rows. @version $Revision: 1.5 $ $Date: 2003 03 27 19:14:06 $ @author Rodney Waldhoff @author Chuck Burdick">
			<const name="RETURN_TYPE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.functions.CountFunction.CountFunction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.CountFunction.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.CountFunction.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.CountFunction.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.functions.CountFunction.evaluate(RowDecoratorIterator)" access="pub" jdoc="">
				<param name="rows"/>
			</mth>
			<mth name="/:org.axiondb.functions.CountFunction.isValid()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.functions.Base64EncodeFunction" intfc="n" abs="n" inn="n" sloc="46" jdoc="&amp;lt;tt&amp;gt;BASE64ENCODE(byte[])&amp;lt; tt&amp;gt;: returns a string representing the Base64 encoded value of the given &amp;lt;i&amp;gt;byte[]&amp;lt; i&amp;gt; or Blob. @version $Revision: 1.1 $ $Date: 2003 05 14 22:28:40 $ @author Rodney Waldhoff">
			<const name="RETURN_TYPE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.functions.Base64EncodeFunction.Base64EncodeFunction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.Base64EncodeFunction.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.Base64EncodeFunction.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.Base64EncodeFunction.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.functions.Base64EncodeFunction.isValid()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.Base64EncodeFunction.readBlob(Blob)" access="priv" jdoc="">
				<param name="blob"/>
			</mth>
		</class>
		<class name="/:org.axiondb.functions.CoalesceFunction" intfc="n" abs="n" inn="n" sloc="24" jdoc="&amp;lt;code&amp;gt;COALESCE([&amp;lt;i&amp;gt;value&amp;lt; i&amp;gt;]+)&amp;lt; code&amp;gt;: returns the first non-null value in the argument list. @version $Revision: 1.1 $ $Date: 2003 07 07 16:14:28 $ @author Amrish Lal">
			<field name="_returnType" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.functions.CoalesceFunction.CoalesceFunction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.CoalesceFunction.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.CoalesceFunction.getDataType()" access="pub" jdoc="{@link StringType}">
			</mth>
			<mth name="/:org.axiondb.functions.CoalesceFunction.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.functions.CoalesceFunction.isValid()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.functions.LikeToRegexpFunction" intfc="n" abs="n" inn="n" sloc="95" jdoc="@version $Revision: 1.3 $ $Date: 2003 07 09 17:09:55 $ @author Chuck Burdick">
			<const name="_log" access="priv" jdoc=""/>
			<const name="ARG_TYPE" access="priv" jdoc=""/>
			<field name="_buf" access="priv" jdoc=""/>
			<field name="_convertCache" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.functions.LikeToRegexpFunction.LikeToRegexpFunction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.LikeToRegexpFunction.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.LikeToRegexpFunction.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.LikeToRegexpFunction.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.functions.LikeToRegexpFunction.convertLike(String)" access="prot" jdoc="">
				<param name="orig"/>
			</mth>
			<mth name="/:org.axiondb.functions.LikeToRegexpFunction.isValid()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.functions.NowFunction" intfc="n" abs="n" inn="n" sloc="18" jdoc="@version $Revision: 1.1 $ $Date: 2003 07 08 21:45:49 $ @author Rodney Waldhoff">
			<const name="DATE_TYPE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.functions.NowFunction.NowFunction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.NowFunction.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.NowFunction.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.NowFunction.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.functions.NowFunction.isValid()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.functions.FunctionIdentifier" intfc="n" abs="n" inn="n" sloc="35" jdoc="A {@link Selectable} representing an unresolved {@link Function}. @version $Revision: 1.3 $ $Date: 2003 05 13 19:33:47 $ @author Rodney Waldhoff @author Chuck Burdick">
			<field name="_name" access="priv" jdoc=""/>
			<field name="_args" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.functions.FunctionIdentifier.FunctionIdentifier(String, List)" access="pub" jdoc="">
				<param name="name"/>
				<param name="args"/>
			</mth>
			<mth name="/:org.axiondb.functions.FunctionIdentifier.addArgument(Selectable)" access="pub" jdoc="">
				<param name="arg"/>
			</mth>
			<mth name="/:org.axiondb.functions.FunctionIdentifier.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.FunctionIdentifier.getLabel()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.FunctionIdentifier.setName(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.functions.FunctionIdentifier.getArgumentCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.FunctionIdentifier.getArgument(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.functions.FunctionIdentifier.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.functions.FunctionIdentifier.getDataType()" access="pub" jdoc="">
				<comm cntt="XXX FIX ME XXX ?"/>
			</mth>
			<mth name="/:org.axiondb.functions.FunctionIdentifier.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.functions.ConcatFunction" intfc="n" abs="n" inn="n" sloc="38" jdoc="&amp;lt;code&amp;gt;CONCAT(&amp;lt;i&amp;gt;string&amp;lt; i&amp;gt; [, &amp;lt;i&amp;gt;string&amp;lt; i&amp;gt;] )&amp;lt; code&amp;gt;: concatenates one or more {@link StringType strings}. &amp;lt;p &amp;gt; Evaluates to &amp;lt;code&amp;gt;NULL&amp;lt; code&amp;gt; if any of the arguments are &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;. @version $Revision: 1.2 $ $Date: 2002 12 16 23:34:54 $ @author Rodney Waldhoff">
			<const name="RETURN_TYPE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.functions.ConcatFunction.ConcatFunction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.ConcatFunction.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.ConcatFunction.getDataType()" access="pub" jdoc="{@link StringType}">
			</mth>
			<mth name="/:org.axiondb.functions.ConcatFunction.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.functions.ConcatFunction.isValid()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.functions.CharFunction" intfc="n" abs="n" inn="n" sloc="29" jdoc="&amp;lt;code&amp;gt;CHAR(&amp;lt;i&amp;gt;number&amp;lt; i&amp;gt;)&amp;lt; code&amp;gt;: returns the {@link CharacterType character} representing the unicode value &amp;lt;i&amp;gt;number&amp;lt; i&amp;gt;. @version $Revision: 1.2 $ $Date: 2002 12 16 23:34:54 $ @author Rodney Waldhoff">
			<const name="CHAR_TYPE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.functions.CharFunction.CharFunction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.CharFunction.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.CharFunction.getDataType()" access="pub" jdoc="{@link CharacterType}">
			</mth>
			<mth name="/:org.axiondb.functions.CharFunction.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.functions.CharFunction.isValid()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.functions.RowNumFunction" intfc="n" abs="n" inn="n" sloc="22" jdoc="Returns an one-based index indicating the order in which a row was selected from a table, join, etc. &amp;lt;p&amp;gt; Note that conditions testing whether ROWNUM() is greater than a positive integer will always fail (since for each tested row ROWNUM() will evaluate to 1). @version $Revision: 1.2 $ $Date: 2003 03 27 19:14:06 $ @author Rodney Waldhoff">
			<const name="INT_TYPE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.functions.RowNumFunction.RowNumFunction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.RowNumFunction.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.RowNumFunction.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.RowNumFunction.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.functions.RowNumFunction.isValid()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.functions.MatchesFunction" intfc="n" abs="n" inn="n" sloc="51" jdoc="&amp;lt;tt&amp;gt;MATCHES(string, string)&amp;lt; tt&amp;gt;: returns a {@link BooleanType boolean} that indicates whether first string matches the {@link RE regular expression} represented by the second string @version $Revision: 1.4 $ $Date: 2003 07 09 21:50:51 $ @author Chuck Burdick">
			<field name="_reCache" access="priv" jdoc=""/>
			<const name="ARG_TYPE" access="prot" jdoc=""/>
			<const name="RETURN_TYPE" access="prot" jdoc=""/>
			<const name="_log" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.functions.MatchesFunction.MatchesFunction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.MatchesFunction.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.MatchesFunction.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.MatchesFunction.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.functions.MatchesFunction.getStringFromArg(Selectable, RowDecorator)" access="priv" jdoc="">
				<param name="sel"/>
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.functions.MatchesFunction.isValid()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.functions.UpperFunction" intfc="n" abs="n" inn="n" sloc="34" jdoc="&amp;lt;tt&amp;gt;UPPER(string)&amp;lt; tt&amp;gt;: returns a {@link StringType string} representing the upper case version of the input &amp;lt;i&amp;gt;string&amp;lt; i&amp;gt;. @version $Revision: 1.2 $ $Date: 2002 12 16 23:34:55 $ @author Rodney Waldhoff">
			<const name="RETURN_TYPE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.functions.UpperFunction.UpperFunction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.UpperFunction.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.UpperFunction.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.UpperFunction.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.functions.UpperFunction.isValid()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.functions.MaxFunction" intfc="n" abs="n" inn="n" sloc="42" jdoc="&amp;lt;code&amp;gt;MAX(&amp;lt;i&amp;gt;number&amp;lt; i&amp;gt;)&amp;lt; code&amp;gt;: an aggregate function returning the largest of the {@link IntegerType integer}-valued inputs. @version $Revision: 1.6 $ $Date: 2003 03 27 19:14:06 $ @author Rodney Waldhoff">
			<const name="RETURN_TYPE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.functions.MaxFunction.MaxFunction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.MaxFunction.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.MaxFunction.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.MaxFunction.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.functions.MaxFunction.evaluate(RowDecoratorIterator)" access="pub" jdoc="">
				<param name="rows"/>
			</mth>
			<mth name="/:org.axiondb.functions.MaxFunction.isValid()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.functions.BaseFunction" intfc="n" abs="y" inn="n" sloc="30" jdoc="An abstract base {@link ConcreteFunction} implementation. @version $Revision: 1.3 $ $Date: 2003 05 13 19:33:47 $ @author Rodney Waldhoff @author Chuck Burdick">
			<field name="_args" access="priv" jdoc=""/>
			<field name="_name" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.functions.BaseFunction.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.BaseFunction.isValid()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.BaseFunction.BaseFunction(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.functions.BaseFunction.setName(String)" access="pub" jdoc="">
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.functions.BaseFunction.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.BaseFunction.getLabel()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.BaseFunction.addArgument(Selectable)" access="pub" jdoc="">
				<param name="arg"/>
			</mth>
			<mth name="/:org.axiondb.functions.BaseFunction.getArgumentCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.BaseFunction.getArgument(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.functions.BaseFunction.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.functions.ContainsFunction" intfc="n" abs="n" inn="n" sloc="33" jdoc="&amp;lt;tt&amp;gt;CONTAINS(string, string)&amp;lt; tt&amp;gt;: returns a {@link BooleanType boolean} that indicates whether the second string is a substring of the first. @version $Revision: 1.4 $ $Date: 2003 07 09 21:50:51 $ @author Chuck Burdick">
			<const name="ARG_TYPE" access="priv" jdoc=""/>
			<const name="RETURN_TYPE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.functions.ContainsFunction.ContainsFunction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.ContainsFunction.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.ContainsFunction.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.ContainsFunction.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.functions.ContainsFunction.isValid()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.functions.IfThenFunction" intfc="n" abs="n" inn="n" sloc="30" jdoc="&amp;lt;code&amp;gt;IFTHEN(&amp;lt;i&amp;gt;condition&amp;lt; i&amp;gt; &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt;)&amp;lt; code&amp;gt;: returns value if condition evalates to true; else, it returns null. @version $Revision: 1.2 $ $Date: 2003 07 07 20:22:16 $ @author Amrish Lal">
			<field name="_returnType" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.functions.IfThenFunction.IfThenFunction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.IfThenFunction.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.IfThenFunction.getDataType()" access="pub" jdoc="{@link AnyType}">
			</mth>
			<mth name="/:org.axiondb.functions.IfThenFunction.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.functions.IfThenFunction.isValid()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.functions.MinFunction" intfc="n" abs="n" inn="n" sloc="42" jdoc="&amp;lt;code&amp;gt;MIN(&amp;lt;i&amp;gt;number&amp;lt; i&amp;gt;)&amp;lt; code&amp;gt;: an aggregate function returning the least of the {@link IntegerType integer}-valued inputs. @version $Revision: 1.6 $ $Date: 2003 03 27 19:14:06 $ @author Rodney Waldhoff">
			<const name="RETURN_TYPE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.functions.MinFunction.MinFunction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.MinFunction.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.MinFunction.getDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.functions.MinFunction.evaluate(RowDecorator)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.functions.MinFunction.evaluate(RowDecoratorIterator)" access="pub" jdoc="">
				<param name="rows"/>
			</mth>
			<mth name="/:org.axiondb.functions.MinFunction.isValid()" access="pub" jdoc="">
			</mth>
		</class>
	</pkg>
	<pkg name="/:org.axiondb.jdbc">
		<class name="/:org.axiondb.jdbc.AbstractAxionBlob" intfc="n" abs="n" inn="n" sloc="35" jdoc="Abstract base implementation of {@link AxionBlob}. @TODO Not actually being abstract, perhaps we should rename this class. @version $Revision: 1.3 $ $Date: 2003 07 10 16:34:34 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.jdbc.AbstractAxionBlob.getBinaryStream()" access="pub" jdoc="@throws SQLException indicating this method is not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionBlob.getBytes(long, int)" access="pub" jdoc="@throws SQLException indicating this method is not supported.">
				<param name="pos"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionBlob.length()" access="pub" jdoc="@throws SQLException indicating this method is not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionBlob.position(Blob, long)" access="pub" jdoc="@throws SQLException indicating this method is not supported.">
				<param name="pattern"/>
				<param name="start"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionBlob.position(byte[], long)" access="pub" jdoc="@throws SQLException indicating this method is not supported.">
				<param name="pattern"/>
				<param name="start"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionBlob.setBinaryStream(long)" access="pub" jdoc="@throws SQLException indicating this method is not supported.">
				<param name="pos"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionBlob.setBytes(long, byte[])" access="pub" jdoc="Invokes {@link #setBytes(long,byte[],int,int) setBytes(pos,bytes,0,bytes.length)}">
				<param name="pos"/>
				<param name="bytes"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionBlob.setBytes(long, byte[], int, int)" access="pub" jdoc="@throws SQLException indicating this method is not supported.">
				<param name="pos"/>
				<param name="bytes"/>
				<param name="offset"/>
				<param name="len"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionBlob.truncate(long)" access="pub" jdoc="@throws SQLException indicating this method is not supported.">
				<param name="len"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionBlob.free()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionBlob.getBinaryStream(long, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="pos"/>
				<param name="length"/>
			</mth>
		</class>
		<class name="/:org.axiondb.jdbc.AxionStatement" intfc="n" abs="n" inn="n" sloc="214" jdoc="A {@link Statement} implementation. @TODO Support currently unsupported JDBC 3 methods @version $Revision: 1.25 $ $Date: 2003 07 10 22:20:37 $ @author Chuck Burdick @author Rodney Waldhoff">
			<comm cntt="JDBC 3 JDK 1.4 methods"/>
			<field name="_batchCommands" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.jdbc.AxionStatement.AxionStatement(AxionConnection)" access="prot" jdoc="">
				<param name="conn"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.addBatch(String)" access="pub" jdoc="">
				<param name="sql"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.cancel()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.clearBatch()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.clearWarnings()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.execute(String)" access="pub" jdoc="">
				<param name="sql"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.executeBatch()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.executeQuery(String)" access="pub" jdoc="">
				<param name="sql"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.executeUpdate(String)" access="pub" jdoc="">
				<param name="sql"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.getFetchDirection()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.getFetchSize()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.getMaxFieldSize()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.getMoreResults()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.getQueryTimeout()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.getResultSet()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.getResultSetConcurrency()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.getResultSetType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.getUpdateCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.getWarnings()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.setCursorName(String)" access="pub" jdoc="">
				<comm cntt="&amp;quot;If the database doesn&amp;apos;t suport positioned update delete, this method is a noop.&amp;quot;"/>
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.setEscapeProcessing(boolean)" access="pub" jdoc="">
				<param name="enable"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.setFetchDirection(int)" access="pub" jdoc="">
				<comm cntt="setFetchDirection is only a hint anyway"/>
				<param name="direction"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.setFetchSize(int)" access="pub" jdoc="">
				<comm cntt="setFecthSize is only a hint"/>
				<param name="rows"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.setMaxFieldSize(int)" access="pub" jdoc="">
				<param name="size"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.setQueryTimeout(int)" access="pub" jdoc="">
				<param name="seconds"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.getGeneratedKeys()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.execute(String, int)" access="pub" jdoc="Currently unsupported when autoGeneratedKeys is not Statement.NO_GENERATED_KEYS.">
				<param name="sql"/>
				<param name="autoGeneratedKeys"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.execute(String, int)" access="pub" jdoc="Currently unsupported.">
				<param name="sql"/>
				<param name="columnIndexes"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.execute(String, String)" access="pub" jdoc="Currently unsupported.">
				<param name="sql"/>
				<param name="columnNames"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.executeUpdate(String, int)" access="pub" jdoc="Currently unsupported when auotGeneratedKeys is not Statement.NO_GENERATED_KEYS.">
				<param name="sql"/>
				<param name="autoGeneratedKeys"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.executeUpdate(String, int[])" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
				<param name="arg1"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.executeUpdate(String, String[])" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
				<param name="arg1"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.getMoreResults(int)" access="pub" jdoc="Currently unsupported when current is not Statement.CLOSE_CURRENT_RESULT or Statement.CLOSE_ALL_RESULTS.">
				<param name="current"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.getResultSetHoldability()" access="pub" jdoc="Currently unsupported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.addBatchCommand(AxionCommand)" access="prot" jdoc="">
				<param name="cmd"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.clearBatchCommands()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.getBatchCommands()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.getBatchCommandCount()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.executeUpdate(AxionCommand)" access="prot" jdoc="">
				<param name="cmd"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.unwrap(Class)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="iface"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.isWrapperFor(Class)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="iface"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.isClosed()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.setPoolable(boolean)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="poolable"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionStatement.isPoolable()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
		</class>
		<class name="/:org.axiondb.jdbc.ConnectionFactory" intfc="n" abs="y" inn="n" sloc="19" jdoc="Abstract factory for creating {@link AxionConnection}s. @version $Revision: 1.3 $ $Date: 2003 07 09 23:56:17 $ @author Rodney Waldhoff">
			<const name="URL_PREFIX" access="pub" jdoc=""/>
			<mth name="/:org.axiondb.jdbc.ConnectionFactory.isValidConnectString(String)" access="prot" jdoc="">
				<param name="url"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.ConnectionFactory.createConnection(String)" access="prot" jdoc="">
				<param name="url"/>
			</mth>
		</class>
		<class name="/:org.axiondb.jdbc.AxionDatabaseMetaData" intfc="n" abs="n" inn="n" sloc="632" jdoc="A {@link DatabaseMetaData} implementation. @TODO Support currently unsupported JDBC 3 methods. @version $Revision: 1.17 $ $Date: 2003 07 10 22:53:50 $ @author Rodney Waldhoff">
			<comm cntt="-------------------------------------------------------------------------"/>
			<comm cntt="-------------------------------------------------------------------------"/>
			<comm cntt="----------------------------"/>
			<comm cntt="XXX CHANGE ME ON RELEASE XXX"/>
			<comm cntt="JDBC 3 JDK 1.4 methods"/>
			<field name="_connection" access="priv" jdoc=""/>
			<field name="_db" access="priv" jdoc=""/>
			<const name="AXION_VERSION" access="priv" jdoc=""/>
			<const name="DB_MAJOR_VERSION" access="priv" jdoc=""/>
			<const name="DB_MINOR_VERSION" access="priv" jdoc=""/>
			<const name="_log" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.AxionDatabaseMetaData(AxionConnection, Database)" access="pub" jdoc="">
				<param name="conn"/>
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getDatabaseProductName()" access="pub" jdoc="Currently returns &amp;quot;&amp;lt;code&amp;gt;AxionDB&amp;lt; code&amp;gt;&amp;quot;.">
				<comm cntt="XXX FIX ME XXX"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getDatabaseProductVersion()" access="pub" jdoc="Currently returns &amp;quot;&amp;lt;code&amp;gt;1.0M1&amp;lt; code&amp;gt;&amp;quot;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getDriverName()" access="pub" jdoc="Currently returns &amp;quot;&amp;lt;code&amp;gt;Axion JDBC Driver&amp;quot;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getDriverVersion()" access="pub" jdoc="Currently returns &amp;quot;&amp;lt;code&amp;gt;1.0M1&amp;lt; code&amp;gt;&amp;quot;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getDriverMajorVersion()" access="pub" jdoc="Currently returns &amp;lt;code&amp;gt;0&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getDriverMinorVersion()" access="pub" jdoc="Currently returns &amp;lt;code&amp;gt;1&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getUserName()" access="pub" jdoc="Currently returns &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.allProceduresAreCallable()" access="pub" jdoc="Currently returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.allTablesAreSelectable()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;, since all tables are indeed selectable.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.isReadOnly()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; when this database is known to be read only, false otherwise.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsMixedCaseIdentifiers()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;, since Axion currently ignores case in identifiers.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsColumnAliasing()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;, since Axion supports column aliasing.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsBatchUpdates()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;, since Axion supports addBatch,clearBatch and executeBatch.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getConnection()" access="pub" jdoc="Returns my {@link Connection}.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.nullsAreSortedHigh()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;, since &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;s are considered greater than any non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; value.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.nullsAreSortedLow()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;, since &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;s are considered greater than any non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; value. @see #nullsAreSortedHigh">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.nullsAreSortedAtStart()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;, since &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;s are considered greater than any non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; value. @see #nullsAreSortedHigh">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.nullsAreSortedAtEnd()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;, since &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;s are considered greater than any non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; value. @see #nullsAreSortedHigh">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.storesLowerCaseIdentifiers()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;, since Axion currently ignores case in identifiers, and stores them internally as upper case values.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsMixedCaseQuotedIdentifiers()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;, since Axion currently ignores case in identifiers.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.storesMixedCaseQuotedIdentifiers()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;, since Axion currently ignores case in identifiers, and stores them internally as upper case values.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.storesUpperCaseIdentifiers()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;, since Axion currently ignores case in identifiers, and stores them internally as upper case values.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.storesLowerCaseQuotedIdentifiers()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;, since Axion currently ignores case in identifiers, and stores them internally as upper case values. Quoted identifiers are also currently unsupported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.storesMixedCaseIdentifiers()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;, since Axion currently ignores case in identifiers, and stores them internally as upper case values.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxRowSize()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;0&amp;lt; code&amp;gt;, since Axion has no hard limit on the size of a row.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxStatementLength()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;0&amp;lt; code&amp;gt;, since Axion has no hard limit on the size of a statement.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxConnections()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;0&amp;lt; code&amp;gt;, since Axion has no hard limit on the number of connections.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxColumnNameLength()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;0&amp;lt; code&amp;gt;, since Axion has no hard limit on the length of a column name.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxColumnsInIndex()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;1&amp;lt; code&amp;gt;, since Axion currently doesn&amp;apos;t support multi-column indices.">
				<comm cntt="0 when we support multi-column indices"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxTablesInSelect()" access="pub" jdoc="Returns {@link java.lang.Integer#MAX_VALUE}, the maximum number of tables Axion can manage in a single SELECT statement.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxColumnsInOrderBy()" access="pub" jdoc="Returns {@link java.lang.Integer#MAX_VALUE}, the maximum number of columns Axion can manage in a single ORDER BY clause.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxColumnsInSelect()" access="pub" jdoc="Returns {@link java.lang.Integer#MAX_VALUE}, the maximum number of columns Axion can manage in a single SELECT clause.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxColumnsInTable()" access="pub" jdoc="Returns {@link java.lang.Integer#MAX_VALUE}, the maximum number of columns Axion can manage in a single table.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxColumnsInGroupBy()" access="pub" jdoc="Returns 0.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsUnion()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; since UNION queries are currently not supported..">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxSchemaNameLength()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;0&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxStatements()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;0&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxTableNameLength()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;Integer.MAX_VALUE&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxUserNameLength()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;0&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxBinaryLiteralLength()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;0&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxCharLiteralLength()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;0&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxIndexLength()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;0&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxProcedureNameLength()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;0&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxCatalogNameLength()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;0&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getDefaultTransactionIsolation()" access="pub" jdoc="Returns {@link Connection#TRANSACTION_SERIALIZABLE}.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getURL()" access="pub" jdoc="Returns the connect string used to establish my {@link Connection}.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsSelectForUpdate()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsStoredProcedures()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsSubqueriesInComparisons()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsSubqueriesInExists()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsSubqueriesInIns()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsSubqueriesInQuantifieds()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsAlterTableWithDropColumn()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsAlterTableWithAddColumn()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsSchemasInDataManipulation()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsSchemasInProcedureCalls()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsSchemasInIndexDefinitions()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsCatalogsInDataManipulation()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsCatalogsInProcedureCalls()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsCatalogsInTableDefinitions()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsCatalogsInIndexDefinitions()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsCatalogsInPrivilegeDefinitions()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsGroupBy()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsGroupByUnrelated()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsGroupByBeyondSelect()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsOuterJoins()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsFullOuterJoins()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsLimitedOuterJoins()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsOrderByUnrelated()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;, since Axion allows arbitrary columns in an ORDER BY.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsTransactions()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;, since Axion supports transactions.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsTransactionIsolationLevel(int)" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; iff &amp;lt;i&amp;gt;level&amp;lt; i&amp;gt; is{@link Connection#TRANSACTION_SERIALIZABLE} since Axion supports TRANSACTION_SERIALIZABLE transactions only.">
				<param name="level"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsConvert()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
				<comm cntt="though this would be easy to add"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsConvert(int, int)" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
				<param name="fromType"/>
				<param name="toType"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsUnionAll()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsTableCorrelationNames()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; as Axion supports table aliasing.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsDifferentTableCorrelationNames()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; as Axion supports table aliasing.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.storesUpperCaseQuotedIdentifiers()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsMinimumSQLGrammar()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; as Axion supports the &amp;lt;a href=&amp;quot;http: msdn.microsoft.com library en-us odbc htm odbcsql_minimum_grammar.asp&amp;quot;&amp;gt;&amp;quot;ODBC Minimum SQL Grammar&amp;quot;&amp;lt; a&amp;gt;. Namely: &amp;lt;pre&amp;gt; CREATE TABLE base-table-name (column-identifier data-type [,column-identifier data-type] ) DELETE FROM table-name [WHERE search-condition] DROP TABLE base-table-name INSERT INTO table-name [( column-identifier [, column-identifier]...)] VALUES (insert-value[, insert-value]... ) SELECT [ALL | DISTINCT] select-list FROM table-reference-list [WHERE search-condition] [order-by-clause] UPDATE table-name SET column-identifier = {expression | NULL } [, column-identifier = {expression | NULL}] [WHERE search-condition] &amp;lt; pre&amp;gt;">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.nullPlusNonNullIsNull()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getColumns(String, String, String, String)" access="pub" jdoc="Supported, although the only supported patterns are &amp;lt;code&amp;gt;&amp;quot;%&amp;quot;&amp;lt; code&amp;gt; (matching all) or a total match (no &amp;lt;code&amp;gt;&amp;apos;%&amp;apos;&amp;lt; code&amp;gt; or &amp;lt;code&amp;gt;&amp;apos;.&amp;apos;&amp;lt; code&amp;gt; wildcards).">
				<comm cntt="XXX FIX ME XXX should be LIKE"/>
				<comm cntt="XXX FIX ME XXX should be LIKE"/>
				<comm cntt="XXX FIX ME XXX should be LIKE"/>
				<param name="catalog"/>
				<param name="schemaPattern"/>
				<param name="tableNamePattern"/>
				<param name="columnNamePattern"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getTables(String, String, String, String)" access="pub" jdoc="Supported, although the only supported patterns are &amp;lt;code&amp;gt;&amp;quot;%&amp;quot;&amp;lt; code&amp;gt; (matching all) or a total match (no &amp;lt;code&amp;gt;&amp;apos;%&amp;apos;&amp;lt; code&amp;gt; or &amp;lt;code&amp;gt;&amp;apos;.&amp;apos;&amp;lt; code&amp;gt; wildcards).">
				<comm cntt="XXX FIX ME XXX should be LIKE"/>
				<comm cntt="XXX FIX ME XXX should be LIKE"/>
				<param name="catalog"/>
				<param name="schemaPattern"/>
				<param name="tableNamePattern"/>
				<param name="types"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getSchemas()" access="pub" jdoc="Supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getCatalogs()" access="pub" jdoc="Supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getTableTypes()" access="pub" jdoc="Supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getTypeInfo()" access="pub" jdoc="Supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsMultipleResultSets()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; as this feature is currently unsupported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsMultipleTransactions()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;, Axion supports multiple transactions.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsNonNullableColumns()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;, Axion supports NOT NULL constraints.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsDataManipulationTransactionsOnly()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsOpenCursorsAcrossCommit()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;. Closing a transaction will close any open ResultSets.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsOpenCursorsAcrossRollback()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;. Closing a transaction will close any open ResultSets.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsOpenStatementsAcrossCommit()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;. Statements remain valid accross a transaction boundary.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsOpenStatementsAcrossRollback()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;. Statements remain valid accross a transaction boundary.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsDataDefinitionAndDataManipulationTransactions()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;, since Axion currently doesn&amp;apos;t treat Data Definition Language (DDL) statements like CREATE or DROP transactionally.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.dataDefinitionCausesTransactionCommit()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;, since Axion currently doesn&amp;apos;t treat Data Definition Language (DDL) statements like CREATE or DROP transactionally.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.dataDefinitionIgnoredInTransactions()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;, since Axion currently doesn&amp;apos;t treat Data Definition Language (DDL) statements like CREATE or DROP transactionally.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.doesMaxRowSizeIncludeBlobs()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; since LOB sizes are not counted in the {@link #getMaxRowSize maximum row size} (which is unbounded anyway).">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.usesLocalFiles()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;, since the driver does not require local files">
				<comm cntt="XXX ??? XXX"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.usesLocalFilePerTable()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;, since the driver does not require local files">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsExpressionsInOrderBy()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsCorrelatedSubqueries()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; since this feature is currently not supported.">
				<comm cntt="we don&amp;apos;t support any subqueries"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsPositionedDelete()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; since this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsPositionedUpdate()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; since this feature is currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getMaxCursorNameLength()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;0&amp;lt; code&amp;gt; since named cursors are not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getIdentifierQuoteString()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;&amp;quot;&amp;nbsp;&amp;quot;&amp;lt; code&amp;gt; since quoted identifiers are not supported currently.">
				<comm cntt="XXX FIX ME XXX: should support &amp;quot;"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsResultSetType(int)" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; iff &amp;lt;i&amp;gt;type&amp;lt; i&amp;gt; is {@link ResultSet#TYPE_FORWARD_ONLY}.">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getNumericFunctions()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getSystemFunctions()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getSQLKeywords()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getSearchStringEscape()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getStringFunctions()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getTimeDateFunctions()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getExtraNameCharacters()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsCoreSQLGrammar()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsANSI92EntryLevelSQL()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsLikeEscapeClause()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsSchemasInTableDefinitions()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsExtendedSQLGrammar()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsSchemasInPrivilegeDefinitions()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsANSI92IntermediateSQL()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsANSI92FullSQL()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsIntegrityEnhancementFacility()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getSchemaTerm()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getProcedureTerm()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getCatalogTerm()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.isCatalogAtStart()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getCatalogSeparator()" access="pub" jdoc="Currently not supported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getProcedures(String, String, String)" access="pub" jdoc="Currently not supported.">
				<param name="catalog"/>
				<param name="schemaPattern"/>
				<param name="procedureNamePattern"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getProcedureColumns(String, String, String, String)" access="pub" jdoc="Currently not supported.">
				<param name="catalog"/>
				<param name="schemaPattern"/>
				<param name="procedureNamePattern"/>
				<param name="columnNamePattern"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getColumnPrivileges(String, String, String, String)" access="pub" jdoc="Currently not supported.">
				<param name="catalog"/>
				<param name="schema"/>
				<param name="table"/>
				<param name="columnNamePattern"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getTablePrivileges(String, String, String)" access="pub" jdoc="Currently not supported.">
				<param name="catalog"/>
				<param name="schemaPattern"/>
				<param name="tableNamePattern"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getBestRowIdentifier(String, String, String, int, boolean)" access="pub" jdoc="Currently not supported.">
				<param name="catalog"/>
				<param name="schema"/>
				<param name="table"/>
				<param name="scope"/>
				<param name="nullable"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getVersionColumns(String, String, String)" access="pub" jdoc="Currently not supported.">
				<param name="catalog"/>
				<param name="schema"/>
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getPrimaryKeys(String, String, String)" access="pub" jdoc="Currently not supported.">
				<comm cntt="XXX IMPLEMENT ME XXX"/>
				<param name="catalog"/>
				<param name="schema"/>
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getImportedKeys(String, String, String)" access="pub" jdoc="Currently not supported.">
				<param name="catalog"/>
				<param name="schema"/>
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getExportedKeys(String, String, String)" access="pub" jdoc="Currently not supported.">
				<param name="catalog"/>
				<param name="schema"/>
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getCrossReference(String, String, String, String, String, String)" access="pub" jdoc="Currently not supported.">
				<param name="primaryCatalog"/>
				<param name="primarySchema"/>
				<param name="primaryTable"/>
				<param name="foreignCatalog"/>
				<param name="foreignSchema"/>
				<param name="foreignTable"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getIndexInfo(String, String, String, boolean, boolean)" access="pub" jdoc="Currently not supported.">
				<comm cntt="XXX IMPLEMENT ME XXX"/>
				<param name="catalog"/>
				<param name="schema"/>
				<param name="table"/>
				<param name="unique"/>
				<param name="approximate"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsResultSetConcurrency(int, int)" access="pub" jdoc="Currently not supported.">
				<param name="type"/>
				<param name="concurrency"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.ownUpdatesAreVisible(int)" access="pub" jdoc="Currently not supported.">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.ownDeletesAreVisible(int)" access="pub" jdoc="Currently not supported.">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.ownInsertsAreVisible(int)" access="pub" jdoc="Currently not supported.">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.othersUpdatesAreVisible(int)" access="pub" jdoc="Currently not supported.">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.othersDeletesAreVisible(int)" access="pub" jdoc="Currently not supported.">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.othersInsertsAreVisible(int)" access="pub" jdoc="Currently not supported.">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.updatesAreDetected(int)" access="pub" jdoc="Currently not supported.">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.deletesAreDetected(int)" access="pub" jdoc="Currently not supported.">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.insertsAreDetected(int)" access="pub" jdoc="Currently not supported.">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getUDTs(String, String, String, int[])" access="pub" jdoc="Currently not supported.">
				<param name="catalog"/>
				<param name="schemaPattern"/>
				<param name="typeNamePattern"/>
				<param name="types"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getDatabaseMajorVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getDatabaseMinorVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getSuperTables(String, String, String)" access="pub" jdoc="Always empty, super tables are currenlty not supported.">
				<param name="arg0"/>
				<param name="arg1"/>
				<param name="arg2"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getSuperTypes(String, String, String)" access="pub" jdoc="Always empty, super types are currenlty not supported.">
				<param name="arg0"/>
				<param name="arg1"/>
				<param name="arg2"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsGetGeneratedKeys()" access="pub" jdoc="Currently always false.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsMultipleOpenResults()" access="pub" jdoc="Currently always false.">
				<comm cntt="per the javadoc, this refers to CallableStatements, which we don&amp;apos;t support at all"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsNamedParameters()" access="pub" jdoc="Currently always false.">
				<comm cntt="per the javadoc, this refers to CallableStatements, which we don&amp;apos;t support at all"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsSavepoints()" access="pub" jdoc="Currently always false.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsStatementPooling()" access="pub" jdoc="Currently always false.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getAttributes(String, String, String, String)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
				<param name="arg1"/>
				<param name="arg2"/>
				<param name="arg3"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getJDBCMajorVersion()" access="pub" jdoc="Currently unsupported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getJDBCMinorVersion()" access="pub" jdoc="Currently unsupported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getResultSetHoldability()" access="pub" jdoc="Currently unsupported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getSQLStateType()" access="pub" jdoc="Currently unsupported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.locatorsUpdateCopy()" access="pub" jdoc="Currently unsupported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsResultSetHoldability(int)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.unwrap(Class)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="iface"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.isWrapperFor(Class)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="iface"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getRowIdLifetime()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getSchemas(String, String)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="catalog"/>
				<param name="schemaPattern"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.supportsStoredFunctionsUsingCallSyntax()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.autoCommitFailureClosesAllResultSets()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getClientInfoProperties()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getFunctions(String, String, String)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="catalog"/>
				<param name="schemaPattern"/>
				<param name="functionNamePattern"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDatabaseMetaData.getFunctionColumns(String, String, String, String)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="catalog"/>
				<param name="schemaPattern"/>
				<param name="functionNamePattern"/>
				<param name="columnNamePattern"/>
			</mth>
		</class>
		<class name="/:org.axiondb.jdbc.BaseAxionStatement" intfc="n" abs="y" inn="n" sloc="92" jdoc="Abstract base {@link Statement} implementation. @version $Revision: 1.7 $ $Date: 2003 07 10 21:11:56 $ @author Chuck Burdick @author Rodney Waldhoff">
			<comm cntt="implements Statement"/>
			<comm cntt="------------------------------------------------------------------------"/>
			<comm cntt="------------------------------------------------------------------------"/>
			<comm cntt="------------------------------------------------------------------------"/>
			<field name="_maxRows" access="priv" jdoc=""/>
			<field name="_rset" access="priv" jdoc=""/>
			<field name="_updateCount" access="priv" jdoc=""/>
			<field name="_closed" access="priv" jdoc=""/>
			<field name="_conn" access="priv" jdoc=""/>
			<field name="_parser" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.BaseAxionStatement(AxionConnection)" access="prot" jdoc="">
				<param name="conn"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.getConnection()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.close()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.setMaxRows(int)" access="pub" jdoc="">
				<param name="max"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.getMaxRows()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.assertOpen()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.getAxionConnection()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.clearConnection()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.clearCurrentResult()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.setCurrentResult(boolean, AxionCommand)" access="prot" jdoc="">
				<param name="isrset"/>
				<param name="cmd"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.setCurrentResultSet(AxionResultSet)" access="prot" jdoc="@param rset the non-&amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; instance to set current {@link ResultSet} to @see #clearCurrentResult">
				<param name="rset"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.getCurrentResultSet()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.hasCurrentResultSet()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.closeCurrentResultSet()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.getCurrentUpdateCount()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.setCurrentUpdateCount(int)" access="prot" jdoc="">
				<param name="count"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.clearCurrentUpdateCount()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.getDatabase()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.BaseAxionStatement.parseCommand(String)" access="prot" jdoc="">
				<param name="sql"/>
			</mth>
		</class>
		<class name="/:org.axiondb.jdbc.AxionDriver" intfc="n" abs="n" inn="n" sloc="33" jdoc="A {@link Driver} implementation. @version $Revision: 1.9 $ $Date: 2003 07 09 23:56:17 $ @author Chuck Burdick">
			<mth name="/:org.axiondb.jdbc.AxionDriver.acceptsURL(String)" access="pub" jdoc="">
				<param name="url"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDriver.connect(String, Properties)" access="pub" jdoc="">
				<comm cntt="for some silly reason, jdbc insists we return null here"/>
				<param name="url"/>
				<param name="info"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDriver.getMajorVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDriver.getMinorVersion()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDriver.getPropertyInfo(String, Properties)" access="pub" jdoc="">
				<param name="url"/>
				<param name="info"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDriver.jdbcCompliant()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.jdbc.AxionDataSource" intfc="n" abs="n" inn="n" sloc="34" jdoc="A {@link DataSource} implementation. @version $Revision: 1.3 $ $Date: 2003 07 09 23:56:18 $ @author Rodney Waldhoff">
			<field name="_loginTimeout" access="priv" jdoc=""/>
			<field name="_logWriter" access="priv" jdoc=""/>
			<field name="_connectString" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.jdbc.AxionDataSource.AxionDataSource(String)" access="pub" jdoc="">
				<param name="connectString"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDataSource.getConnection()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDataSource.getConnection(String, String)" access="pub" jdoc="">
				<param name="uname"/>
				<param name="passwd"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDataSource.getLoginTimeout()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDataSource.setLoginTimeout(int)" access="pub" jdoc="">
				<param name="seconds"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDataSource.getLogWriter()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionDataSource.setLogWriter(PrintWriter)" access="pub" jdoc="">
				<param name="log"/>
			</mth>
		</class>
		<class name="/:org.axiondb.jdbc.AxionConnection" intfc="n" abs="n" inn="n" sloc="223" jdoc="A {@link Connection} implementation. @TODO Support currently unsupported JDBC 3 methods @version $Revision: 1.21 $ $Date: 2003 07 09 23:56:18 $ @author Chuck Burdick">
			<comm cntt="HELPER METHODS"/>
			<comm cntt="JDBC 3 JDK 1.4 methods"/>
			<field name="_log" access="priv" jdoc=""/>
			<field name="_db" access="priv" jdoc=""/>
			<field name="_url" access="priv" jdoc=""/>
			<field name="_currentTransaction" access="priv" jdoc=""/>
			<field name="_isolationLevel" access="priv" jdoc=""/>
			<field name="_autoCommit" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.jdbc.AxionConnection.AxionConnection(String, File, String)" access="prot" jdoc="">
				<param name="name"/>
				<param name="path"/>
				<param name="url"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.AxionConnection(Database, String)" access="pub" jdoc="">
				<param name="db"/>
				<param name="url"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.AxionConnection(Database)" access="pub" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.clearWarnings()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.close()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.commit()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.rollback()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.createStatement()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.createStatement(int, int)" access="pub" jdoc="">
				<param name="resultSetType"/>
				<param name="resultSetConcurrency"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.getAutoCommit()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.getCatalog()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.getMetaData()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.getTransactionIsolation()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.getTypeMap()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.getWarnings()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.isClosed()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.isReadOnly()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.nativeSQL(String)" access="pub" jdoc="">
				<param name="sql"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.prepareCall(String)" access="pub" jdoc="">
				<param name="sql"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.prepareCall(String, int, int)" access="pub" jdoc="">
				<param name="sql"/>
				<param name="resultSetType"/>
				<param name="resultSetConcurrency"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.prepareStatement(String)" access="pub" jdoc="">
				<param name="sql"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.prepareStatement(String, int, int)" access="pub" jdoc="">
				<param name="sql"/>
				<param name="resultSetType"/>
				<param name="resultSetConcurrency"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.setAutoCommit(boolean)" access="pub" jdoc="">
				<param name="autoCommit"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.setCatalog(String)" access="pub" jdoc="">
				<param name="catalog"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.setReadOnly(boolean)" access="pub" jdoc="">
				<param name="readOnly"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.setTransactionIsolation(int)" access="pub" jdoc="">
				<param name="level"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.setTypeMap(Map)" access="pub" jdoc="">
				<param name="types"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.getURL()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.getDatabase()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.getCurrentTransaction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.forgetCurrentTransaction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.commitIfAuto()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.createStatement(int, int, int)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
				<param name="arg1"/>
				<param name="arg2"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.getHoldability()" access="pub" jdoc="Currently unsupported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.prepareCall(String, int, int, int)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
				<param name="arg1"/>
				<param name="arg2"/>
				<param name="arg3"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.prepareStatement(String, int, int, int)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
				<param name="arg1"/>
				<param name="arg2"/>
				<param name="arg3"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.prepareStatement(String, int)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
				<param name="arg1"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.prepareStatement(String, int[])" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
				<param name="arg1"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.prepareStatement(String, String[])" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
				<param name="arg1"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.releaseSavepoint(Savepoint)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.rollback(Savepoint)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.setHoldability(int)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.setSavepoint()" access="pub" jdoc="Currently unsupported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.setSavepoint(String)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.setUrl(String)" access="priv" jdoc="">
				<param name="url"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.setDatabase(Database)" access="priv" jdoc="">
				<param name="db"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.unwrap(Class)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="iface"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.isWrapperFor(Class)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="iface"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.createClob()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.createBlob()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.createNClob()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.createSQLXML()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.isValid(int)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="timeout"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.setClientInfo(String, String)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="name"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.setClientInfo(Properties)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="properties"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.getClientInfo(String)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="name"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.getClientInfo()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.createArrayOf(String, Object[])" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="typeName"/>
				<param name="elements"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionConnection.createStruct(String, Object[])" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="typeName"/>
				<param name="attributes"/>
			</mth>
		</class>
		<class name="/:org.axiondb.jdbc.AxionResultSetMetaData" intfc="n" abs="n" inn="n" sloc="111" jdoc="A {@link ResultSetMetaData} implementation. @version $Revision: 1.4 $ $Date: 2003 05 14 19:07:31 $ @author Chuck Burdick @author Rodney Waldhoff">
			<field name="_sels" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.AxionResultSetMetaData(Selectable[])" access="pub" jdoc="">
				<param name="selected"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.getCatalogName(int)" access="pub" jdoc="">
				<comm cntt="per JDBC API Tutorial and Reference (pg 668)"/>
				<comm cntt="return &amp;quot;&amp;quot; if not applicable"/>
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.getColumnCount()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.getColumnClassName(int)" access="pub" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.getColumnDisplaySize(int)" access="pub" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.getColumnLabel(int)" access="pub" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.getColumnName(int)" access="pub" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.getColumnType(int)" access="pub" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.getColumnTypeName(int)" access="pub" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.getPrecision(int)" access="pub" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.getScale(int)" access="pub" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.getSchemaName(int)" access="pub" jdoc="">
				<comm cntt="per JDBC API Tutorial and Reference (pg 673)"/>
				<comm cntt="return &amp;quot;&amp;quot; if not applicable"/>
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.getTableName(int)" access="pub" jdoc="">
				<comm cntt="per JDBC API Tutorial and Reference (pg 673)"/>
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.isAutoIncrement(int)" access="pub" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.isCaseSensitive(int)" access="pub" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.isCurrency(int)" access="pub" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.isNullable(int)" access="pub" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.isSearchable(int)" access="pub" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.isSigned(int)" access="pub" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.isReadOnly(int)" access="pub" jdoc="">
				<comm cntt="???"/>
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.isWritable(int)" access="pub" jdoc="">
				<comm cntt="???"/>
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.isDefinitelyWritable(int)" access="pub" jdoc="">
				<comm cntt="???"/>
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.getDataType(int)" access="priv" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.getSelectable(int)" access="priv" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.checkColumnIndex(int)" access="priv" jdoc="">
				<param name="column"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.unwrap(Class)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="iface"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSetMetaData.isWrapperFor(Class)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="iface"/>
			</mth>
		</class>
		<class name="/:org.axiondb.jdbc.AxionClob" intfc="y" abs="n" inn="n" sloc="13" jdoc="The JDBC {@link Clob} interface, including the JDBC 2 writing methods. @version $Revision: 1.4 $ $Date: 2002 12 16 23:34:55 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.jdbc.AxionClob.getAsciiStream()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionClob.getCharacterStream()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionClob.getSubString(long, int)" access="pub" jdoc="">
				<param name="pos"/>
				<param name="len"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionClob.length()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionClob.position(Clob, long)" access="pub" jdoc="">
				<param name="searchstr"/>
				<param name="start"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionClob.position(String, long)" access="pub" jdoc="">
				<param name="searchstr"/>
				<param name="start"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionClob.setAsciiStream(long)" access="pub" jdoc="">
				<param name="pos"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionClob.setCharacterStream(long)" access="pub" jdoc="">
				<param name="pos"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionClob.setString(long, String)" access="pub" jdoc="">
				<param name="pos"/>
				<param name="str"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionClob.setString(long, String, int, int)" access="pub" jdoc="">
				<param name="pos"/>
				<param name="str"/>
				<param name="offset"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionClob.truncate(long)" access="pub" jdoc="">
				<param name="length"/>
			</mth>
		</class>
		<class name="/:org.axiondb.jdbc.AxionPreparedStatement" intfc="n" abs="n" inn="n" sloc="266" jdoc="A {@link PreparedStatement} implementation. @TODO Support currently unsupported JDBC 3 methods. @version $Revision: 1.25 $ $Date: 2003 07 10 22:31:19 $ @author Chuck Burdick @author Rod Waldhoff">
			<comm cntt="============= PREPARED STATEMENT METHODS ============="/>
			<comm cntt="JDBC 3 JDK 1.4 methods"/>
			<field name="_cmd" access="priv" jdoc=""/>
			<field name="_sql" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.AxionPreparedStatement(AxionConnection, String)" access="prot" jdoc="">
				<param name="conn"/>
				<param name="sql"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setParameter(int, Object)" access="priv" jdoc="">
				<param name="i"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.close()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.execute(String)" access="pub" jdoc="">
				<param name="sql"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.executeQuery(String)" access="pub" jdoc="">
				<param name="sql"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.executeUpdate(String)" access="pub" jdoc="">
				<param name="sql"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.addBatch(String)" access="pub" jdoc="">
				<param name="sql"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.addBatch()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setEscapeProcessing(boolean)" access="pub" jdoc="">
				<comm cntt="&amp;quot;Since prepared statements have usually been parsed prior to making this call,"/>
				<comm cntt="disabliing escape processing for prepared statements will have no effect&amp;quot;"/>
				<param name="enable"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.clearParameters()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.execute()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.executeQuery()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.executeUpdate()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.getMetaData()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setArray(int, Array)" access="pub" jdoc="">
				<param name="i"/>
				<param name="arr"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setAsciiStream(int, InputStream, int)" access="pub" jdoc="">
				<param name="n"/>
				<param name="in"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setBigDecimal(int, BigDecimal)" access="pub" jdoc="">
				<param name="i"/>
				<param name="big"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setBinaryStream(int, InputStream, int)" access="pub" jdoc="">
				<param name="n"/>
				<param name="in"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setBlob(int, Blob)" access="pub" jdoc="">
				<param name="i"/>
				<param name="blob"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setBoolean(int, boolean)" access="pub" jdoc="">
				<param name="i"/>
				<param name="bool"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setByte(int, byte)" access="pub" jdoc="">
				<param name="i"/>
				<param name="b"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setBytes(int, byte[])" access="pub" jdoc="">
				<param name="i"/>
				<param name="bytes"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setCharacterStream(int, Reader, int)" access="pub" jdoc="">
				<param name="n"/>
				<param name="reader"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setClob(int, Clob)" access="pub" jdoc="">
				<param name="i"/>
				<param name="clob"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setDate(int, Date)" access="pub" jdoc="">
				<param name="i"/>
				<param name="date"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setDate(int, Date, Calendar)" access="pub" jdoc="">
				<param name="i"/>
				<param name="date"/>
				<param name="cal"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setDouble(int, double)" access="pub" jdoc="">
				<param name="i"/>
				<param name="d"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setFloat(int, float)" access="pub" jdoc="">
				<param name="i"/>
				<param name="f"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setInt(int, int)" access="pub" jdoc="">
				<param name="i"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setLong(int, long)" access="pub" jdoc="">
				<param name="i"/>
				<param name="l"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setNull(int, int)" access="pub" jdoc="">
				<param name="i"/>
				<param name="sqlType"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setNull(int, int, String)" access="pub" jdoc="">
				<param name="i"/>
				<param name="sqlType"/>
				<param name="typeName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setObject(int, Object)" access="pub" jdoc="">
				<param name="i"/>
				<param name="o"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setObject(int, Object, int)" access="pub" jdoc="">
				<param name="i"/>
				<param name="o"/>
				<param name="targetSqlType"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setObject(int, Object, int, int)" access="pub" jdoc="">
				<param name="i"/>
				<param name="o"/>
				<param name="targetSqlType"/>
				<param name="scale"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setRef(int, Ref)" access="pub" jdoc="">
				<param name="i"/>
				<param name="ref"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setShort(int, short)" access="pub" jdoc="">
				<param name="i"/>
				<param name="s"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setString(int, String)" access="pub" jdoc="">
				<param name="i"/>
				<param name="str"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setTime(int, Time)" access="pub" jdoc="">
				<param name="i"/>
				<param name="time"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setTime(int, Time, Calendar)" access="pub" jdoc="">
				<param name="i"/>
				<param name="time"/>
				<param name="cal"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setTimestamp(int, Timestamp)" access="pub" jdoc="">
				<param name="i"/>
				<param name="timestamp"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setTimestamp(int, Timestamp, Calendar)" access="pub" jdoc="">
				<param name="i"/>
				<param name="timestamp"/>
				<param name="cal"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setUnicodeStream(int, InputStream, int)" access="pub" jdoc="@deprecated See {@link java.sql.PreparedStatement#setUnicodeStream}">
				<param name="n"/>
				<param name="in"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.getParameterMetaData()" access="pub" jdoc="Currently unsupported.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setURL(int, URL)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
				<param name="arg1"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.unwrap(Class)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="iface"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.isWrapperFor(Class)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="iface"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setRowId(int, RowId)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="parameterIndex"/>
				<param name="x"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setNString(int, String)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="parameterIndex"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setNCharacterStream(int, Reader, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="parameterIndex"/>
				<param name="value"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setNClob(int, NClob)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="parameterIndex"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setClob(int, Reader, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="parameterIndex"/>
				<param name="reader"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setBlob(int, InputStream, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="parameterIndex"/>
				<param name="inputStream"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setNClob(int, Reader, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="parameterIndex"/>
				<param name="reader"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setSQLXML(int, SQLXML)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="parameterIndex"/>
				<param name="xmlObject"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setAsciiStream(int, InputStream, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="parameterIndex"/>
				<param name="x"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setBinaryStream(int, InputStream, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="parameterIndex"/>
				<param name="x"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setCharacterStream(int, Reader, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="parameterIndex"/>
				<param name="reader"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setAsciiStream(int, InputStream)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="parameterIndex"/>
				<param name="x"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setBinaryStream(int, InputStream)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="parameterIndex"/>
				<param name="x"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setCharacterStream(int, Reader)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="parameterIndex"/>
				<param name="reader"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setNCharacterStream(int, Reader)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="parameterIndex"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setClob(int, Reader)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="parameterIndex"/>
				<param name="reader"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setBlob(int, InputStream)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="parameterIndex"/>
				<param name="inputStream"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setNClob(int, Reader)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="parameterIndex"/>
				<param name="reader"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.isClosed()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.setPoolable(boolean)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="poolable"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionPreparedStatement.isPoolable()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
		</class>
		<class name="/:org.axiondb.jdbc.AxionResultSet" intfc="n" abs="n" inn="n" sloc="785" jdoc="A {@link java.sql.ResultSet} implementation. @TODO Support currently unsupported JDBC 3 methods. @version $Revision: 1.24 $ $Date: 2003 07 09 23:56:17 $ @author Chuck Burdick @author Rodney Waldhoff">
			<comm cntt="------------------------------------------------------- ResultSet Methods"/>
			<comm cntt="------------------------------------------------------------ Private Util"/>
			<comm cntt="-------------------------------------------------------------- Attributes"/>
			<comm cntt="JDBC 3 JDK 1.4 methods"/>
			<field name="_rows" access="prot" jdoc=""/>
			<field name="_currentRow" access="priv" jdoc=""/>
			<field name="_selected" access="priv" jdoc=""/>
			<field name="_closed" access="priv" jdoc=""/>
			<field name="_maxRows" access="priv" jdoc=""/>
			<field name="_currentRowIndex" access="priv" jdoc=""/>
			<field name="_meta" access="priv" jdoc=""/>
			<field name="_wasNull" access="priv" jdoc="Whether the last value returned was NULL."/>
			<const name="NULL_INT" access="priv" jdoc="What {@link #getInt} returns when the corresponding value is NULL."/>
			<const name="NULL_FLOAT" access="priv" jdoc="What {@link #getFloat} returns when the corresponding value is NULL."/>
			<const name="NULL_SHORT" access="priv" jdoc="What {@link #getShort} returns when the corresponding value is NULL."/>
			<const name="NULL_LONG" access="priv" jdoc="What {@link #getLong} returns when the corresponding value is NULL."/>
			<const name="NULL_BYTE" access="priv" jdoc="What {@link #getByte} returns when the corresponding value is NULL."/>
			<const name="NULL_BOOLEAN" access="priv" jdoc="What {@link #getBoolean} returns when the corresponding value is NULL."/>
			<const name="NULL_DOUBLE" access="priv" jdoc="What {@link #getDouble} returns when the corresponding value is NULL."/>
			<const name="NULL_DATE" access="priv" jdoc="What {@link #getDate} returns when the corresponding value is NULL."/>
			<const name="NULL_TIME" access="priv" jdoc="What {@link #getTime} returns when the corresponding value is NULL."/>
			<const name="NULL_TIMESTAMP" access="priv" jdoc="What {@link #getTimestamp} returns when the corresponding value is NULL."/>
			<const name="NULL_STRING" access="priv" jdoc="What {@link #getString} returns when the corresponding value is NULL."/>
			<const name="NULL_CLOB" access="priv" jdoc="What {@link #getClob} returns when the corresponding value is NULL."/>
			<const name="NULL_BLOB" access="priv" jdoc="What {@link #getBlob} returns when the corresponding value is NULL."/>
			<const name="NULL_STREAM" access="priv" jdoc="What {@link #getBinaryStream} returns when the corresponding value is NULL."/>
			<const name="NULL_READER" access="priv" jdoc="What {@link #getCharacterStream} returns when the corresponding value is NULL."/>
			<const name="NULL_BIGDECIMAL" access="priv" jdoc="What {@link #getBigDecimal} returns when the corresponding value is NULL."/>
			<field name="_log" access="priv" jdoc=""/>
			<field name="_transaction" access="priv" jdoc=""/>
			<field name="_transactionManager" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.AxionResultSet(RowDecoratorIterator, Selectable[])" access="pub" jdoc="">
				<param name="rows"/>
				<param name="selected"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.setTransaction(TransactionManager, Transaction)" access="pub" jdoc="">
				<param name="manager"/>
				<param name="transaction"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.createEmptyResultSet()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.absolute(int)" access="pub" jdoc="">
				<param name="row"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.afterLast()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.beforeFirst()" access="pub" jdoc="">
				<comm cntt="TODO: this should probably be an attribute of the RowDecoratorIterator"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.cancelRowUpdates()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.clearWarnings()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.close()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.deleteRow()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.findColumn(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.first()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getArray(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getArray(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getAsciiStream(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getAsciiStream(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getBigDecimal(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getBigDecimal(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getBigDecimal(int, int)" access="pub" jdoc="@deprecated See {@link java.sql.ResultSet#getBigDecimal(int,int)}">
				<param name="i"/>
				<param name="scale"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getBigDecimal(String, int)" access="pub" jdoc="@deprecated See {@link java.sql.ResultSet#getBigDecimal(java.lang.String,int)}">
				<param name="colName"/>
				<param name="scale"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getBinaryStream(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getBinaryStream(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getBlob(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getBlob(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getBoolean(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getBoolean(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getByte(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getByte(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getBytes(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getBytes(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getCharacterStream(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getCharacterStream(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getClob(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getClob(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getConcurrency()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getCursorName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getDate(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getDate(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getDate(int, Calendar)" access="pub" jdoc="">
				<param name="i"/>
				<param name="cal"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getDate(String, Calendar)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="cal"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getDouble(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getDouble(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getFetchDirection()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getFetchSize()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getFloat(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getFloat(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getInt(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getInt(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getLong(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getLong(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getMetaData()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getObject(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getObject(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getObject(int, Map)" access="pub" jdoc="">
				<param name="i"/>
				<param name="map"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getObject(String, Map)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="map"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getRef(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getRef(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getRow()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getShort(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getShort(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getStatement()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getString(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getString(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getTime(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getTime(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getTime(int, Calendar)" access="pub" jdoc="">
				<param name="i"/>
				<param name="cal"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getTime(String, Calendar)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="cal"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getTimestamp(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getTimestamp(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getTimestamp(int, Calendar)" access="pub" jdoc="">
				<param name="i"/>
				<param name="cal"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getTimestamp(String, Calendar)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="cal"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getUnicodeStream(int)" access="pub" jdoc="@deprecated See {@link java.sql.ResultSet#getUnicodeStream}">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getUnicodeStream(String)" access="pub" jdoc="@deprecated See {@link java.sql.ResultSet#getUnicodeStream}">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getWarnings()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.insertRow()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.isAfterLast()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.isBeforeFirst()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.isFirst()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.isLast()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.last()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.moveToCurrentRow()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.moveToInsertRow()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.next()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.previous()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.refreshRow()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.relative(int)" access="pub" jdoc="">
				<param name="rows"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.rowDeleted()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.rowInserted()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.rowUpdated()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.setFetchDirection(int)" access="pub" jdoc="">
				<comm cntt="fetchDirection is just a hint"/>
				<param name="direction"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.setFetchSize(int)" access="pub" jdoc="">
				<comm cntt="fetch size is just a hint"/>
				<param name="size"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateAsciiStream(int, InputStream, int)" access="pub" jdoc="">
				<param name="i"/>
				<param name="in"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateAsciiStream(String, InputStream, int)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="in"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateBigDecimal(int, BigDecimal)" access="pub" jdoc="">
				<param name="i"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateBigDecimal(String, BigDecimal)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateBinaryStream(int, InputStream, int)" access="pub" jdoc="">
				<param name="i"/>
				<param name="value"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateBinaryStream(String, InputStream, int)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="value"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateBoolean(int, boolean)" access="pub" jdoc="">
				<param name="i"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateBoolean(String, boolean)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateByte(int, byte)" access="pub" jdoc="">
				<param name="i"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateByte(String, byte)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateBytes(int, byte[])" access="pub" jdoc="">
				<param name="i"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateBytes(String, byte[])" access="pub" jdoc="">
				<param name="colName"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateCharacterStream(int, Reader, int)" access="pub" jdoc="">
				<param name="i"/>
				<param name="value"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateCharacterStream(String, Reader, int)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="value"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateDate(int, Date)" access="pub" jdoc="">
				<param name="i"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateDate(String, Date)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateDouble(int, double)" access="pub" jdoc="">
				<param name="i"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateDouble(String, double)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateFloat(int, float)" access="pub" jdoc="">
				<param name="i"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateFloat(String, float)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateInt(int, int)" access="pub" jdoc="">
				<param name="i"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateInt(String, int)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateLong(int, long)" access="pub" jdoc="">
				<param name="i"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateLong(String, long)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateNull(int)" access="pub" jdoc="">
				<param name="i"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateNull(String)" access="pub" jdoc="">
				<param name="colName"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateObject(int, Object)" access="pub" jdoc="">
				<param name="i"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateObject(String, Object)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateObject(int, Object, int)" access="pub" jdoc="">
				<param name="i"/>
				<param name="value"/>
				<param name="scale"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateObject(String, Object, int)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="value"/>
				<param name="scale"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateRow()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateShort(int, short)" access="pub" jdoc="">
				<param name="i"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateShort(String, short)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateString(int, String)" access="pub" jdoc="">
				<param name="i"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateString(String, String)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateTime(int, Time)" access="pub" jdoc="">
				<param name="i"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateTime(String, Time)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateTimestamp(int, Timestamp)" access="pub" jdoc="">
				<param name="i"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateTimestamp(String, Timestamp)" access="pub" jdoc="">
				<param name="colName"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.wasNull()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.setMaxRows(int)" access="pub" jdoc="">
				<param name="max"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getResultSetIndexForColumnName(String)" access="priv" jdoc="Get the 1-based ResultSet index for the specified column name.">
				<param name="columnname"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.assertCurrentRow()" access="priv" jdoc="Throw a {@link SQLException} if there is no {@link #_currentRow}.">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.assertOpen()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getValue(int)" access="priv" jdoc="Obtain the value from the current row for the given 1-based (ResultSet) index, and convert it according to the corresponding {@link DataType}">
				<param name="num"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getDataType(int)" access="priv" jdoc="Obtain the DataType for the given 1-based (ResultSet) index">
				<param name="num"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getURL(int)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getURL(String)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateArray(int, Array)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
				<param name="arg1"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateArray(String, Array)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
				<param name="arg1"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateBlob(int, Blob)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
				<param name="arg1"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateBlob(String, Blob)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
				<param name="arg1"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateClob(int, Clob)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
				<param name="arg1"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateClob(String, Clob)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
				<param name="arg1"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateRef(int, Ref)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
				<param name="arg1"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateRef(String, Ref)" access="pub" jdoc="Currently unsupported.">
				<param name="arg0"/>
				<param name="arg1"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.unwrap(Class)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="iface"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.isWrapperFor(Class)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="iface"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getRowId(int)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getRowId(String)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateRowId(int, RowId)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
				<param name="x"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateRowId(String, RowId)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
				<param name="x"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getHoldability()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.isClosed()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateNString(int, String)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
				<param name="nString"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateNString(String, String)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
				<param name="nString"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateNClob(int, NClob)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
				<param name="nClob"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateNClob(String, NClob)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
				<param name="nClob"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getNClob(int)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getNClob(String)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getSQLXML(int)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getSQLXML(String)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateSQLXML(int, SQLXML)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
				<param name="xmlObject"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateSQLXML(String, SQLXML)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
				<param name="xmlObject"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getNString(int)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getNString(String)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getNCharacterStream(int)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.getNCharacterStream(String)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateNCharacterStream(int, Reader, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
				<param name="x"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateNCharacterStream(String, Reader, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
				<param name="reader"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateAsciiStream(int, InputStream, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
				<param name="x"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateBinaryStream(int, InputStream, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
				<param name="x"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateCharacterStream(int, Reader, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
				<param name="x"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateAsciiStream(String, InputStream, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
				<param name="x"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateBinaryStream(String, InputStream, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
				<param name="x"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateCharacterStream(String, Reader, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
				<param name="reader"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateBlob(int, InputStream, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
				<param name="inputStream"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateBlob(String, InputStream, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
				<param name="inputStream"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateClob(int, Reader, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
				<param name="reader"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateClob(String, Reader, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
				<param name="reader"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateNClob(int, Reader, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
				<param name="reader"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateNClob(String, Reader, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
				<param name="reader"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateNCharacterStream(int, Reader)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
				<param name="x"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateNCharacterStream(String, Reader)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
				<param name="reader"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateAsciiStream(int, InputStream)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
				<param name="x"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateBinaryStream(int, InputStream)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
				<param name="x"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateCharacterStream(int, Reader)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
				<param name="x"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateAsciiStream(String, InputStream)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
				<param name="x"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateBinaryStream(String, InputStream)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
				<param name="x"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateCharacterStream(String, Reader)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
				<param name="reader"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateBlob(int, InputStream)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
				<param name="inputStream"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateBlob(String, InputStream)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
				<param name="inputStream"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateClob(int, Reader)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
				<param name="reader"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateClob(String, Reader)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
				<param name="reader"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateNClob(int, Reader)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnIndex"/>
				<param name="reader"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionResultSet.updateNClob(String, Reader)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="columnLabel"/>
				<param name="reader"/>
			</mth>
		</class>
		<class name="/:org.axiondb.jdbc.AbstractAxionClob" intfc="n" abs="y" inn="n" sloc="40" jdoc="Abstract base implementation of {@link AxionClob}. @version $Revision: 1.7 $ $Date: 2003 07 10 16:34:34 $ @author Rodney Waldhoff @author Morgan Delegrange">
			<comm cntt="TODO: since there is byte to character conversion,"/>
			<comm cntt="the pos argument will not work correctly for non-zero"/>
			<comm cntt="values - fix me"/>
			<mth name="/:org.axiondb.jdbc.AbstractAxionClob.getAsciiStream()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionClob.getCharacterStream()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionClob.getSubString(long, int)" access="pub" jdoc="">
				<param name="pos"/>
				<param name="len"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionClob.length()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionClob.position(Clob, long)" access="pub" jdoc="">
				<param name="searchstr"/>
				<param name="start"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionClob.position(String, long)" access="pub" jdoc="">
				<param name="searchstr"/>
				<param name="start"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionClob.setAsciiStream(long)" access="pub" jdoc="">
				<param name="pos"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionClob.setUtf8Stream(long)" access="pub" jdoc="@see #setCharacterStream">
				<param name="pos"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionClob.setCharacterStream(long)" access="pub" jdoc="">
				<param name="pos"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionClob.setString(long, String)" access="pub" jdoc="Invokes {@link #setString(long,String,int,int) setString(pos,str,0,str.length())}">
				<param name="pos"/>
				<param name="str"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionClob.setString(long, String, int, int)" access="pub" jdoc="">
				<param name="pos"/>
				<param name="str"/>
				<param name="offset"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AbstractAxionClob.truncate(long)" access="pub" jdoc="">
				<param name="length"/>
			</mth>
		</class>
		<class name="/:org.axiondb.jdbc.AxionBlob" intfc="y" abs="n" inn="n" sloc="11" jdoc="The JDBC {@link Blob} interface, including the JDBC 2 writing methods. @version $Revision: 1.4 $ $Date: 2002 12 16 23:34:55 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.jdbc.AxionBlob.getBinaryStream()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionBlob.getBytes(long, int)" access="pub" jdoc="">
				<param name="pos"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionBlob.length()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionBlob.position(Blob, long)" access="pub" jdoc="">
				<param name="pattern"/>
				<param name="start"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionBlob.position(byte[], long)" access="pub" jdoc="">
				<param name="pattern"/>
				<param name="start"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionBlob.setBinaryStream(long)" access="pub" jdoc="">
				<param name="pos"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionBlob.setBytes(long, byte[])" access="pub" jdoc="">
				<param name="pos"/>
				<param name="bytes"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionBlob.setBytes(long, byte[], int, int)" access="pub" jdoc="">
				<param name="pos"/>
				<param name="bytes"/>
				<param name="offset"/>
				<param name="len"/>
			</mth>
			<mth name="/:org.axiondb.jdbc.AxionBlob.truncate(long)" access="pub" jdoc="">
				<param name="len"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/:org.axiondb.parser">
		<class name="/:org.axiondb.parser.Token" intfc="n" abs="n" inn="n" sloc="18" jdoc="Describes the input token stream.">
			<field name="kind" access="pub" jdoc="An integer that describes the kind of this token. This numbering system is determined by JavaCCParser, and a table of these numbers is stored in the file ...Constants.java."/>
			<field name="beginLine" access="pub" jdoc="beginLine and beginColumn describe the position of the first character of this token; endLine and endColumn describe the position of the last character of this token."/>
			<field name="beginColumn" access="pub" jdoc="beginLine and beginColumn describe the position of the first character of this token; endLine and endColumn describe the position of the last character of this token."/>
			<field name="endLine" access="pub" jdoc="beginLine and beginColumn describe the position of the first character of this token; endLine and endColumn describe the position of the last character of this token."/>
			<field name="endColumn" access="pub" jdoc="beginLine and beginColumn describe the position of the first character of this token; endLine and endColumn describe the position of the last character of this token."/>
			<field name="image" access="pub" jdoc="The string image of the token."/>
			<field name="next" access="pub" jdoc="A reference to the next regular (non-special) token from the input stream. If this is the last token from the input stream, or if the token manager has not read tokens beyond this one, this field is set to null. This is true only if this token is also a regular token. Otherwise, see below for a description of the contents of this field."/>
			<field name="specialToken" access="pub" jdoc="This field is used to access special tokens that occur prior to this token, but after the immediately preceding regular (non-special) token. If there are no such special tokens, this field is set to null. When there are more than one such special token, this field refers to the last of these special tokens, which in turn refers to the next previous special token through its specialToken field, and so on until the first special token (whose specialToken field is null). The next fields of special tokens refer to other special tokens that immediately follow it (without an intervening regular token). If there is no such token, this field is null."/>
			<mth name="/:org.axiondb.parser.Token.toString()" access="pub" jdoc="Returns the image.">
			</mth>
			<mth name="/:org.axiondb.parser.Token.newToken(int)" access="pub" jdoc="Returns a new Token object, by default. However, if you want, you can create and return subclass objects based on the value of ofKind. Simply add the cases to the switch for all those special cases. For example, if you have a subclass of Token called IDToken that you want to create if ofKind is ID, simlpy add something like : case MyParserConstants.ID : return new IDToken(); to the following switch statement. Then you can cast matchedToken variable to the appropriate type and use it in your lexical actions.">
				<param name="ofKind"/>
			</mth>
		</class>
		<class name="/:org.axiondb.parser.TokenMgrError" intfc="n" abs="n" inn="n" sloc="71" jdoc="">
			<comm cntt="Ordinals for various reasons why an Error of this type can be thrown."/>
			<comm cntt="Constructors of various flavors follow."/>
			<const name="LEXICAL_ERROR" access="pub" jdoc="Lexical error occured."/>
			<const name="STATIC_LEXER_ERROR" access="pub" jdoc="An attempt wass made to create a second instance of a static token manager."/>
			<const name="INVALID_LEXICAL_STATE" access="pub" jdoc="Tried to change to an invalid lexical state."/>
			<const name="LOOP_DETECTED" access="pub" jdoc="Detected (and bailed out of) an infinite loop in the token manager."/>
			<field name="errorCode" access="pub" jdoc="Indicates the reason why the exception is thrown. It will have one of the above 4 values."/>
			<mth name="/:org.axiondb.parser.TokenMgrError.addEscapes(String)" access="prot" jdoc="Replaces unprintable characters by their espaced (or unicode escaped) equivalents in the given string">
				<param name="str"/>
			</mth>
			<mth name="/:org.axiondb.parser.TokenMgrError.LexicalError(boolean, int, int, int, String, char)" access="priv" jdoc="Returns a detailed message for the Error when it is thrown by the token manager to indicate a lexical error. Parameters : EOFSeen : indicates if EOF caused the lexicl error curLexState : lexical state in which this error occured errorLine : line number when the error occured errorColumn : column number when the error occured errorAfter : prefix that was seen before this error occured curchar : the offending character Note: You can customize the lexical error message by modifying this method.">
				<param name="EOFSeen"/>
				<param name="lexState"/>
				<param name="errorLine"/>
				<param name="errorColumn"/>
				<param name="errorAfter"/>
				<param name="curChar"/>
			</mth>
			<mth name="/:org.axiondb.parser.TokenMgrError.getMessage()" access="pub" jdoc="You can also modify the body of this method to customize your error messages. For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not of end-users concern, so you can return something like : &amp;quot;Internal Error : Please file a bug report .... &amp;quot; from this method for such cases in the release version of your parser.">
			</mth>
			<mth name="/:org.axiondb.parser.TokenMgrError.TokenMgrError()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.TokenMgrError.TokenMgrError(String, int)" access="pub" jdoc="">
				<param name="message"/>
				<param name="reason"/>
			</mth>
			<mth name="/:org.axiondb.parser.TokenMgrError.TokenMgrError(boolean, int, int, int, String, char, int)" access="pub" jdoc="">
				<param name="EOFSeen"/>
				<param name="lexState"/>
				<param name="errorLine"/>
				<param name="errorColumn"/>
				<param name="errorAfter"/>
				<param name="curChar"/>
				<param name="reason"/>
			</mth>
		</class>
		<class name="/:org.axiondb.parser.AxionSqlParserConstants" intfc="y" abs="n" inn="n" sloc="195" jdoc="">
			<field name="EOF" access="pub" jdoc=""/>
			<field name="LINE_COMMENT" access="pub" jdoc=""/>
			<field name="BLOCK_COMMENT" access="pub" jdoc=""/>
			<field name="ADD" access="pub" jdoc=""/>
			<field name="ALL" access="pub" jdoc=""/>
			<field name="ALTER" access="pub" jdoc=""/>
			<field name="AND" access="pub" jdoc=""/>
			<field name="ASC" access="pub" jdoc=""/>
			<field name="BEGIN" access="pub" jdoc=""/>
			<field name="BETWEEN" access="pub" jdoc=""/>
			<field name="BY" access="pub" jdoc=""/>
			<field name="CASE" access="pub" jdoc=""/>
			<field name="CHECK" access="pub" jdoc=""/>
			<field name="CREATE" access="pub" jdoc=""/>
			<field name="CONSTRAINT" access="pub" jdoc=""/>
			<field name="DEFERRED" access="pub" jdoc=""/>
			<field name="DEFERRABLE" access="pub" jdoc=""/>
			<field name="DELETE" access="pub" jdoc=""/>
			<field name="DESC" access="pub" jdoc=""/>
			<field name="DISTINCT" access="pub" jdoc=""/>
			<field name="DROP" access="pub" jdoc=""/>
			<field name="ELSE" access="pub" jdoc=""/>
			<field name="END" access="pub" jdoc=""/>
			<field name="EXISTS" access="pub" jdoc=""/>
			<field name="FALSE" access="pub" jdoc=""/>
			<field name="FROM" access="pub" jdoc=""/>
			<field name="GROUP" access="pub" jdoc=""/>
			<field name="HAVING" access="pub" jdoc=""/>
			<field name="IF" access="pub" jdoc=""/>
			<field name="IMMEDIATE" access="pub" jdoc=""/>
			<field name="IN" access="pub" jdoc=""/>
			<field name="INITIALLY" access="pub" jdoc=""/>
			<field name="INDEX" access="pub" jdoc=""/>
			<field name="INNER" access="pub" jdoc=""/>
			<field name="INSERT" access="pub" jdoc=""/>
			<field name="INTO" access="pub" jdoc=""/>
			<field name="IS" access="pub" jdoc=""/>
			<field name="JOIN" access="pub" jdoc=""/>
			<field name="KEY" access="pub" jdoc=""/>
			<field name="LEFT" access="pub" jdoc=""/>
			<field name="LIKE" access="pub" jdoc=""/>
			<field name="LIMIT" access="pub" jdoc=""/>
			<field name="NOT" access="pub" jdoc=""/>
			<field name="NULL" access="pub" jdoc=""/>
			<field name="OFFSET" access="pub" jdoc=""/>
			<field name="ON" access="pub" jdoc=""/>
			<field name="OR" access="pub" jdoc=""/>
			<field name="ORDER" access="pub" jdoc=""/>
			<field name="OUTER" access="pub" jdoc=""/>
			<field name="PRIMARY" access="pub" jdoc=""/>
			<field name="RIGHT" access="pub" jdoc=""/>
			<field name="SELECT" access="pub" jdoc=""/>
			<field name="SEQUENCE" access="pub" jdoc=""/>
			<field name="SET" access="pub" jdoc=""/>
			<field name="STARTS" access="pub" jdoc=""/>
			<field name="SYSDATE" access="pub" jdoc=""/>
			<field name="TABLE" access="pub" jdoc=""/>
			<field name="THEN" access="pub" jdoc=""/>
			<field name="TRUE" access="pub" jdoc=""/>
			<field name="UNIQUE" access="pub" jdoc=""/>
			<field name="UPDATE" access="pub" jdoc=""/>
			<field name="USER" access="pub" jdoc=""/>
			<field name="VALUES" access="pub" jdoc=""/>
			<field name="WHEN" access="pub" jdoc=""/>
			<field name="WHERE" access="pub" jdoc=""/>
			<field name="WITH" access="pub" jdoc=""/>
			<field name="INTEGER_LITERAL" access="pub" jdoc=""/>
			<field name="FLOATING_POINT_LITERAL" access="pub" jdoc=""/>
			<field name="EXPONENT" access="pub" jdoc=""/>
			<field name="STRING_LITERAL" access="pub" jdoc=""/>
			<field name="ID" access="pub" jdoc=""/>
			<field name="LETTER" access="pub" jdoc=""/>
			<field name="DIGIT" access="pub" jdoc=""/>
			<field name="ASSIGN" access="pub" jdoc=""/>
			<field name="COMMA" access="pub" jdoc=""/>
			<field name="CONCAT" access="pub" jdoc=""/>
			<field name="SEMICOLON" access="pub" jdoc=""/>
			<field name="DOT" access="pub" jdoc=""/>
			<field name="LESS" access="pub" jdoc=""/>
			<field name="LESSEQUAL" access="pub" jdoc=""/>
			<field name="GREATER" access="pub" jdoc=""/>
			<field name="GREATEREQUAL" access="pub" jdoc=""/>
			<field name="EQUAL" access="pub" jdoc=""/>
			<field name="NOTEQUAL" access="pub" jdoc=""/>
			<field name="NOTEQUAL2" access="pub" jdoc=""/>
			<field name="JOINPLUS" access="pub" jdoc=""/>
			<field name="OPENPAREN" access="pub" jdoc=""/>
			<field name="CLOSEPAREN" access="pub" jdoc=""/>
			<field name="ASTERISK" access="pub" jdoc=""/>
			<field name="SLASH" access="pub" jdoc=""/>
			<field name="PLUS" access="pub" jdoc=""/>
			<field name="MINUS" access="pub" jdoc=""/>
			<field name="QUESTIONMARK" access="pub" jdoc=""/>
			<field name="DEFAULT" access="pub" jdoc=""/>
			<field name="tokenImage" access="pub" jdoc=""/>
		</class>
		<class name="/:org.axiondb.parser.AxionSqlParserTokenManager" intfc="n" abs="n" inn="n" sloc="1355" jdoc="">
			<field name="debugStream" access="pub" jdoc=""/>
			<const name="jjbitVec0" access="pub" jdoc=""/>
			<const name="jjbitVec2" access="pub" jdoc=""/>
			<const name="jjnextStates" access="pub" jdoc=""/>
			<const name="jjstrLiteralImages" access="pub" jdoc=""/>
			<const name="lexStateNames" access="pub" jdoc=""/>
			<const name="jjtoToken" access="pub" jdoc=""/>
			<const name="jjtoSkip" access="pub" jdoc=""/>
			<field name="input_stream" access="priv" jdoc=""/>
			<const name="jjrounds" access="priv" jdoc=""/>
			<const name="jjstateSet" access="priv" jdoc=""/>
			<field name="curChar" access="prot" jdoc=""/>
			<field name="curLexState" access="pub" jdoc=""/>
			<field name="defaultLexState" access="pub" jdoc=""/>
			<field name="jjnewStateCnt" access="pub" jdoc=""/>
			<field name="jjround" access="pub" jdoc=""/>
			<field name="jjmatchedPos" access="pub" jdoc=""/>
			<field name="jjmatchedKind" access="pub" jdoc=""/>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.setDebugStream(java.io.PrintStream)" access="pub" jdoc="">
				<param name="ds"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjStopStringLiteralDfa_0(int, long, long)" access="priv" jdoc="">
				<param name="pos"/>
				<param name="active0"/>
				<param name="active1"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjStartNfa_0(int, long, long)" access="priv" jdoc="">
				<param name="pos"/>
				<param name="active0"/>
				<param name="active1"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjStopAtPos(int, int)" access="priv" jdoc="">
				<param name="pos"/>
				<param name="kind"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjStartNfaWithStates_0(int, int, int)" access="priv" jdoc="">
				<param name="pos"/>
				<param name="kind"/>
				<param name="state"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjMoveStringLiteralDfa0_0()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjMoveStringLiteralDfa1_0(long, long)" access="priv" jdoc="">
				<param name="active0"/>
				<param name="active1"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjMoveStringLiteralDfa2_0(long, long, long, long)" access="priv" jdoc="">
				<param name="old0"/>
				<param name="active0"/>
				<param name="old1"/>
				<param name="active1"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjMoveStringLiteralDfa3_0(long, long, long, long)" access="priv" jdoc="">
				<param name="old0"/>
				<param name="active0"/>
				<param name="old1"/>
				<param name="active1"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjMoveStringLiteralDfa4_0(long, long, long, long)" access="priv" jdoc="">
				<param name="old0"/>
				<param name="active0"/>
				<param name="old1"/>
				<param name="active1"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjMoveStringLiteralDfa5_0(long, long, long, long)" access="priv" jdoc="">
				<param name="old0"/>
				<param name="active0"/>
				<param name="old1"/>
				<param name="active1"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjMoveStringLiteralDfa6_0(long, long, long, long)" access="priv" jdoc="">
				<param name="old0"/>
				<param name="active0"/>
				<param name="old1"/>
				<param name="active1"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjMoveStringLiteralDfa7_0(long, long)" access="priv" jdoc="">
				<param name="old0"/>
				<param name="active0"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjMoveStringLiteralDfa8_0(long, long)" access="priv" jdoc="">
				<param name="old0"/>
				<param name="active0"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjMoveStringLiteralDfa9_0(long, long)" access="priv" jdoc="">
				<param name="old0"/>
				<param name="active0"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjCheckNAdd(int)" access="priv" jdoc="">
				<param name="state"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjAddStates(int, int)" access="priv" jdoc="">
				<param name="start"/>
				<param name="end"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjCheckNAddTwoStates(int, int)" access="priv" jdoc="">
				<param name="state1"/>
				<param name="state2"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjCheckNAddStates(int, int)" access="priv" jdoc="">
				<param name="start"/>
				<param name="end"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjCheckNAddStates(int)" access="priv" jdoc="">
				<param name="start"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjMoveNfa_0(int, int)" access="priv" jdoc="">
				<param name="startState"/>
				<param name="curPos"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjCanMove_0(int, int, int, long, long)" access="priv" jdoc="">
				<param name="hiByte"/>
				<param name="i1"/>
				<param name="i2"/>
				<param name="l1"/>
				<param name="l2"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.AxionSqlParserTokenManager(SimpleCharStream)" access="pub" jdoc="">
				<param name="stream"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.AxionSqlParserTokenManager(SimpleCharStream, int)" access="pub" jdoc="">
				<param name="stream"/>
				<param name="lexState"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.ReInit(SimpleCharStream)" access="pub" jdoc="">
				<param name="stream"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.ReInitRounds()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.ReInit(SimpleCharStream, int)" access="pub" jdoc="">
				<param name="stream"/>
				<param name="lexState"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.SwitchTo(int)" access="pub" jdoc="">
				<param name="lexState"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.jjFillToken()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParserTokenManager.getNextToken()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.parser.ParseException" intfc="n" abs="n" inn="n" sloc="109" jdoc="This exception is thrown when parse errors are encountered. You can explicitly create objects of this exception type by calling the method generateParseException in the generated parser. You can modify this class to customize your error reporting mechanisms so long as you retain the public fields.">
			<field name="specialConstructor" access="prot" jdoc="This variable determines which constructor was used to create this object and thereby affects the semantics of the &amp;quot;getMessage&amp;quot; method (see below)."/>
			<field name="currentToken" access="pub" jdoc="This is the last token that has been consumed successfully. If this object has been created due to a parse error, the token followng this token will (therefore) be the first error token."/>
			<field name="expectedTokenSequences" access="pub" jdoc="Each entry in this array is an array of integers. Each array of integers represents a sequence of tokens (by their ordinal values) that is expected at this point of the parse."/>
			<field name="tokenImage" access="pub" jdoc="This is a reference to the &amp;quot;tokenImage&amp;quot; array of the generated parser within which the parse error occurred. This array is defined in the generated ...Constants interface."/>
			<field name="eol" access="prot" jdoc="The end of line string for this machine."/>
			<mth name="/:org.axiondb.parser.ParseException.ParseException(Token, int[][], String[])" access="pub" jdoc="This constructor is used by the method &amp;quot;generateParseException&amp;quot; in the generated parser. Calling this constructor generates a new object of this type with the fields &amp;quot;currentToken&amp;quot;, &amp;quot;expectedTokenSequences&amp;quot;, and &amp;quot;tokenImage&amp;quot; set. The boolean flag &amp;quot;specialConstructor&amp;quot; is also set to true to indicate that this constructor was used to create this object. This constructor calls its super class with the empty string to force the &amp;quot;toString&amp;quot; method of parent class &amp;quot;Throwable&amp;quot; to print the error message in the form: ParseException: &amp;lt;result of getMessage&amp;gt;">
				<param name="currentTokenVal"/>
				<param name="expectedTokenSequencesVal"/>
				<param name="tokenImageVal"/>
			</mth>
			<mth name="/:org.axiondb.parser.ParseException.ParseException()" access="pub" jdoc="The following constructors are for use by you for whatever purpose you can think of. Constructing the exception in this manner makes the exception behave in the normal way - i.e., as documented in the class &amp;quot;Throwable&amp;quot;. The fields &amp;quot;errorToken&amp;quot;, &amp;quot;expectedTokenSequences&amp;quot;, and &amp;quot;tokenImage&amp;quot; do not contain relevant information. The JavaCC generated code does not use these constructors.">
			</mth>
			<mth name="/:org.axiondb.parser.ParseException.ParseException(String)" access="pub" jdoc="">
				<param name="message"/>
			</mth>
			<mth name="/:org.axiondb.parser.ParseException.getMessage()" access="pub" jdoc="This method has the standard behavior when this object has been created using the standard constructors. Otherwise, it uses &amp;quot;currentToken&amp;quot; and &amp;quot;expectedTokenSequences&amp;quot; to generate a parse error message and returns it. If this object has been created due to a parse error, and you do not catch it (it gets thrown from the parser), then this method is called during the printing of the final stack trace, and hence the correct error message gets displayed.">
			</mth>
			<mth name="/:org.axiondb.parser.ParseException.add_escapes(String)" access="prot" jdoc="Used to convert raw characters to their escaped version when these raw version cannot be used as part of an ASCII string literal.">
				<param name="str"/>
			</mth>
		</class>
		<class name="/:org.axiondb.parser.AxionSqlParser" intfc="n" abs="n" inn="n" sloc="2723" jdoc="JavaCC generated SQL parser. Generated from AxionSqlParser.jj ($Header: cvs axion grammars AxionSqlParser.jj,v 1.44 2003 07 08 21:45:48 rwald Exp $). Do not edit this (.java) file directly, it is programmaticly generated. @author kevinh (at) empower.com.au @author Doug Sale @author Chuck Burdick @author Rodney Waldhoff @author James Strachan @author Rob Oxspring @author Amrish Lal @author Rahul Dwivedi">
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="SQL GRAMMAR"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="COMMANDS"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="COMMANDS: AXION CUSTOM"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="COMMANDS: CREATE"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="COMMANDS: DELETE"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="COMMANDS: ALTER TABLE"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="COMMANDS: DROP"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="COMMANDS: INSERT"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="COMMANDS: SELECT"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="COMMANDS: UPDATE"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="CONSTRAINTS"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="GENERIC STUFF (IDENTIFIERS, LITERALS, ETC.)"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="ORDER BY CLAUSE"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="FROM CLAUSE"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="GROUP BY CLAUSE"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<comm cntt="WHERE CLAUSE"/>
			<comm cntt="----------------------------------------------------------------------------"/>
			<field name="_log" access="priv" jdoc=""/>
			<field name="token_source" access="pub" jdoc=""/>
			<field name="jj_input_stream" access="pub" jdoc=""/>
			<field name="token" access="pub" jdoc=""/>
			<field name="jj_nt" access="pub" jdoc=""/>
			<field name="jj_ntk" access="priv" jdoc=""/>
			<field name="jj_scanpos" access="priv" jdoc=""/>
			<field name="jj_lastpos" access="priv" jdoc=""/>
			<field name="jj_la" access="priv" jdoc=""/>
			<field name="lookingAhead" access="pub" jdoc=""/>
			<field name="jj_semLA" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.parser.AxionSqlParser.AxionSqlParser()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.parse(String)" access="pub" jdoc="">
				<param name="sql"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.replace(String, String, String)" access="priv" jdoc="Replaces all occurances of &amp;lt;i&amp;gt;old&amp;lt; i&amp;gt; in &amp;lt;i&amp;gt;src&amp;lt; i&amp;gt; with &amp;lt;i&amp;gt;nu&amp;lt; i&amp;gt;. @param src the source String @param old the character to replace @param nu the String to replace &amp;lt;i&amp;gt;old&amp;lt; i&amp;gt; with @return a copy of &amp;lt;i&amp;gt;src&amp;lt; i&amp;gt; with all instances of &amp;lt;i&amp;gt;old&amp;lt; i&amp;gt; replaced by &amp;lt;i&amp;gt;nu&amp;lt; i&amp;gt; @throws java.lang.NullPointerException if any argument is null.">
				<param name="src"/>
				<param name="old"/>
				<param name="nu"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlCommand()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlAxionCustom()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlRemount()" access="pub" jdoc="">
				<comm cntt="trim off the open and close quotes"/>
				<comm cntt="replace all &amp;apos;&amp;apos; with &amp;apos;"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlCreate()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlCreateTable(String)" access="pub" jdoc="">
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlColumnExpression(CreateTableCommand)" access="pub" jdoc="">
				<param name="result"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlCreateIndex(boolean, String)" access="pub" jdoc="">
				<param name="unique"/>
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlCreateSequence()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlDelete()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlAlterTable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlDropConstraint(String)" access="pub" jdoc="">
				<param name="tablename"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlAddConstraint(String)" access="pub" jdoc="">
				<param name="tablename"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlDrop()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlDropTable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlDropSequence()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlInsert()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlSelect()" access="pub" jdoc="">
				<comm cntt="can gather all cols here and add to builder as list"/>
				<comm cntt="or one at a time farther down the parse tree"/>
				<comm cntt="problem is, farther down the parse tree, might not"/>
				<comm cntt="know we&amp;apos;re getting column identifiers, might need to"/>
				<comm cntt="pass column identifiers back to production where"/>
				<comm cntt="context is obvious"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlSelectCols()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlSelectLimit()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlSelectOffset()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlNumericLiteralOrBindVar()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlLiteralOrBindVar()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlUpdate()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlUpdateAssignment()" access="pub" jdoc="">
				<comm cntt="akl: Be careful, we may run into &amp;quot;Halloween problem&amp;quot; here. Statements"/>
				<comm cntt="such as &amp;quot;update table t set a = a + 1&amp;quot; tend to go into a infinite"/>
				<comm cntt="recursive loop doing a = a + 1."/>
				<comm cntt="pair[1] = SqlSelectableElements() no expressions in update statement."/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlTableConstraint()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlColumnConstraint(String, String)" access="pub" jdoc="">
				<param name="tablename"/>
				<param name="columnname"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlSelectableBasedConstraintType(String)" access="pub" jdoc="">
				<param name="constraintname"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlCheckConstraintType(String)" access="pub" jdoc="">
				<param name="constraintname"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlSelectableBasedConstraintArgs(SelectableBasedConstraint)" access="pub" jdoc="">
				<param name="constraint"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlDeferrable(Constraint)" access="pub" jdoc="">
				<param name="constraint"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlInitiallyDeferredOrImmediate(Constraint)" access="pub" jdoc="">
				<param name="constraint"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlIdentifier()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlIdentifierList()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlBindVar()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlColumnDef()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlColumnRef()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlCase()" access="pub" jdoc="">
				<comm cntt=""/>
				<comm cntt=""/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlPseudoColumn()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlFunction()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlFunctionArgs()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlSumExprSelectable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlProductExprSelectable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlParenthExprSelectable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlUnaryExprSelectable()" access="pub" jdoc="">
				<comm cntt="UnaryExpression unary = null;"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlLiteralList()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlLValue()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlLiteral()" access="pub" jdoc="">
				<comm cntt="trim off the open and close quotes"/>
				<comm cntt="replace all &amp;apos;&amp;apos; with &amp;apos;"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlLValueTerm()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlSelectable()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlSelectableElements()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlSelectList()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlTableRef()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlLValueList()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlLValueElement()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlOrderBy()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlOrderByElem()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlOrderByList()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlOrderDirection()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlFrom()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlTableList(FromNode)" access="pub" jdoc="">
				<param name="node"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlJoin(FromNode)" access="pub" jdoc="">
				<param name="node"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlJoinType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlGroupBy()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlWhere()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlWhereOr()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlWhereAnd()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlWhereNot()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlWhereElt()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlCompareExpr()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlCompareOp()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlIsClause()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.SqlBetweenClause()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_2_1(int)" access="priv" jdoc="">
				<param name="xla"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_2_2(int)" access="priv" jdoc="">
				<param name="xla"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_2_3(int)" access="priv" jdoc="">
				<param name="xla"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_2_4(int)" access="priv" jdoc="">
				<param name="xla"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_2_5(int)" access="priv" jdoc="">
				<param name="xla"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_2_6(int)" access="priv" jdoc="">
				<param name="xla"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_2_7(int)" access="priv" jdoc="">
				<param name="xla"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_2_8(int)" access="priv" jdoc="">
				<param name="xla"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_2_9(int)" access="priv" jdoc="">
				<param name="xla"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_2_10(int)" access="priv" jdoc="">
				<param name="xla"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_2_11(int)" access="priv" jdoc="">
				<param name="xla"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_35()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3_1()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3_8()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_27()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_62()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_22()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_21()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_94()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_20()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3_10()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_29()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3_7()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_74()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3_3()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_24()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_61()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_90()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_81()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_66()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3_9()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_80()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_93()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_79()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_34()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_73()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_78()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_32()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_72()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_77()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_19()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_71()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_76()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_25()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_70()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3_6()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_75()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_45()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_69()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_39()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_63()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_68()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_59()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_67()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_26()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_44()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_56()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_88()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_91()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_83()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_51()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_50()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_43()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_87()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_49()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_84()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_89()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_48()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_82()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_64()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_58()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_38()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_47()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_86()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_85()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_31()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_65()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_42()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_52()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_55()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3_4()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_60()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_33()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_97()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_28()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_41()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_96()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_95()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3_2()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3_11()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_46()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_92()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_37()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_57()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_99()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_54()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_53()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_40()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_98()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_36()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_30()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3R_23()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_3_5()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.AxionSqlParser(java.io.InputStream)" access="pub" jdoc="">
				<param name="stream"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.ReInit(java.io.InputStream)" access="pub" jdoc="">
				<param name="stream"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.AxionSqlParser(java.io.Reader)" access="pub" jdoc="">
				<param name="stream"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.ReInit(java.io.Reader)" access="pub" jdoc="">
				<param name="stream"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.AxionSqlParser(AxionSqlParserTokenManager)" access="pub" jdoc="">
				<param name="tm"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.ReInit(AxionSqlParserTokenManager)" access="pub" jdoc="">
				<param name="tm"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_consume_token(int)" access="priv" jdoc="">
				<param name="kind"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_scan_token(int)" access="priv" jdoc="">
				<param name="kind"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.getNextToken()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.getToken(int)" access="pub" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.jj_ntk()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.generateParseException()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.enable_tracing()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.AxionSqlParser.disable_tracing()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.parser.Parser" intfc="y" abs="n" inn="n" sloc="3" jdoc="Generic Axion parser interface. Arbitrary implementations of this interface should be interoperable with the Axion database engine, allowing pluggable parsers and syntaxes. @version $Revision: 1.3 $ $Date: 2003 05 26 18:11:36 $ @author Doug Sale @author Chuck Burdick">
			<mth name="/:org.axiondb.parser.Parser.parse(String)" access="pub" jdoc="Parse a {@link AxionCommand command} from the given &amp;lt;code&amp;gt;String&amp;lt; code&amp;gt;.">
				<param name="sql"/>
			</mth>
		</class>
		<class name="/:org.axiondb.parser.SimpleCharStream" intfc="n" abs="n" inn="n" sloc="321" jdoc="An implementation of interface CharStream, where the stream is assumed to contain only ASCII characters (without unicode processing).">
			<const name="staticFlag" access="pub" jdoc=""/>
			<field name="bufsize" access="pub" jdoc=""/>
			<field name="available" access="pub" jdoc=""/>
			<field name="tokenBegin" access="pub" jdoc=""/>
			<field name="bufpos" access="pub" jdoc=""/>
			<field name="bufline" access="priv" jdoc=""/>
			<field name="bufcolumn" access="priv" jdoc=""/>
			<field name="column" access="priv" jdoc=""/>
			<field name="line" access="priv" jdoc=""/>
			<field name="prevCharIsCR" access="priv" jdoc=""/>
			<field name="prevCharIsLF" access="priv" jdoc=""/>
			<field name="inputStream" access="priv" jdoc=""/>
			<field name="buffer" access="priv" jdoc=""/>
			<field name="maxNextCharInd" access="priv" jdoc=""/>
			<field name="inBuf" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.parser.SimpleCharStream.ExpandBuff(boolean)" access="priv" jdoc="">
				<param name="wrapAround"/>
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.FillBuff()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.BeginToken()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.UpdateLineColumn(char)" access="priv" jdoc="">
				<param name="c"/>
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.readChar()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.getColumn()" access="pub" jdoc="@deprecated @see #getEndColumn">
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.getLine()" access="pub" jdoc="@deprecated @see #getEndLine">
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.getEndColumn()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.getEndLine()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.getBeginColumn()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.getBeginLine()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.backup(int)" access="pub" jdoc="">
				<param name="amount"/>
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.SimpleCharStream(java.io.Reader, int, int, int)" access="pub" jdoc="">
				<param name="dstream"/>
				<param name="startline"/>
				<param name="startcolumn"/>
				<param name="buffersize"/>
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.SimpleCharStream(java.io.Reader, int, int)" access="pub" jdoc="">
				<param name="dstream"/>
				<param name="startline"/>
				<param name="startcolumn"/>
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.SimpleCharStream(java.io.Reader)" access="pub" jdoc="">
				<param name="dstream"/>
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.ReInit(java.io.Reader, int, int, int)" access="pub" jdoc="">
				<param name="dstream"/>
				<param name="startline"/>
				<param name="startcolumn"/>
				<param name="buffersize"/>
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.ReInit(java.io.Reader, int, int)" access="pub" jdoc="">
				<param name="dstream"/>
				<param name="startline"/>
				<param name="startcolumn"/>
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.ReInit(java.io.Reader)" access="pub" jdoc="">
				<param name="dstream"/>
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.SimpleCharStream(java.io.InputStream, int, int, int)" access="pub" jdoc="">
				<param name="dstream"/>
				<param name="startline"/>
				<param name="startcolumn"/>
				<param name="buffersize"/>
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.SimpleCharStream(java.io.InputStream, int, int)" access="pub" jdoc="">
				<param name="dstream"/>
				<param name="startline"/>
				<param name="startcolumn"/>
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.SimpleCharStream(java.io.InputStream)" access="pub" jdoc="">
				<param name="dstream"/>
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.ReInit(java.io.InputStream, int, int, int)" access="pub" jdoc="">
				<param name="dstream"/>
				<param name="startline"/>
				<param name="startcolumn"/>
				<param name="buffersize"/>
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.ReInit(java.io.InputStream)" access="pub" jdoc="">
				<param name="dstream"/>
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.ReInit(java.io.InputStream, int, int)" access="pub" jdoc="">
				<param name="dstream"/>
				<param name="startline"/>
				<param name="startcolumn"/>
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.GetImage()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.GetSuffix(int)" access="pub" jdoc="">
				<param name="len"/>
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.Done()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.parser.SimpleCharStream.adjustBeginLineColumn(int, int)" access="pub" jdoc="Method to adjust line and column numbers for the start of a token.&amp;lt;BR&amp;gt;">
				<param name="newLine"/>
				<param name="newCol"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/:org.axiondb.tools">
		<class name="/:org.axiondb.tools.BatchSqlCommandRunner" intfc="n" abs="n" inn="n" sloc="62" jdoc="@author Chuck Burdick @author Jim Burke">
			<field name="_log" access="priv" jdoc=""/>
			<field name="_buf" access="priv" jdoc=""/>
			<field name="_stmt" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.tools.BatchSqlCommandRunner.BatchSqlCommandRunner(Connection)" access="pub" jdoc="">
				<param name="conn"/>
			</mth>
			<mth name="/:org.axiondb.tools.BatchSqlCommandRunner.BatchSqlCommandRunner(Statement)" access="pub" jdoc="">
				<param name="stmt"/>
			</mth>
			<mth name="/:org.axiondb.tools.BatchSqlCommandRunner.runCommands(BufferedReader)" access="pub" jdoc="">
				<param name="reader"/>
			</mth>
			<mth name="/:org.axiondb.tools.BatchSqlCommandRunner.runCommands(InputStream)" access="pub" jdoc="">
				<param name="stream"/>
			</mth>
			<mth name="/:org.axiondb.tools.BatchSqlCommandRunner.close()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.tools.BatchSqlCommandRunner.readLine(BufferedReader)" access="pub" jdoc="">
				<param name="reader"/>
			</mth>
			<mth name="/:org.axiondb.tools.BatchSqlCommandRunner.readCommand(BufferedReader)" access="pub" jdoc="">
				<param name="reader"/>
			</mth>
			<mth name="/:org.axiondb.tools.BatchSqlCommandRunner.isInQuotes(String, boolean)" access="pub" jdoc="loop through all the quotes in the line to see if we are within a string literal">
				<param name="line"/>
				<param name="inQuotes"/>
			</mth>
		</class>
		<class name="/:org.axiondb.tools.Console" intfc="n" abs="n" inn="n" sloc="227" jdoc="Simple console-based Axion client application. &amp;lt;p&amp;gt; Invoke via &amp;lt;code&amp;gt;java org.axiondb.tools.Console &amp;lt;i&amp;gt;dbname&amp;lt; i&amp;gt; [&amp;lt;i&amp;gt;location&amp;lt; i&amp;gt;]&amp;lt; code&amp;gt;. &amp;lt; p&amp;gt; @version $Revision: 1.3 $ $Date: 2003 03 27 19:14:07 $ @author Chuck Burdick">
			<field name="_conn" access="priv" jdoc=""/>
			<field name="_stmt" access="priv" jdoc=""/>
			<field name="_rset" access="priv" jdoc=""/>
			<field name="_writer" access="priv" jdoc=""/>
			<const name="_PROMPT" access="priv" jdoc=""/>
			<field name="_in" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.tools.Console.Console(String, PrintWriter)" access="pub" jdoc="">
				<param name="dbName"/>
				<param name="writer"/>
			</mth>
			<mth name="/:org.axiondb.tools.Console.Console(String, String, PrintWriter)" access="pub" jdoc="">
				<param name="dbName"/>
				<param name="dbLoc"/>
				<param name="writer"/>
			</mth>
			<mth name="/:org.axiondb.tools.Console.getConnection()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.tools.Console.execute(String)" access="pub" jdoc="">
				<param name="input"/>
			</mth>
			<mth name="/:org.axiondb.tools.Console.describeTable(String)" access="priv" jdoc="">
				<comm cntt="here&amp;apos;s the generic but verbose form try { DatabaseMetaData dbmd = _conn.getMetaData(); _rset = dbmd.getColumns(null,null,table.toUpperCase(),&amp;quot;%&amp;quot;); } catch (SQLException e) { _writer.println(e.getMessage()); }"/>
				<comm cntt="here&amp;apos;s the axion-centric but terse form"/>
				<param name="table"/>
			</mth>
			<mth name="/:org.axiondb.tools.Console.listTables(String)" access="priv" jdoc="">
				<comm cntt="here&amp;apos;s the axion-centric but terse form"/>
				<param name="type"/>
			</mth>
			<mth name="/:org.axiondb.tools.Console.executeSql(String)" access="priv" jdoc="">
				<param name="sql"/>
			</mth>
			<mth name="/:org.axiondb.tools.Console.printResultSet(ResultSet)" access="priv" jdoc="">
				<comm cntt="find column values and widths"/>
				<comm cntt="table header"/>
				<comm cntt="values"/>
				<comm cntt="for each row"/>
				<comm cntt="for each column"/>
				<param name="rset"/>
			</mth>
			<mth name="/:org.axiondb.tools.Console.cleanUp()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.tools.Console.printBoundary(char, int[])" access="pub" jdoc="">
				<param name="boundaryChar"/>
				<param name="colWidths"/>
			</mth>
			<mth name="/:org.axiondb.tools.Console.printCentered(String, int)" access="pub" jdoc="">
				<param name="value"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.tools.Console.printRight(String, int)" access="pub" jdoc="">
				<param name="value"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.tools.Console.main(String[])" access="pub" jdoc="">
				<param name="args"/>
			</mth>
		</class>
		<class name="/:org.axiondb.tools.Defrag" intfc="n" abs="n" inn="n" sloc="22" jdoc="A utility class for defragmenting an Axion database. Use: &amp;lt;pre&amp;gt;Defrag &amp;lt;database-directory&amp;gt;&amp;lt; pre&amp;gt; The database should not be in use when this program is executed. @version $Revision: 1.1 $ $Date: 2003 01 17 18:35:53 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.tools.Defrag.main(String[])" access="pub" jdoc="">
				<param name="args"/>
			</mth>
			<mth name="/:org.axiondb.tools.Defrag.defragDatabase(String)" access="pub" jdoc="">
				<param name="databaseDirectory"/>
			</mth>
			<mth name="/:org.axiondb.tools.Defrag.defragDatabase(File)" access="pub" jdoc="">
				<param name="databaseDirectory"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/:org.axiondb.types">
		<class name="/:org.axiondb.types.LobSource" intfc="y" abs="n" inn="n" sloc="6" jdoc="Defines the basic Large Object (LOB) methods. @version $Revision: 1.2 $ $Date: 2002 12 16 23:34:55 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.types.LobSource.length()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.LobSource.truncate(long)" access="pub" jdoc="">
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.types.LobSource.getInputStream()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.LobSource.setOutputStream(long)" access="pub" jdoc="">
				<param name="pos"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.FileLobLocator" intfc="n" abs="n" inn="n" sloc="39" jdoc="A file-based {@link LobLocator}. @version $Revision: 1.2 $ $Date: 2002 12 16 23:34:55 $ @author Rodney Waldhoff">
			<field name="_directoryName" access="priv" jdoc=""/>
			<field name="_fileName" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.types.FileLobLocator.FileLobLocator(File)" access="pub" jdoc="">
				<param name="file"/>
			</mth>
			<mth name="/:org.axiondb.types.FileLobLocator.FileLobLocator(String, String)" access="pub" jdoc="">
				<param name="directory"/>
				<param name="file"/>
			</mth>
			<mth name="/:org.axiondb.types.FileLobLocator.getDirectoryName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.FileLobLocator.getFileName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.FileLobLocator.getFile(File)" access="pub" jdoc="">
				<param name="parentDir"/>
			</mth>
			<mth name="/:org.axiondb.types.FileLobLocator.getLobSource(File, RandomAccessFile)" access="pub" jdoc="">
				<comm cntt="XXX FIX ME XXX"/>
				<param name="parentDir"/>
				<param name="dataFile"/>
			</mth>
			<mth name="/:org.axiondb.types.FileLobLocator.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.FileLobLocator.write(DataOutput)" access="pub" jdoc="">
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.FileLobLocator.read(DataInput)" access="pub" jdoc="">
				<param name="in"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.LongType" intfc="n" abs="n" inn="n" sloc="63" jdoc="A {@link DataType} representing a long value. @version $Revision: 1.5 $ $Date: 2003 07 07 23:36:12 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.types.LongType.LongType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.LongType.getJdbcType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.LongType.getPreferredValueClassName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.LongType.getPrecision()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.LongType.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.LongType.convert(Object)" access="pub" jdoc="Returns an &amp;lt;tt&amp;gt;Long&amp;lt; tt&amp;gt; converted from the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt;, or throws {@link IllegalArgumentException} if the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; isn&amp;apos;t {@link #accepts acceptable}.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.LongType.successor(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.LongType.read(DataInput)" access="pub" jdoc="@see #write">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.LongType.write(Object, DataOutput)" access="pub" jdoc="Writes the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to the given &amp;lt;code&amp;gt;DataOutput&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;Null&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;Long.MIN_VALUE&amp;lt; code&amp;gt;, &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;Long.MIN_VALUE&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;Long.MIN_VALUE&amp;lt; code&amp;gt;, &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;. All other values are written directly. @param value the value to write, which must be {@link #accepts acceptable}">
				<param name="value"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.LongType.makeNewInstance()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.types.FileOffsetLobLocator" intfc="n" abs="n" inn="n" sloc="25" jdoc="A {@link LobLocator} based upon an byte-offset into a file. @version $Revision: 1.2 $ $Date: 2002 12 16 23:34:55 $ @author Rodney Waldhoff">
			<field name="_offset" access="priv" jdoc=""/>
			<field name="_length" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.types.FileOffsetLobLocator.FileOffsetLobLocator(long, int)" access="pub" jdoc="">
				<param name="offset"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.types.FileOffsetLobLocator.getLobSource(File, RandomAccessFile)" access="pub" jdoc="">
				<param name="parentDir"/>
				<param name="dataFile"/>
			</mth>
			<mth name="/:org.axiondb.types.FileOffsetLobLocator.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.FileOffsetLobLocator.write(DataOutput)" access="pub" jdoc="">
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.FileOffsetLobLocator.read(DataInput)" access="pub" jdoc="">
				<param name="in"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.BigDecimalType" intfc="n" abs="n" inn="n" sloc="95" jdoc="A {@link DataType} representing an number value. @version $Revision: 1.4 $ $Date: 2003 07 02 15:18:57 $ @author Chuck Burdick @author Rodney Waldhoff">
			<field name="_scale" access="priv" jdoc=""/>
			<const name="NULL_BIGDEC" access="priv" jdoc=""/>
			<const name="TOSTRING_RADIX" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.types.BigDecimalType.BigDecimalType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BigDecimalType.BigDecimalType(int)" access="pub" jdoc="">
				<param name="scale"/>
			</mth>
			<mth name="/:org.axiondb.types.BigDecimalType.getJdbcType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BigDecimalType.getPreferredValueClassName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BigDecimalType.getScale()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BigDecimalType.toString()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;&amp;quot;BigDecimal&amp;quot;&amp;lt; code&amp;gt; @return &amp;lt;code&amp;gt;&amp;quot;BigDecimal&amp;quot;&amp;lt; code&amp;gt;">
			</mth>
			<mth name="/:org.axiondb.types.BigDecimalType.accepts(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BigDecimalType.convert(Object)" access="pub" jdoc="Returns a &amp;lt;tt&amp;gt;Float&amp;lt; tt&amp;gt; converted from the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt;, or throws {@link IllegalArgumentException} if the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; isn&amp;apos;t {@link #accepts acceptable}.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BigDecimalType.read(DataInput)" access="pub" jdoc="@see #write">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.BigDecimalType.supportsSuccessor()" access="pub" jdoc="&amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;">
			</mth>
			<mth name="/:org.axiondb.types.BigDecimalType.write(Object, DataOutput)" access="pub" jdoc="">
				<param name="value"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.BigDecimalType.makeNewInstance()" access="pub" jdoc="">
				<comm cntt="XXX FIX ME XXX"/>
				<comm cntt="this (defaulting to scale 2) is an ugly hack,"/>
				<comm cntt="but we need to restructure the metadata storage"/>
				<comm cntt="and column creation first"/>
				<comm cntt="XXX FIX ME XXX"/>
			</mth>
			<mth name="/:org.axiondb.types.BigDecimalType.makeNewInstance(int)" access="pub" jdoc="">
				<param name="scale"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.ClobSource" intfc="n" abs="n" inn="n" sloc="59" jdoc="An {@link Clob} wrapping a {@link LobSource}. @version $Revision: 1.5 $ $Date: 2003 05 27 19:08:56 $ @author Rodney Waldhoff">
			<field name="_lob" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.types.ClobSource.ClobSource(LobSource)" access="pub" jdoc="">
				<param name="lob"/>
			</mth>
			<mth name="/:org.axiondb.types.ClobSource.setLobSource(LobSource)" access="pub" jdoc="">
				<param name="lob"/>
			</mth>
			<mth name="/:org.axiondb.types.ClobSource.getUtf8Stream()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ClobSource.getAsciiStream()" access="pub" jdoc="This method is guaranteed to return an ASCII strream. The stream returned will throw an IOException if it encounters non-ASCII characters in the underlying Clob.">
			</mth>
			<mth name="/:org.axiondb.types.ClobSource.getCharacterStream()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ClobSource.setAsciiStream(long)" access="pub" jdoc="The behaviour of this method is undefined for non-ASCII input. Make sure to limit input to ASCII only.">
				<param name="pos"/>
			</mth>
			<mth name="/:org.axiondb.types.ClobSource.setUtf8Stream(long)" access="pub" jdoc="">
				<param name="pos"/>
			</mth>
			<mth name="/:org.axiondb.types.ClobSource.length()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ClobSource.truncate(long)" access="pub" jdoc="">
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.types.ClobSource.free()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
			<mth name="/:org.axiondb.types.ClobSource.getCharacterStream(long, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="pos"/>
				<param name="length"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.IntegerType" intfc="n" abs="n" inn="n" sloc="63" jdoc="A {@link DataType} representing an integer value. @version $Revision: 1.5 $ $Date: 2003 07 07 23:36:12 $ @author Chuck Burdick @author Rodney Waldhoff">
			<mth name="/:org.axiondb.types.IntegerType.IntegerType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.IntegerType.getJdbcType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.IntegerType.getPreferredValueClassName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.IntegerType.getPrecision()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.IntegerType.toString()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;&amp;quot;integer&amp;quot;&amp;lt; code&amp;gt; @return &amp;lt;code&amp;gt;&amp;quot;integer&amp;quot;&amp;lt; code&amp;gt;">
			</mth>
			<mth name="/:org.axiondb.types.IntegerType.convert(Object)" access="pub" jdoc="Returns an {@link Integer} converted from the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt;, or throws {@link IllegalArgumentException} if the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; isn&amp;apos;t {@link #accepts acceptable}.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.IntegerType.successor(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.IntegerType.read(DataInput)" access="pub" jdoc="@see #write">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.IntegerType.write(Object, DataOutput)" access="pub" jdoc="Writes the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to the given &amp;lt;code&amp;gt;DataOutput&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;Null&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;Integer.MIN_VALUE&amp;lt; code&amp;gt;, &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;Integer.MIN_VALUE&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;Integer.MIN_VALUE&amp;lt; code&amp;gt;, &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;. All other values are written directly. @param value the value to write, which must be {@link #accepts acceptable}">
				<param name="value"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.IntegerType.makeNewInstance()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.types.LobLocator" intfc="y" abs="n" inn="n" sloc="3" jdoc="A factory for {@link LobSource}s. @version $Revision: 1.2 $ $Date: 2002 12 16 23:34:55 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.types.LobLocator.getLobSource(File, RandomAccessFile)" access="pub" jdoc="">
				<param name="parentDir"/>
				<param name="dataFile"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.TimestampType" intfc="n" abs="n" inn="n" sloc="159" jdoc="A {@link DataType} representing a timestamp value. @version $Revision: 1.13 $ $Date: 2003 07 08 23:03:55 $ @author Chuck Burdick">
			<const name="LOCALE" access="pub" jdoc="irrespective of the JVM&amp;apos;s Locale lets pick a Locale for use on any JVM"/>
			<const name="TIMEZONE" access="pub" jdoc=""/>
			<const name="_fmts" access="prot" jdoc=""/>
			<const name="COMPARATOR" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.types.TimestampType.TimestampType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.TimestampType.getJdbcType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.TimestampType.getPreferredValueClassName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.TimestampType.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.TimestampType.accepts(Object)" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; iff &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; is &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;, a &amp;lt;tt&amp;gt;Number&amp;lt; tt&amp;gt;, or a &amp;lt;tt&amp;gt;String&amp;lt; tt&amp;gt; that can be converted to a &amp;lt;tt&amp;gt;Long&amp;lt; tt&amp;gt;.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.TimestampType.convert(Object)" access="pub" jdoc="Returns an &amp;lt;tt&amp;gt;Byte&amp;lt; tt&amp;gt; converted from the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt;, or throws {@link IllegalArgumentException} if the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; isn&amp;apos;t {@link #accepts acceptable}.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.TimestampType.toDate(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.TimestampType.toTimestamp(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.TimestampType.supportsSuccessor()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.TimestampType.successor(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.TimestampType.read(DataInput)" access="pub" jdoc="@see #write">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.TimestampType.write(Object, DataOutput)" access="pub" jdoc="Writes the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to the given &amp;lt;code&amp;gt;DataOutput&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;Null&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;Integer.MIN_VALUE&amp;lt; code&amp;gt;. All other values are written directly with an &amp;lt;code&amp;gt;int&amp;lt; code&amp;gt; representing nanoseconds first, and a &amp;lt;code&amp;gt;long&amp;lt; code&amp;gt; representing the time. @param value the value to write, which must be {@link #accepts acceptable}">
				<param name="value"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.TimestampType.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.TimestampType.getComparator()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.types.UnsignedShortType" intfc="n" abs="n" inn="n" sloc="104" jdoc="A {@link DataType} representing an unsigned short value as an int. @version $Revision: 1.6 $ $Date: 2003 05 14 19:07:30 $ @author Rodney Waldhoff @author Chuck Burdick">
			<const name="MIN_VALUE" access="priv" jdoc=""/>
			<const name="MAX_VALUE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.types.UnsignedShortType.UnsignedShortType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedShortType.getJdbcType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedShortType.getPreferredValueClassName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedShortType.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedShortType.getPrecision()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedShortType.accepts(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedShortType.convert(Object)" access="pub" jdoc="Returns an &amp;lt;tt&amp;gt;Integer&amp;lt; tt&amp;gt; converted from the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt;, or throws {@link IllegalArgumentException} if the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; isn&amp;apos;t {@link #accepts acceptable}.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedShortType.successor(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedShortType.read(DataInput)" access="pub" jdoc="@see #write">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedShortType.write(Object, DataOutput)" access="pub" jdoc="Writes the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to the given &amp;lt;code&amp;gt;DataOutput&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;Null&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;MIN_VALUE&amp;lt; code&amp;gt;, &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;MIN_VALUE&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;MIN_VALUE&amp;lt; code&amp;gt;, &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;. All other values are written directly. @param value the value to write, which must be {@link #accepts acceptable}">
				<param name="value"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedShortType.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedShortType.isUnsigned()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedShortType.toInt(short)" access="priv" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedShortType.fromInt(int)" access="priv" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedShortType.assertValidUnsignedShort(int)" access="priv" jdoc="">
				<param name="value"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.BaseNumberDataType" intfc="n" abs="y" inn="n" sloc="46" jdoc="An abstract base {@link org.axiondb.DataType} for {@link Number} types. @version $Revision: 1.3 $ $Date: 2003 07 07 23:36:12 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.types.BaseNumberDataType.BaseNumberDataType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BaseNumberDataType.accepts(Object)" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; iff &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; is &amp;lt;code&amp;gt;String&amp;lt; code&amp;gt; that can be {@link #convert converted} without exception, &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;, or a {@link Number Number}.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseNumberDataType.convert(Object)" access="pub" jdoc="Returns &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; if &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; is &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; and throws {@link IllegalArgumentException} otherwise. Subclasses should override this method and call &amp;lt;code&amp;gt;super.convert(value)&amp;lt; code&amp;gt; as their last case.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseNumberDataType.supportsSuccessor()" access="pub" jdoc="This base implementation returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;.">
			</mth>
			<mth name="/:org.axiondb.types.BaseNumberDataType.toNumber(Object)" access="prot" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseNumberDataType.cantConvertMessage(Object)" access="priv" jdoc="">
				<param name="value"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.FileLobLocatorFactory" intfc="n" abs="n" inn="n" sloc="26" jdoc="A {@link LobLocatorFactory} for {@link FileLobLocator}s. @version $Revision: 1.3 $ $Date: 2003 05 13 23:42:58 $ @author Rodney Waldhoff">
			<field name="_counter" access="priv" jdoc=""/>
			<const name="_LOB_PREFIX" access="priv" jdoc=""/>
			<const name="_LOB_SUFFIX" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.types.FileLobLocatorFactory.write(LobLocator, DataOutput)" access="pub" jdoc="">
				<param name="locator"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.FileLobLocatorFactory.read(DataInput)" access="pub" jdoc="">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.FileLobLocatorFactory.makeLobLocator(File)" access="pub" jdoc="">
				<param name="parentdir"/>
			</mth>
			<mth name="/:org.axiondb.types.FileLobLocatorFactory.getNextLobDir(File)" access="priv" jdoc="">
				<param name="parentdir"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.FileOffsetLobLocatorFactory" intfc="n" abs="n" inn="n" sloc="11" jdoc="A {@link LobLocatorFactory} for {@link FileOffsetLobLocator}s. @version $Revision: 1.2 $ $Date: 2002 12 16 23:34:55 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.types.FileOffsetLobLocatorFactory.write(LobLocator, DataOutput)" access="pub" jdoc="">
				<param name="locator"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.FileOffsetLobLocatorFactory.read(DataInput)" access="pub" jdoc="">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.FileOffsetLobLocatorFactory.makeLobLocator(File)" access="pub" jdoc="">
				<param name="parentdir"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.LobLocatorFactory" intfc="y" abs="n" inn="n" sloc="5" jdoc="Reads, writes and creates {@link LobLocator}s. @version $Revision: 1.2 $ $Date: 2002 12 16 23:34:55 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.types.LobLocatorFactory.write(LobLocator, DataOutput)" access="pub" jdoc="">
				<param name="locator"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.LobLocatorFactory.read(DataInput)" access="pub" jdoc="">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.LobLocatorFactory.makeLobLocator(File)" access="pub" jdoc="">
				<param name="parent"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.CompressedLOBType" intfc="n" abs="n" inn="n" sloc="16" jdoc="A {@link DataType} representing a compressed LOB value. @version $Revision: 1.3 $ $Date: 2003 05 13 20:57:39 $ @author James Burke @author Rodney Waldhoff">
			<mth name="/:org.axiondb.types.CompressedLOBType.CompressedLOBType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.CompressedLOBType.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.CompressedLOBType.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.CompressedLOBType.makeBlobSource(LobLocator)" access="prot" jdoc="">
				<param name="loc"/>
			</mth>
			<mth name="/:org.axiondb.types.CompressedLOBType.makeClobSource(LobLocator)" access="prot" jdoc="">
				<param name="loc"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.ByteArrayBlob" intfc="n" abs="n" inn="n" sloc="56" jdoc="A {@link Blob} based upon a simple byte array. @version $Revision: 1.2 $ $Date: 2003 05 14 22:28:40 $ @author Rodney Waldhoff">
			<field name="_value" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.types.ByteArrayBlob.ByteArrayBlob(byte[])" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.ByteArrayBlob.getBinaryStream()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ByteArrayBlob.getBytes()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ByteArrayBlob.getBytes(long, int)" access="pub" jdoc="">
				<param name="pos"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.types.ByteArrayBlob.length()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ByteArrayBlob.position(Blob, long)" access="pub" jdoc="">
				<param name="pattern"/>
				<param name="start"/>
			</mth>
			<mth name="/:org.axiondb.types.ByteArrayBlob.position(byte[], long)" access="pub" jdoc="">
				<param name="pattern"/>
				<param name="start"/>
			</mth>
			<mth name="/:org.axiondb.types.ByteArrayBlob.setBinaryStream(long)" access="pub" jdoc="">
				<param name="pos"/>
			</mth>
			<mth name="/:org.axiondb.types.ByteArrayBlob.setBytes(long, byte[], int, int)" access="pub" jdoc="">
				<param name="pos"/>
				<param name="bytes"/>
				<param name="offset"/>
				<param name="len"/>
			</mth>
			<mth name="/:org.axiondb.types.ByteArrayBlob.setBytes(long, byte[])" access="pub" jdoc="">
				<param name="pos"/>
				<param name="bytes"/>
			</mth>
			<mth name="/:org.axiondb.types.ByteArrayBlob.truncate(long)" access="pub" jdoc="">
				<param name="len"/>
			</mth>
			<mth name="/:org.axiondb.types.ByteArrayBlob.free()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
			<mth name="/:org.axiondb.types.ByteArrayBlob.getBinaryStream(long, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="pos"/>
				<param name="length"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.UnsignedByteType" intfc="n" abs="n" inn="n" sloc="104" jdoc="A {@link DataType} representing an unsigned byte value. @version $Revision: 1.5 $ $Date: 2003 05 14 19:07:30 $ @author Rodney Waldhoff @author Chuck Burdick">
			<const name="MIN_VALUE" access="priv" jdoc=""/>
			<const name="MAX_VALUE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.types.UnsignedByteType.UnsignedByteType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedByteType.getJdbcType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedByteType.getPreferredValueClassName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedByteType.getPrecision()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedByteType.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedByteType.accepts(Object)" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; iff &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; is &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;, a &amp;lt;tt&amp;gt;Number&amp;lt; tt&amp;gt;, within the unsigned byte range (0 to 255).">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedByteType.convert(Object)" access="pub" jdoc="Returns an &amp;lt;tt&amp;gt;Short&amp;lt; tt&amp;gt; converted from the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt;, or throws {@link IllegalArgumentException} if the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; isn&amp;apos;t {@link #accepts acceptable}.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedByteType.successor(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedByteType.read(DataInput)" access="pub" jdoc="@see #write">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedByteType.write(Object, DataOutput)" access="pub" jdoc="Writes the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to the given &amp;lt;code&amp;gt;DataOutput&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;Null&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;MIN_VALUE&amp;lt; code&amp;gt;, &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;MIN_VALUE&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;MIN_VALUE&amp;lt; code&amp;gt;, &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;. All other values are written directly. @param value the value to write, which must be {@link #accepts acceptable}">
				<param name="value"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedByteType.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedByteType.isUnsigned()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedByteType.toShort(byte)" access="priv" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedByteType.fromShort(short)" access="priv" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedByteType.assertValidUnsignedByte(short)" access="priv" jdoc="">
				<param name="value"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.FileLobSource" intfc="n" abs="n" inn="n" sloc="43" jdoc="A {@link LobSource} that&amp;apos;s backed by a simple {@link File}. @version $Revision: 1.2 $ $Date: 2003 03 27 19:14:04 $ @author Rodney Waldhoff">
			<field name="_file" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.types.FileLobSource.FileLobSource(File)" access="pub" jdoc="">
				<param name="file"/>
			</mth>
			<mth name="/:org.axiondb.types.FileLobSource.length()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.FileLobSource.truncate(long)" access="pub" jdoc="">
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.types.FileLobSource.getInputStream()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.FileLobSource.setOutputStream(long)" access="pub" jdoc="">
				<param name="pos"/>
			</mth>
			<mth name="/:org.axiondb.types.FileLobSource.getFile()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.types.ShortType" intfc="n" abs="n" inn="n" sloc="63" jdoc="A {@link DataType} representing a short value. @version $Revision: 1.5 $ $Date: 2003 07 07 23:36:12 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.types.ShortType.ShortType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ShortType.getJdbcType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ShortType.getPreferredValueClassName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ShortType.getPrecision()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ShortType.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ShortType.convert(Object)" access="pub" jdoc="Returns an &amp;lt;tt&amp;gt;Short&amp;lt; tt&amp;gt; converted from the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt;, or throws {@link IllegalArgumentException} if the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; isn&amp;apos;t {@link #accepts acceptable}.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.ShortType.successor(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.ShortType.read(DataInput)" access="pub" jdoc="@see #write">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.ShortType.write(Object, DataOutput)" access="pub" jdoc="Writes the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to the given &amp;lt;code&amp;gt;DataOutput&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;Null&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;Short.MIN_VALUE&amp;lt; code&amp;gt;, &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;Short.MIN_VALUE&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;Short.MIN_VALUE&amp;lt; code&amp;gt;, &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;. All other values are written directly. @param value the value to write, which must be {@link #accepts acceptable}">
				<param name="value"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.ShortType.makeNewInstance()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.types.UnsignedIntegerType" intfc="n" abs="n" inn="n" sloc="105" jdoc="A {@link DataType} representing a unsigned integer value as a long. @version $Revision: 1.5 $ $Date: 2003 05 14 19:07:30 $ @author Rodney Waldhoff @author Chuck Burdick">
			<const name="MIN_VALUE" access="priv" jdoc=""/>
			<const name="MAX_VALUE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.types.UnsignedIntegerType.UnsignedIntegerType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedIntegerType.getJdbcType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedIntegerType.getPreferredValueClassName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedIntegerType.getPrecision()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedIntegerType.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedIntegerType.accepts(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedIntegerType.convert(Object)" access="pub" jdoc="Returns an &amp;lt;tt&amp;gt;Long&amp;lt; tt&amp;gt; converted from the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt;, or throws {@link IllegalArgumentException} if the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; isn&amp;apos;t {@link #accepts acceptable}.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedIntegerType.successor(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedIntegerType.read(DataInput)" access="pub" jdoc="@see #write">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedIntegerType.write(Object, DataOutput)" access="pub" jdoc="Writes the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to the given &amp;lt;code&amp;gt;DataOutput&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;Null&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;MIN_VALUE&amp;lt; code&amp;gt;, &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;MIN_VALUE&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;MIN_VALUE&amp;lt; code&amp;gt;, &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;. All other values are written directly. @param value the value to write, which must be {@link #accepts acceptable}">
				<param name="value"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedIntegerType.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedIntegerType.isUnsigned()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.UnsignedIntegerType.toLong(int)" access="priv" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedIntegerType.fromLong(long)" access="priv" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.UnsignedIntegerType.assertValidUnsignedInteger(long)" access="priv" jdoc="">
				<param name="value"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.BooleanType" intfc="n" abs="n" inn="n" sloc="73" jdoc="A {@link DataType} representing a Boolean value. @version $Revision: 1.8 $ $Date: 2003 05 14 19:07:30 $ @author Rodney Waldhoff">
			<const name="COMPARATOR_INSTANCE" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.types.BooleanType.BooleanType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BooleanType.getJdbcType()" access="pub" jdoc="@return {@link Types#BIT}">
			</mth>
			<mth name="/:org.axiondb.types.BooleanType.getPreferredValueClassName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BooleanType.getPrecision()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BooleanType.getComparator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BooleanType.toString()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;&amp;quot;boolean&amp;quot;&amp;lt; code&amp;gt; @return &amp;lt;code&amp;gt;&amp;quot;boolean&amp;quot;&amp;lt; code&amp;gt;">
			</mth>
			<mth name="/:org.axiondb.types.BooleanType.toBoolean(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BooleanType.accepts(Object)" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; iff &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; is &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;, or a &amp;lt;code&amp;gt;Boolean&amp;lt; code&amp;gt;.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BooleanType.convert(Object)" access="pub" jdoc="Returns a &amp;lt;code&amp;gt;Boolean&amp;lt; code&amp;gt; converted from the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt;, or throws {@link IllegalArgumentException} if the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; isn&amp;apos;t {@link #accepts acceptable}.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BooleanType.read(DataInput)" access="pub" jdoc="@see #write">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.BooleanType.write(Object, DataOutput)" access="pub" jdoc="Writes the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to the given &amp;lt;code&amp;gt;DataOutput&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;Null&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;(byte)-1&amp;lt; code&amp;gt;, &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;(byte)0&amp;lt; code&amp;gt;, &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;(byte)1&amp;lt; code&amp;gt;. @param value the value to write, which must be {@link #accepts acceptable}">
				<param name="value"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.BooleanType.makeNewInstance()" access="pub" jdoc="">
			</mth>
		<class name="/:org.axiondb.types.BooleanType$BooleanComparator" intfc="n" abs="n" inn="y" sloc="8" jdoc="A {@link Comparator} for Boolean values. (This may be a good candidate to move to commons-collections.)">
			<mth name="/:org.axiondb.types.BooleanType$BooleanComparator.compare(Object, Object)" access="pub" jdoc="">
				<param name="left"/>
				<param name="right"/>
			</mth>
			<mth name="/:org.axiondb.types.BooleanType$BooleanComparator.compare(boolean, boolean)" access="priv" jdoc="">
				<comm cntt="sorts false before true"/>
				<param name="left"/>
				<param name="right"/>
			</mth>
		</class>
		</class>
		<class name="/:org.axiondb.types.BlobSource" intfc="n" abs="n" inn="n" sloc="61" jdoc="A {@link Blob} wrapping a {@link LobSource}. @version $Revision: 1.4 $ $Date: 2003 05 14 15:38:12 $ @author Rodney Waldhoff">
			<field name="_lob" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.types.BlobSource.BlobSource(LobSource)" access="pub" jdoc="">
				<param name="lob"/>
			</mth>
			<mth name="/:org.axiondb.types.BlobSource.setLobSource(LobSource)" access="pub" jdoc="">
				<param name="lob"/>
			</mth>
			<mth name="/:org.axiondb.types.BlobSource.length()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BlobSource.getBytes(long, int)" access="pub" jdoc="">
				<comm cntt="skip pos bytes"/>
				<comm cntt="copy length bytes"/>
				<param name="pos"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.types.BlobSource.truncate(long)" access="pub" jdoc="">
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.types.BlobSource.getBinaryStream()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BlobSource.setBinaryStream(long)" access="pub" jdoc="">
				<param name="pos"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.FileOffsetLobSource" intfc="n" abs="n" inn="n" sloc="31" jdoc="A {@link LobSource} that&amp;apos;s backed by a single file, storing each LOB as an offset and length. @version $Revision: 1.2 $ $Date: 2002 12 16 23:34:55 $ @author Rodney Waldhoff">
			<field name="_file" access="priv" jdoc=""/>
			<field name="_offset" access="priv" jdoc=""/>
			<field name="_length" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.types.FileOffsetLobSource.FileOffsetLobSource(RandomAccessFile, long, int)" access="pub" jdoc="">
				<param name="file"/>
				<param name="offset"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.types.FileOffsetLobSource.length()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.FileOffsetLobSource.truncate(long)" access="pub" jdoc="">
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.types.FileOffsetLobSource.getInputStream()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.FileOffsetLobSource.setOutputStream(long)" access="pub" jdoc="">
				<param name="pos"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.BaseDataType" intfc="n" abs="y" inn="n" sloc="123" jdoc="Abstract base implemention of {@link DataType}. @version $Revision: 1.11 $ $Date: 2003 05 14 19:07:30 $ @author Rodney Waldhoff @author Rob Oxspring @author Chuck Burdick">
			<mth name="/:org.axiondb.types.BaseDataType.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.accepts(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.convert(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.read(DataInput)" access="pub" jdoc="">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.write(Object, DataOutput)" access="pub" jdoc="">
				<param name="value"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.getJdbcType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.getPreferredValueClassName()" access="pub" jdoc="@see org.axiondb.jdbc.AxionResultSetMetaData#getColumnClassName">
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.getComparator()" access="pub" jdoc="This base implementation simply returns a{@link org.apache.commons.collections.comparators.ComparableComparator}.">
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.getColumnDisplaySize()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.getPrecision()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.getScale()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.isCaseSensitive()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.isCurrency()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.getLiteralPrefix()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.getLiteralSuffix()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.getNullableCode()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.getSearchableCode()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.isUnsigned()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.supportsSuccessor()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.successor(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.toNumber(Object)" access="prot" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.toBigDecimal(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.toBigInteger(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.toBoolean(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.toByte(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.toDate(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.toDouble(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.toFloat(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.toInt(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.toLong(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.toShort(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.toString(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.toTime(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.toTimestamp(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.toClob(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.BaseDataType.toBlob(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.ObjectType" intfc="n" abs="n" inn="n" sloc="71" jdoc="A {@link DataType} representing a {@link Serializable} object value. @version $Revision: 1.2 $ $Date: 2002 07 02 21:04:57 $ @author James Strachan">
			<mth name="/:org.axiondb.types.ObjectType.ObjectType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ObjectType.getJdbcType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ObjectType.getPreferredValueClassName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ObjectType.toString()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;&amp;quot;string&amp;quot;&amp;lt; code&amp;gt; @return &amp;lt;code&amp;gt;&amp;quot;string&amp;quot;&amp;lt; code&amp;gt;">
			</mth>
			<mth name="/:org.axiondb.types.ObjectType.accepts(Object)" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; iff &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; is &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; or a {@link Serializable}.object">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.ObjectType.convert(Object)" access="pub" jdoc="Returns a {@link String} converted from the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt;, or throws {@link IllegalArgumentException} if the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; isn&amp;apos;t {@link #accepts acceptable}.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.ObjectType.supportsSuccessor()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ObjectType.successor(Object)" access="pub" jdoc="">
				<comm cntt="@TODO: I&amp;apos;m not sure we really want to do this. The comparator methods"/>
				<comm cntt="aren&amp;apos;t going to rely upon a String comparision in general,"/>
				<comm cntt="so this could lead to unexpected results"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.ObjectType.read(DataInput)" access="pub" jdoc="@see #write">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.ObjectType.write(Object, DataOutput)" access="pub" jdoc="Writes the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to the given &amp;lt;code&amp;gt;DataOutput&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;Null&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;&amp;quot;null&amp;quot;, false&amp;lt; code&amp;gt;, the non-null String &amp;lt;code&amp;gt;&amp;quot;null&amp;quot;&amp;lt; code&amp;gt; is written as &amp;lt;code&amp;gt;&amp;quot;null&amp;quot;, true&amp;lt; code&amp;gt;, all other values are written directly. @param value the value to write, which must be {@link #accepts acceptable}">
				<param name="value"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.ObjectType.makeNewInstance()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.types.FloatType" intfc="n" abs="n" inn="n" sloc="61" jdoc="A {@link DataType} representing an float value. @version $Revision: 1.5 $ $Date: 2003 07 07 23:36:12 $ @author Chuck Burdick @author Rodney Waldhoff">
			<mth name="/:org.axiondb.types.FloatType.FloatType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.FloatType.getJdbcType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.FloatType.getPreferredValueClassName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.FloatType.getPrecision()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.FloatType.getScale()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.FloatType.toString()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;&amp;quot;float&amp;quot;&amp;lt; code&amp;gt; @return &amp;lt;code&amp;gt;&amp;quot;float&amp;quot;&amp;lt; code&amp;gt;">
			</mth>
			<mth name="/:org.axiondb.types.FloatType.convert(Object)" access="pub" jdoc="Returns a &amp;lt;tt&amp;gt;Float&amp;lt; tt&amp;gt; converted from the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt;, or throws {@link IllegalArgumentException} if the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; isn&amp;apos;t {@link #accepts acceptable}.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.FloatType.read(DataInput)" access="pub" jdoc="@see #write">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.FloatType.supportsSuccessor()" access="pub" jdoc="&amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;">
			</mth>
			<mth name="/:org.axiondb.types.FloatType.write(Object, DataOutput)" access="pub" jdoc="">
				<param name="value"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.FloatType.makeNewInstance()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.types.CharacterType" intfc="n" abs="n" inn="n" sloc="84" jdoc="A {@link DataType} representing a single char value. @version $Revision: 1.4 $ $Date: 2003 05 14 19:07:30 $ @author Chuck Burdick @author Rodney Waldhoff">
			<mth name="/:org.axiondb.types.CharacterType.CharacterType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.CharacterType.getJdbcType()" access="pub" jdoc="@return {@link Types#CHAR}">
			</mth>
			<mth name="/:org.axiondb.types.CharacterType.getPreferredValueClassName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.CharacterType.getPrecision()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.CharacterType.isCaseSensitive()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.CharacterType.toString()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;&amp;quot;character&amp;quot;&amp;lt; code&amp;gt; @return &amp;lt;code&amp;gt;&amp;quot;character&amp;quot;&amp;lt; code&amp;gt;">
			</mth>
			<mth name="/:org.axiondb.types.CharacterType.accepts(Object)" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; iff &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; is &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt;, a &amp;lt;tt&amp;gt;Character&amp;lt; tt&amp;gt;, or a single character &amp;lt;tt&amp;gt;String&amp;lt; tt&amp;gt;.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.CharacterType.supportsSuccessor()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.CharacterType.successor(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.CharacterType.convert(Object)" access="pub" jdoc="Returns an &amp;lt;tt&amp;gt;Character&amp;lt; tt&amp;gt; converted from the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt;, or throws {@link IllegalArgumentException} if the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; isn&amp;apos;t {@link #accepts acceptable}.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.CharacterType.read(DataInput)" access="pub" jdoc="@see #write">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.CharacterType.write(Object, DataOutput)" access="pub" jdoc="Writes the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to the given {@link DataOutput}. &amp;lt;code&amp;gt;Null&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;Character.MIN_VALUE&amp;lt; code&amp;gt;, &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;Character.MIN_VALUE&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;Character.MIN_VALUE&amp;lt; code&amp;gt;, &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;. All other values are written directly. @param value the value to write, which must be {@link #accepts acceptable}">
				<param name="value"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.CharacterType.makeNewInstance()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.types.StringType" intfc="n" abs="n" inn="n" sloc="70" jdoc="A {@link DataType} representing a {@link String} value. @version $Revision: 1.5 $ $Date: 2003 05 14 19:07:30 $ @author Chuck Burdick @author Rodney Waldhoff">
			<mth name="/:org.axiondb.types.StringType.StringType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.StringType.getJdbcType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.StringType.getPreferredValueClassName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.StringType.getColumnDisplaySize()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.StringType.isCaseSensitive()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.StringType.toString()" access="pub" jdoc="Returns &amp;lt;code&amp;gt;&amp;quot;string&amp;quot;&amp;lt; code&amp;gt; @return &amp;lt;code&amp;gt;&amp;quot;string&amp;quot;&amp;lt; code&amp;gt;">
			</mth>
			<mth name="/:org.axiondb.types.StringType.accepts(Object)" access="pub" jdoc="Returns &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt; iff &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; is &amp;lt;code&amp;gt;null&amp;lt; code&amp;gt; or a {@link String String}.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.StringType.convert(Object)" access="pub" jdoc="Returns a {@link String} converted from the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt;, or throws {@link IllegalArgumentException} if the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; isn&amp;apos;t {@link #accepts acceptable}.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.StringType.supportsSuccessor()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.StringType.successor(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.StringType.read(DataInput)" access="pub" jdoc="@see #write">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.StringType.write(Object, DataOutput)" access="pub" jdoc="Writes the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to the given &amp;lt;code&amp;gt;DataOutput&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;Null&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;&amp;quot;null&amp;quot;, false&amp;lt; code&amp;gt;, the non-null String &amp;lt;code&amp;gt;&amp;quot;null&amp;quot;&amp;lt; code&amp;gt; is written as &amp;lt;code&amp;gt;&amp;quot;null&amp;quot;, true&amp;lt; code&amp;gt;, all other values are written directly. @param value the value to write, which must be {@link #accepts acceptable}">
				<param name="value"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.StringType.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.StringType.getLiteralPrefix()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.StringType.getLiteralSuffix()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.StringType.getSearchableCode()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.types.StringClob" intfc="n" abs="n" inn="n" sloc="69" jdoc="A {@link Clob} based upon a simple {@link String}. This type allows any string value to be treated as a {@link AxionClob}. @version $Revision: 1.5 $ $Date: 2003 05 14 17:00:30 $ @author Rodney Waldhoff">
			<field name="_value" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.types.StringClob.StringClob(String)" access="pub" jdoc="">
				<param name="str"/>
			</mth>
			<mth name="/:org.axiondb.types.StringClob.getAsciiStream()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.StringClob.getCharacterStream()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.StringClob.getSubString(long, int)" access="pub" jdoc="">
				<param name="pos"/>
				<param name="len"/>
			</mth>
			<mth name="/:org.axiondb.types.StringClob.length()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.StringClob.position(Clob, long)" access="pub" jdoc="">
				<param name="searchstr"/>
				<param name="start"/>
			</mth>
			<mth name="/:org.axiondb.types.StringClob.position(String, long)" access="pub" jdoc="">
				<param name="searchstr"/>
				<param name="start"/>
			</mth>
			<mth name="/:org.axiondb.types.StringClob.setAsciiStream(long)" access="pub" jdoc="">
				<param name="pos"/>
			</mth>
			<mth name="/:org.axiondb.types.StringClob.setCharacterStream(long)" access="pub" jdoc="">
				<param name="pos"/>
			</mth>
			<mth name="/:org.axiondb.types.StringClob.setString(long, String)" access="pub" jdoc="">
				<param name="pos"/>
				<param name="str"/>
			</mth>
			<mth name="/:org.axiondb.types.StringClob.setString(long, String, int, int)" access="pub" jdoc="">
				<param name="pos"/>
				<param name="str"/>
				<param name="offset"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.types.StringClob.getString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.StringClob.truncate(long)" access="pub" jdoc="">
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.types.StringClob.free()" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
			</mth>
			<mth name="/:org.axiondb.types.StringClob.getCharacterStream(long, long)" access="pub" jdoc="">
				<comm cntt="TODO Auto-generated method stub"/>
				<param name="pos"/>
				<param name="length"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.CompressedLobSource" intfc="n" abs="n" inn="n" sloc="34" jdoc="A {@link LobSource} that compresses decompresses the input output streams using GZIP compression. @version $Revision: 1.2 $ $Date: 2002 12 16 23:34:55 $ @author Rodney Waldhoff">
			<field name="_source" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.types.CompressedLobSource.CompressedLobSource(LobSource)" access="pub" jdoc="">
				<param name="source"/>
			</mth>
			<mth name="/:org.axiondb.types.CompressedLobSource.length()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.CompressedLobSource.truncate(long)" access="pub" jdoc="">
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.types.CompressedLobSource.getInputStream()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.CompressedLobSource.setOutputStream(long)" access="pub" jdoc="">
				<param name="pos"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.AnyType" intfc="n" abs="n" inn="n" sloc="178" jdoc="Generic implemention of {@link DataType}, for use by {@link org.axiondb.BindVariable}. @version $Revision: 1.4 $ $Date: 2002 10 15 17:02:53 $ @author Rodney Waldhoff">
			<const name="INSTANCE" access="pub" jdoc=""/>
			<mth name="/:org.axiondb.types.AnyType.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.AnyType.accepts(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.AnyType.convert(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.AnyType.read(DataInput)" access="pub" jdoc="">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.AnyType.write(Object, DataOutput)" access="pub" jdoc="">
				<param name="value"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.AnyType.getJdbcType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.AnyType.getPreferredValueClassName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.AnyType.supportsSuccessor()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.AnyType.successor(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.AnyType.toNumber(Object)" access="prot" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.AnyType.toBoolean(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.AnyType.toByte(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.AnyType.toDouble(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.AnyType.toFloat(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.AnyType.toInt(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.AnyType.toLong(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.AnyType.toShort(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.AnyType.toString(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.AnyType.toDate(Object)" access="pub" jdoc="">
				<comm cntt="should be smarter"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.AnyType.toTime(Object)" access="pub" jdoc="">
				<comm cntt="should be smarter"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.AnyType.toTimestamp(Object)" access="pub" jdoc="">
				<comm cntt="should be smarter"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.AnyType.toClob(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.AnyType.toBlob(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
		</class>
		<class name="/:org.axiondb.types.ByteType" intfc="n" abs="n" inn="n" sloc="63" jdoc="A {@link DataType} representing a byte value. @version $Revision: 1.5 $ $Date: 2003 07 07 23:36:12 $ @author Rodney Waldhoff">
			<mth name="/:org.axiondb.types.ByteType.ByteType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ByteType.getJdbcType()" access="pub" jdoc="@return {@link Types#TINYINT}">
			</mth>
			<mth name="/:org.axiondb.types.ByteType.getPreferredValueClassName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ByteType.getPrecision()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ByteType.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.ByteType.convert(Object)" access="pub" jdoc="Returns an &amp;lt;tt&amp;gt;Byte&amp;lt; tt&amp;gt; converted from the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt;, or throws {@link IllegalArgumentException} if the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; isn&amp;apos;t {@link #accepts acceptable}.">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.ByteType.successor(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.ByteType.read(DataInput)" access="pub" jdoc="@see #write">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.ByteType.write(Object, DataOutput)" access="pub" jdoc="Writes the given &amp;lt;i&amp;gt;value&amp;lt; i&amp;gt; to the given &amp;lt;code&amp;gt;DataOutput&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;Null&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;Byte.MIN_VALUE&amp;lt; code&amp;gt;, &amp;lt;code&amp;gt;false&amp;lt; code&amp;gt;. &amp;lt;code&amp;gt;Byte.MIN_VALUE&amp;lt; code&amp;gt; values are written as &amp;lt;code&amp;gt;Byte.MIN_VALUE&amp;lt; code&amp;gt;, &amp;lt;code&amp;gt;true&amp;lt; code&amp;gt;. All other values are written directly. @param value the value to write, which must be {@link #accepts acceptable}">
				<param name="value"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.ByteType.makeNewInstance()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.types.LOBType" intfc="n" abs="n" inn="n" sloc="199" jdoc="A {@link DataType} representing a Large Object (LOB), for example a {@link Clob} or {@link Blob}. @version $Revision: 1.7 $ $Date: 2003 05 14 19:07:30 $ @author James Burke @author Rodney Waldhoff @author Chuck Burdick">
			<comm cntt="@TODO: clean up the exception handling conversion here"/>
			<comm cntt="TODO: this may support transactional updates of the &amp;quot;select for update&amp;quot; style of clob writing private StringClob readStringClob(LobLocator loc) throws IOException, AxionException, SQLException { ClobSource src = makeClobSource(loc); StringBuffer buf = new StringBuffer(); Reader in = src.getCharacterStream(); for(int c = in.read(); c != -1; c = in.read()) { buf.append((char)c); } in.close(); return new StringClob(buf.toString()); }"/>
			<field name="_lobDir" access="priv" jdoc=""/>
			<field name="_raFile" access="priv" jdoc=""/>
			<field name="_locatorFactory" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.types.LOBType.LOBType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.LOBType.getJdbcType()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.LOBType.isCaseSensitive()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.LOBType.accepts(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.LOBType.convert(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.LOBType.toBlob(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.LOBType.toClob(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.LOBType.toString(Object)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.LOBType.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.LOBType.makeNewInstance()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.LOBType.read(DataInput)" access="pub" jdoc="">
				<param name="in"/>
			</mth>
			<mth name="/:org.axiondb.types.LOBType.write(Object, DataOutput)" access="pub" jdoc="">
				<param name="value"/>
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.types.LOBType.getLobDir()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.LOBType.setLobDir(File)" access="pub" jdoc="">
				<param name="lobDir"/>
			</mth>
			<mth name="/:org.axiondb.types.LOBType.getSearchableCode()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.LOBType.getLobFile()" access="prot" jdoc="">
			</mth>
			<mth name="/:org.axiondb.types.LOBType.writeStringClob(StringClob)" access="prot" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.LOBType.writeByteArrayBlob(ByteArrayBlob)" access="prot" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.types.LOBType.makeBlobSource(LobLocator)" access="prot" jdoc="">
				<param name="loc"/>
			</mth>
			<mth name="/:org.axiondb.types.LOBType.makeClobSource(LobLocator)" access="prot" jdoc="">
				<param name="loc"/>
			</mth>
			<mth name="/:org.axiondb.types.LOBType.closeLobFile()" access="priv" jdoc="">
				<comm cntt="ignored"/>
			</mth>
			<mth name="/:org.axiondb.types.LOBType.openLobFile()" access="priv" jdoc="">
				<comm cntt="_raFile = new BufferedRandomAccessFile(_lobDir,&amp;quot;r&amp;quot;);"/>
			</mth>
		</class>
	</pkg>
	<pkg name="/:org.axiondb.util">
		<class name="/:org.axiondb.util.Utf8InputStreamConverter" intfc="n" abs="n" inn="n" sloc="18" jdoc="@author mdelagrange">
			<comm cntt="this class will require modification"/>
			<comm cntt="if we need non-ascii conversions"/>
			<field name="_targetEncoding" access="priv" jdoc=""/>
			<field name="_utf8Stream" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.util.Utf8InputStreamConverter.Utf8InputStreamConverter(InputStream, String)" access="pub" jdoc="Currently only supports &amp;quot;US-ASCII&amp;quot; @param targetEncoding &amp;quot;US-ASCII&amp;quot; @throws UnsupportedEncodingException">
				<param name="utf8Stream"/>
				<param name="targetEncoding"/>
			</mth>
			<mth name="/:org.axiondb.util.Utf8InputStreamConverter.read()" access="pub" jdoc="Returns a byte encoded as ASCII. If non-ASCII characters are encountered in the underlying UTF-8 stream, an IOException is thrown. @see java.io.InputStream#read()">
			</mth>
		</class>
		<class name="/:org.axiondb.util.ObjectBTree" intfc="n" abs="n" inn="n" sloc="828" jdoc="A B-Tree for &amp;lt;code&amp;gt;Object&amp;lt; code&amp;gt;s, based on the implementation described in &amp;quot;Introduction to Algorithms&amp;quot; by Cormen, Leiserson and Rivest (CLR). (Based on BTree, written by Chuck Burdick and Dave Pekarek Krohn.) @version $Revision: 1.14 $ $Date: 2003 07 11 17:04:06 $ @author Dave Pekarek Krohn">
			<comm cntt="Only used if object is root"/>
			<comm cntt="The id that will be used for the file that is written"/>
			<comm cntt="constructors --------------------------------------------------------------------------------"/>
			<comm cntt="public methods --------------------------------------------------------------------------------"/>
			<comm cntt="private methods -------------------------------------------------------------"/>
			<field name="_log" access="priv" jdoc=""/>
			<field name="_degree" access="priv" jdoc=""/>
			<field name="_maxCap" access="priv" jdoc=""/>
			<field name="_counter" access="priv" jdoc=""/>
			<field name="_fileId" access="priv" jdoc=""/>
			<field name="_buf" access="priv" jdoc=""/>
			<field name="_keys" access="priv" jdoc=""/>
			<field name="_vals" access="priv" jdoc=""/>
			<field name="_childIds" access="priv" jdoc=""/>
			<field name="_loadedChildren" access="priv" jdoc=""/>
			<field name="_idxDir" access="priv" jdoc=""/>
			<field name="_root" access="priv" jdoc=""/>
			<field name="_idxName" access="priv" jdoc=""/>
			<field name="_comparator" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.util.ObjectBTree.ObjectBTree(File, String, int, Comparator)" access="pub" jdoc="Create or load a new root node">
				<param name="idxDir"/>
				<param name="idxName"/>
				<param name="degree"/>
				<param name="comp"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.ObjectBTree(File, String, int, Comparator, ObjectBTree)" access="pub" jdoc="Create or load a node">
				<comm cntt="t"/>
				<comm cntt="Child node need to allocate the next in the sequence"/>
				<comm cntt="Root node need to load the counter file"/>
				<param name="idxDir"/>
				<param name="idxName"/>
				<param name="degree"/>
				<param name="comp"/>
				<param name="root"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.ObjectBTree(File, String, int, Comparator, ObjectBTree, boolean)" access="pub" jdoc="Create or load a new node">
				<param name="idxDir"/>
				<param name="idxName"/>
				<param name="degree"/>
				<param name="comp"/>
				<param name="root"/>
				<param name="shouldCreate"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.ObjectBTree(File, String, int, int, Comparator, ObjectBTree)" access="pub" jdoc="Read in an existing node file">
				<param name="idxDir"/>
				<param name="idxName"/>
				<param name="degree"/>
				<param name="fileId"/>
				<param name="comp"/>
				<param name="root"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.allocate()" access="pub" jdoc="Sets the fileId.">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.loadIdxCtr()" access="pub" jdoc="Loads the counter file if it exists. This sets the counter. Only the root should ever call this.">
				<comm cntt="If this isn&amp;apos;t the root, then there is a problem."/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.saveIdxCtr()" access="pub" jdoc="Saves out the counter file. This should only ever be called by the root.">
				<comm cntt="If this isn&amp;apos;t the root, then there is a problem."/>
				<comm cntt="increment counter"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getFileById(int)" access="pub" jdoc="">
				<param name="fileid"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getCounterFile()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getKeys()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.setKeys(ArrayList)" access="pub" jdoc="">
				<param name="keys"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getValues()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.setValues(IntList)" access="pub" jdoc="">
				<param name="vals"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getValue(int)" access="pub" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.setValue(int, int)" access="pub" jdoc="">
				<param name="index"/>
				<param name="val"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getChildIds()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.setChildIds(IntList)" access="pub" jdoc="">
				<param name="childIds"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getLoadedChildren()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getCounter()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.setCounter(int)" access="pub" jdoc="">
				<param name="counter"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getFileId()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.setFileId(int)" access="pub" jdoc="">
				<param name="fileId"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getRoot()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.isLeaf()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.isRoot()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.size()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.insert(Object, int)" access="pub" jdoc="">
				<comm cntt="grow and rotate tree"/>
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.delete(Object)" access="pub" jdoc="">
				<comm cntt="Comments refer to the cases described in CLR (19.3)"/>
				<comm cntt="Case 3"/>
				<comm cntt="Case 3a, borrow-left"/>
				<comm cntt="Case 3a, borrow-right"/>
				<comm cntt="Case 3b"/>
				<comm cntt="if the key is on the far right, then we need to merge the last two nodes"/>
				<comm cntt="Case 1"/>
				<comm cntt="Case 2"/>
				<comm cntt="Case 2a, move predecessor up"/>
				<comm cntt="Case 2b, move successor up"/>
				<comm cntt="Case 2c, merge nodes"/>
				<comm cntt="Now delete from the newly merged node"/>
				<param name="key"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.borrowLeft(int)" access="pub" jdoc="">
				<comm cntt="Add the upper key to as the first entry of the right sibling"/>
				<comm cntt="Make the upper node&amp;apos;s key the last key from the left sibling"/>
				<comm cntt="If the siblings aren&amp;apos;t leaves, move the last child from the left to be the first on the right"/>
				<comm cntt="Remove the last entry of the left sibling (now moved to upper node)"/>
				<param name="borrowLoc"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.borrowRight(int)" access="pub" jdoc="">
				<comm cntt="Add the upper key to as the last entry of the left sibling"/>
				<comm cntt="Make the upper node&amp;apos;s key the first key from the right sibling"/>
				<comm cntt="If the siblings aren&amp;apos;t leaves, move the first child from the right to be the last on the left"/>
				<comm cntt="Remove the first entry of the right sibling (now moved to upper node)"/>
				<param name="borrowLoc"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.mergeChildren(int, Object)" access="pub" jdoc="">
				<comm cntt="Move the key down to the left child"/>
				<comm cntt="Copy the keys and values from the right to the left"/>
				<comm cntt="If not a leaf copy the child pointers from right to left"/>
				<comm cntt="Now remove the item from the upper node (since it&amp;apos;s been put in left child)"/>
				<param name="mergeLoc"/>
				<param name="key"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.maybeCollapseTree()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getLeftMost(Object[], int)" access="pub" jdoc="Finds and deletes the left most value from this subtree. The key and value for the node is returned in the parameters. This also does the replacement as it unwraps.">
				<param name="keyParam"/>
				<param name="valueParam"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getRightMost(Object[], int)" access="pub" jdoc="Finds and deletes the right most value from this subtree. The key and value for the node is returned in the parameters. This also does the replacement as it unwraps.">
				<param name="keyParam"/>
				<param name="valueParam"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.insertNotfull(Object, int)" access="pub" jdoc="">
				<comm cntt="recurse"/>
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getAll(Object)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getAll(Object, IntListIteratorChain)" access="priv" jdoc="">
				<param name="key"/>
				<param name="chain"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getAllTo(Object)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getAllTo(Object, IntListIteratorChain)" access="priv" jdoc="">
				<comm cntt="else we need to interleave my child nodes as well"/>
				<param name="key"/>
				<param name="chain"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getAllFrom(Object)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getAllFrom(Object, IntListIteratorChain)" access="priv" jdoc="">
				<param name="key"/>
				<param name="chain"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.get(Object)" access="pub" jdoc="Uses the shortest path to a matching entry and returns its value. Not necessarily the least value, the first entered, or the leftmost.">
				<comm cntt="recurse to children"/>
				<param name="key"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.subdivideChild(int, ObjectBTree)" access="pub" jdoc="">
				<comm cntt="prepare index for loops below"/>
				<param name="pivot"/>
				<param name="child"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.write()" access="pub" jdoc="Writes the node file out. This is differentiated from save in that it doesn&amp;apos;t save the entire tree or the counter file.">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.save(File)" access="pub" jdoc="Saves the tree. It saves the counter file, writes out the node and then calls save recursively through the tree.">
				<param name="dataDirectory"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.save()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.read()" access="pub" jdoc="Reads in the node. This doesn&amp;apos;t read in the entire subtree, which happens incrementally as files are needed.">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getChildName(int)" access="pub" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getChildName(String, int)" access="pub" jdoc="">
				<param name="baseName"/>
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.getChild(int)" access="pub" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.addChild(ObjectBTree)" access="pub" jdoc="">
				<param name="child"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.addChild(int, ObjectBTree)" access="pub" jdoc="">
				<param name="index"/>
				<param name="child"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.addChildrenFrom(ObjectBTree)" access="pub" jdoc="">
				<param name="tree"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.addChildren(IntList, Map)" access="pub" jdoc="">
				<param name="childIds"/>
				<param name="children"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.isValid()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.isValid(boolean)" access="pub" jdoc="">
				<comm cntt="Check to make sure that the node isn&amp;apos;t an empty branch"/>
				<comm cntt="Check to make sure that the node has enough children"/>
				<comm cntt="Check to make sure that there aren&amp;apos;t too many children for the number of entries"/>
				<comm cntt="Check all of the children"/>
				<param name="isRoot"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.replaceId(Object, int, int)" access="pub" jdoc="">
				<param name="key"/>
				<param name="oldId"/>
				<param name="newId"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.compare(Object, Object)" access="priv" jdoc="">
				<param name="x"/>
				<param name="y"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.isEqual(Object, Object)" access="priv" jdoc="">
				<param name="x"/>
				<param name="y"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.isNotEqual(Object, Object)" access="priv" jdoc="">
				<param name="x"/>
				<param name="y"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.isGreaterThan(Object, Object)" access="priv" jdoc="">
				<param name="x"/>
				<param name="y"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.isGreaterThanOrEqual(Object, Object)" access="priv" jdoc="">
				<param name="x"/>
				<param name="y"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.isLessThan(Object, Object)" access="priv" jdoc="">
				<param name="x"/>
				<param name="y"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.findNearestKeyBelow(Object)" access="priv" jdoc="">
				<comm cntt="Short circuit"/>
				<comm cntt="We found it now move to the last"/>
				<comm cntt="comp &amp;lt; 0"/>
				<comm cntt="Now go to the nearest if there are multiple entries"/>
				<param name="key"/>
			</mth>
			<mth name="/:org.axiondb.util.ObjectBTree.findNearestKeyAbove(Object)" access="priv" jdoc="">
				<comm cntt="Short circuit"/>
				<comm cntt="We found it now move to the first"/>
				<comm cntt="comp &amp;lt; 0"/>
				<comm cntt="Now go to the nearest if there are multiple entries"/>
				<param name="key"/>
			</mth>
		</class>
		<class name="/:org.axiondb.util.IntIteratorIntListIterator" intfc="n" abs="n" inn="n" sloc="46" jdoc="@version $Revision: 1.1 $ $Date: 2003 05 15 22:51:39 $ @author Rodney Waldhoff">
			<field name="_iterator" access="priv" jdoc=""/>
			<field name="_history" access="priv" jdoc=""/>
			<field name="_nextIndex" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.util.IntIteratorIntListIterator.IntIteratorIntListIterator(IntIterator)" access="pub" jdoc="">
				<param name="iterator"/>
			</mth>
			<mth name="/:org.axiondb.util.IntIteratorIntListIterator.add(int)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.util.IntIteratorIntListIterator.hasNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntIteratorIntListIterator.hasPrevious()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntIteratorIntListIterator.next()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntIteratorIntListIterator.nextIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntIteratorIntListIterator.previous()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntIteratorIntListIterator.previousIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntIteratorIntListIterator.remove()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntIteratorIntListIterator.set(int)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
		</class>
		<class name="/:org.axiondb.util.DataOutputOutputStream" intfc="n" abs="n" inn="n" sloc="55" jdoc="An {@link OutputStream} wrapping a {@link DataOutput} stream. @version $Revision: 1.3 $ $Date: 2002 12 16 23:34:55 $ @author Rodney Waldhoff">
			<field name="_out" access="priv" jdoc="My {@link DataOutput} to delegate to."/>
			<mth name="/:org.axiondb.util.DataOutputOutputStream.DataOutputOutputStream(DataOutput)" access="pub" jdoc="Create an {@link OutputStream} wrapping the given {@link DataOutput}.">
				<param name="out"/>
			</mth>
			<mth name="/:org.axiondb.util.DataOutputOutputStream.close()" access="pub" jdoc="Close me and free any associated resources.">
			</mth>
			<mth name="/:org.axiondb.util.DataOutputOutputStream.write(int)" access="pub" jdoc="Write the given byte. @see DataOutput#write(int)">
				<param name="b"/>
			</mth>
			<mth name="/:org.axiondb.util.DataOutputOutputStream.write(byte)" access="pub" jdoc="Write the given byte array. @see DataOutput#write(byte[])">
				<param name="b"/>
			</mth>
			<mth name="/:org.axiondb.util.DataOutputOutputStream.write(byte, int, int)" access="pub" jdoc="Write the specified sub-array of the given byte array. @see DataOutput#write(byte[],int,int)">
				<param name="b"/>
				<param name="off"/>
				<param name="len"/>
			</mth>
			<mth name="/:org.axiondb.util.DataOutputOutputStream.flush()" access="pub" jdoc="Flush any buffered bytes.">
			</mth>
			<mth name="/:org.axiondb.util.DataOutputOutputStream.writeBoolean(boolean)" access="pub" jdoc="Write the given value. @see DataOutput#writeBoolean">
				<param name="v"/>
			</mth>
			<mth name="/:org.axiondb.util.DataOutputOutputStream.writeByte(int)" access="pub" jdoc="Write the given value. @see DataOutput#writeByte">
				<param name="v"/>
			</mth>
			<mth name="/:org.axiondb.util.DataOutputOutputStream.writeBytes(String)" access="pub" jdoc="Write the given value. @see DataOutput#writeBytes">
				<param name="s"/>
			</mth>
			<mth name="/:org.axiondb.util.DataOutputOutputStream.writeChar(int)" access="pub" jdoc="Write the given value. @see DataOutput#writeChar">
				<param name="v"/>
			</mth>
			<mth name="/:org.axiondb.util.DataOutputOutputStream.writeChars(String)" access="pub" jdoc="Write the given value. @see DataOutput#writeChars">
				<param name="s"/>
			</mth>
			<mth name="/:org.axiondb.util.DataOutputOutputStream.writeDouble(double)" access="pub" jdoc="Write the given value. @see DataOutput#writeDouble">
				<param name="v"/>
			</mth>
			<mth name="/:org.axiondb.util.DataOutputOutputStream.writeFloat(float)" access="pub" jdoc="Write the given value. @see DataOutput#writeFloat">
				<param name="v"/>
			</mth>
			<mth name="/:org.axiondb.util.DataOutputOutputStream.writeInt(int)" access="pub" jdoc="Write the given value. @see DataOutput#writeInt">
				<param name="v"/>
			</mth>
			<mth name="/:org.axiondb.util.DataOutputOutputStream.writeLong(long)" access="pub" jdoc="Write the given value. @see DataOutput#writeLong">
				<param name="v"/>
			</mth>
			<mth name="/:org.axiondb.util.DataOutputOutputStream.writeShort(int)" access="pub" jdoc="Write the given value. @see DataOutput#writeShort">
				<param name="v"/>
			</mth>
			<mth name="/:org.axiondb.util.DataOutputOutputStream.writeUTF(String)" access="pub" jdoc="Write the given value. @see DataOutput#writeUTF">
				<param name="str"/>
			</mth>
		</class>
		<class name="/:org.axiondb.util.BTree" intfc="n" abs="n" inn="n" sloc="807" jdoc="A B-Tree for integers, based on the implementation described in &amp;quot;Introduction to Algorithms&amp;quot; by Cormen, Leiserson and Rivest (CLR). @version $Revision: 1.22 $ $Date: 2003 05 16 20:22:59 $ @author Chuck Burdick @author Dave Pekarek Krohn">
			<comm cntt="constructors"/>
			<comm cntt="------------------------------------------------------------------------"/>
			<comm cntt="public methods"/>
			<comm cntt="------------------------------------------------------------------------"/>
			<comm cntt="-----------------------------------------------------------------------------------------------"/>
			<comm cntt="private methods"/>
			<comm cntt="------------------------------------------------------------------------"/>
			<comm cntt="attributes"/>
			<comm cntt="------------------------------------------------------------------------"/>
			<comm cntt="Only used if object is root"/>
			<comm cntt="The id that will be used for the file that is written"/>
			<comm cntt="inner classes"/>
			<comm cntt="------------------------------------------------------------------------"/>
			<field name="_log" access="priv" jdoc=""/>
			<field name="_degree" access="priv" jdoc=""/>
			<field name="_maxCap" access="priv" jdoc=""/>
			<field name="_counter" access="priv" jdoc=""/>
			<field name="_fileId" access="priv" jdoc=""/>
			<field name="_keys" access="priv" jdoc=""/>
			<field name="_vals" access="priv" jdoc=""/>
			<field name="_childIds" access="priv" jdoc=""/>
			<field name="_loadedChildren" access="priv" jdoc=""/>
			<field name="_idxDir" access="priv" jdoc=""/>
			<field name="_root" access="priv" jdoc=""/>
			<field name="_idxName" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.util.BTree.BTree(File, String, int)" access="pub" jdoc="Create or load a new root node">
				<param name="idxDir"/>
				<param name="idxName"/>
				<param name="degree"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.BTree(File, String, int, BTree)" access="pub" jdoc="Create or load a node">
				<comm cntt="t"/>
				<comm cntt="Child node need to allocate the next in the sequence"/>
				<comm cntt="Root node need to load the counter file"/>
				<param name="idxDir"/>
				<param name="idxName"/>
				<param name="degree"/>
				<param name="root"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.BTree(File, String, int, BTree, boolean)" access="pub" jdoc="Create or load a new node">
				<param name="idxDir"/>
				<param name="idxName"/>
				<param name="degree"/>
				<param name="root"/>
				<param name="shouldCreate"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.BTree(File, String, int, int, BTree)" access="pub" jdoc="Read in an existing node file">
				<param name="idxDir"/>
				<param name="idxName"/>
				<param name="degree"/>
				<param name="fileId"/>
				<param name="root"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.valueIterator()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree.valueIteratorGreaterThanOrEqualTo(int)" access="pub" jdoc="">
				<param name="fromkey"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.valueIteratorGreaterThan(int)" access="pub" jdoc="">
				<param name="fromkey"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.size()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree.insert(int, int)" access="pub" jdoc="">
				<comm cntt="grow and rotate tree"/>
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.delete(int)" access="pub" jdoc="">
				<comm cntt="Comments refer to the cases described in CLR (19.3)"/>
				<comm cntt="Case 3"/>
				<comm cntt="Case 3a, borrow-left"/>
				<comm cntt="Case 3a, borrow-right"/>
				<comm cntt="Case 3b"/>
				<comm cntt="if the key is on the far right, then we need to merge the last two nodes"/>
				<comm cntt="Case 1"/>
				<comm cntt="Case 2"/>
				<comm cntt="Case 2a, move predecessor up"/>
				<comm cntt="Case 2b, move successor up"/>
				<comm cntt="Case 2c, merge nodes"/>
				<comm cntt="Now delete from the newly merged node"/>
				<param name="key"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.getAll(int)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.getAllTo(int)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.get(int)" access="pub" jdoc="Uses the shortest path to a matching entry and returns its value. Not necessarily the least value, the first entered, or the leftmost.">
				<comm cntt="recurse to children"/>
				<param name="key"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.getAllFrom(int)" access="pub" jdoc="">
				<param name="key"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.save(File)" access="pub" jdoc="Saves the tree. It saves the counter file, writes out the node and then calls save recursively through the tree.">
				<param name="dataDirectory"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.save()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree.replaceId(int, int, int)" access="pub" jdoc="">
				<param name="key"/>
				<param name="oldId"/>
				<param name="newId"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.toString()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree.allocate()" access="priv" jdoc="Sets the fileId.">
			</mth>
			<mth name="/:org.axiondb.util.BTree.loadIdxCtr()" access="priv" jdoc="Loads the counter file if it exists. This sets the counter. Only the root should ever call this.">
				<comm cntt="If this isn&amp;apos;t the root, then there is a problem."/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.saveIdxCtr()" access="priv" jdoc="Saves out the counter file. This should only ever be called by the root.">
				<comm cntt="If this isn&amp;apos;t the root, then there is a problem."/>
				<comm cntt="increment counter"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.getFileById(int)" access="priv" jdoc="">
				<param name="fileid"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.getCounterFile()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree.getName()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree.getKeys()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree.setKeys(IntList)" access="priv" jdoc="">
				<param name="keys"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.getValues()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree.setValues(IntList)" access="priv" jdoc="">
				<param name="vals"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.getValue(int)" access="pub" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.setValue(int, int)" access="priv" jdoc="">
				<param name="index"/>
				<param name="val"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.getChildIds()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree.getLoadedChildren()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree.getCounter()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree.setCounter(int)" access="priv" jdoc="">
				<param name="counter"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.getFileId()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree.setFileId(int)" access="priv" jdoc="">
				<param name="fileId"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.getRoot()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree.isLeaf()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree.isRoot()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree.borrowLeft(int)" access="priv" jdoc="">
				<comm cntt="Add the upper key to as the first entry of the right sibling"/>
				<comm cntt="Make the upper node&amp;apos;s key the last key from the left sibling"/>
				<comm cntt="If the siblings aren&amp;apos;t leaves, move the last child from the left to be the first on the right"/>
				<comm cntt="Remove the last entry of the left sibling (now moved to upper node)"/>
				<param name="borrowLoc"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.borrowRight(int)" access="priv" jdoc="">
				<comm cntt="Add the upper key to as the last entry of the left sibling"/>
				<comm cntt="Make the upper node&amp;apos;s key the first key from the right sibling"/>
				<comm cntt="If the siblings aren&amp;apos;t leaves, move the first child from the right to be the last on the left"/>
				<comm cntt="Remove the first entry of the right sibling (now moved to upper node)"/>
				<param name="borrowLoc"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.mergeChildren(int, int)" access="priv" jdoc="">
				<comm cntt="Move the key down to the left child"/>
				<comm cntt="Copy the keys and values from the right to the left"/>
				<comm cntt="If not a leaf copy the child pointers from right to left"/>
				<comm cntt="Now remove the item from the upper node (since it&amp;apos;s been put in left child)"/>
				<param name="mergeLoc"/>
				<param name="key"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.maybeCollapseTree()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree.getLeftMost(int[], int)" access="priv" jdoc="Finds and deletes the left most value from this subtree. The key and value for the node is returned in the parameters. This also does the replacement as it unwraps.">
				<param name="keyParam"/>
				<param name="valueParam"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.getRightMost(int[], int)" access="priv" jdoc="Finds and deletes the right most value from this subtree. The key and value for the node is returned in the parameters. This also does the replacement as it unwraps.">
				<param name="keyParam"/>
				<param name="valueParam"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.insertNotfull(int, int)" access="priv" jdoc="">
				<comm cntt="recurse"/>
				<param name="key"/>
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.getAll(int, IntListIteratorChain)" access="priv" jdoc="">
				<param name="key"/>
				<param name="chain"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.getAllTo(int, IntListIteratorChain)" access="priv" jdoc="">
				<comm cntt="else we need to interleave my child nodes as well"/>
				<param name="key"/>
				<param name="chain"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.getAllFrom(int, IntListIteratorChain)" access="priv" jdoc="">
				<param name="key"/>
				<param name="chain"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.subdivideChild(int, BTree)" access="priv" jdoc="">
				<comm cntt="prepare index for loops below"/>
				<param name="pivot"/>
				<param name="child"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.write()" access="priv" jdoc="Writes the node file out. This is differentiated from save in that it doesn&amp;apos;t save the entire tree or the counter file.">
			</mth>
			<mth name="/:org.axiondb.util.BTree.read()" access="priv" jdoc="Reads in the node. This doesn&amp;apos;t read in the entire subtree, which happens incrementally as files are needed.">
			</mth>
			<mth name="/:org.axiondb.util.BTree.hasChild(int)" access="pub" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.getChildOrNull(int)" access="priv" jdoc="">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.getChild(int)" access="pub" jdoc="@deprecated">
				<param name="index"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.addChild(BTree)" access="priv" jdoc="">
				<param name="child"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.addChild(int, BTree)" access="priv" jdoc="">
				<param name="index"/>
				<param name="child"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.addChildrenFrom(BTree)" access="priv" jdoc="">
				<param name="tree"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.addChildren(IntList, Map)" access="priv" jdoc="">
				<param name="childIds"/>
				<param name="children"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.isValid()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree.isValid(boolean)" access="priv" jdoc="">
				<comm cntt="Check to make sure that the node isn&amp;apos;t an empty branch"/>
				<comm cntt="Check to make sure that the node has enough children"/>
				<comm cntt="Check to make sure that there aren&amp;apos;t too many children for the number of entries"/>
				<comm cntt="Check all of the children"/>
				<param name="isRoot"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.findNearestKeyBelow(int)" access="priv" jdoc="">
				<comm cntt="Short circuit"/>
				<comm cntt="do a binary search for the key"/>
				<comm cntt="on exit from this loop, cur will either be:"/>
				<comm cntt="(a) the rightmost index of the given key within this"/>
				<comm cntt="node, or"/>
				<comm cntt="(b) the position in which the given key would be inserted"/>
				<comm cntt="in this list if it was present"/>
				<comm cntt=""/>
				<comm cntt="We found it now move to the last"/>
				<comm cntt="if(getKey(cur) &amp;gt; key)"/>
				<comm cntt="Now go to the nearest if there are multiple entries"/>
				<param name="key"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.getKey(int)" access="priv" jdoc="">
				<param name="pos"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree.findNearestKeyAbove(int)" access="priv" jdoc="">
				<comm cntt="Short circuit"/>
				<comm cntt="We found it now move to the first"/>
				<comm cntt="if(getKey(cur) &amp;gt; key)"/>
				<comm cntt="Now go to the nearest if there are multiple entries"/>
				<param name="key"/>
			</mth>
		<class name="/:org.axiondb.util.BTree$BTreeValueIterator" intfc="n" abs="n" inn="y" sloc="54" jdoc="">
			<field name="_stack" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.util.BTree$BTreeValueIterator.BTreeValueIterator(BTree)" access="pub" jdoc="">
				<param name="node"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree$BTreeValueIterator.BTreeValueIterator(StateStack)" access="pub" jdoc="">
				<param name="stack"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree$BTreeValueIterator.hasNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree$BTreeValueIterator.next()" access="pub" jdoc="">
				<comm cntt="do nothing, I&amp;apos;ve already popped"/>
				<comm cntt="@TODO: do something smarter"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree$BTreeValueIterator.remove()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.util.BTree$StateStack" intfc="n" abs="n" inn="y" sloc="23" jdoc="">
			<field name="_nodes" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.util.BTree$StateStack.StateStack()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree$StateStack.isEmpty()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree$StateStack.push(State)" access="pub" jdoc="">
				<param name="state"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree$StateStack.push(BTree, boolean, int)" access="pub" jdoc="">
				<param name="tree"/>
				<param name="visitedChildren"/>
				<param name="position"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree$StateStack.pop()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree$StateStack.peek()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.BTree$StateStack.toString()" access="pub" jdoc="">
			</mth>
		</class>
		<class name="/:org.axiondb.util.BTree$State" intfc="n" abs="n" inn="y" sloc="13" jdoc="">
			<field name="node" access="pub" jdoc=""/>
			<field name="visitedChildren" access="pub" jdoc=""/>
			<field name="position" access="pub" jdoc=""/>
			<mth name="/:org.axiondb.util.BTree$State.State(BTree, boolean, int)" access="pub" jdoc="">
				<param name="n"/>
				<param name="visited"/>
				<param name="pos"/>
			</mth>
			<mth name="/:org.axiondb.util.BTree$State.toString()" access="pub" jdoc="">
			</mth>
		</class>
		</class>
		<class name="/:org.axiondb.util.IntListIteratorChain" intfc="n" abs="n" inn="n" sloc="109" jdoc="Concatenates multiple {@link IntListIterator}s into a single {@link IntListIterator}. &amp;lt;p &amp;gt; @version $Revision: 1.5 $ $Date: 2003 05 15 17:25:40 $ @author Chuck Burdick @author Rodney Waldhoff">
			<field name="_listOfIterators" access="priv" jdoc=""/>
			<field name="_tempList" access="priv" jdoc=""/>
			<field name="_tempValueSet" access="priv" jdoc=""/>
			<field name="_tempValue" access="priv" jdoc=""/>
			<field name="_currentIterator" access="priv" jdoc=""/>
			<field name="_iteratorOverIterators" access="priv" jdoc=""/>
			<field name="_nextIndex" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.util.IntListIteratorChain.IntListIteratorChain()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain.addIterator(IntListIterator)" access="pub" jdoc="">
				<param name="iter"/>
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain.addIterator(int)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain.hasNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain.hasPrevious()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain.next()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain.previous()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain.add(int)" access="pub" jdoc="">
				<param name="elt"/>
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain.nextIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain.previousIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain.remove()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain.set(int)" access="pub" jdoc="">
				<param name="elt"/>
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain.assertNotStarted()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain.ensureStarted()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain.addTempListIfNeeded()" access="priv" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain.addToTempList(int)" access="priv" jdoc="">
				<param name="value"/>
			</mth>
		<class name="/:org.axiondb.util.IntListIteratorChain$SingleElementIntListIterator" intfc="n" abs="n" inn="y" sloc="44" jdoc="">
			<field name="_before" access="priv" jdoc=""/>
			<field name="_value" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.util.IntListIteratorChain$SingleElementIntListIterator.SingleElementIntListIterator(int)" access="pub" jdoc="">
				<param name="value"/>
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain$SingleElementIntListIterator.hasNext()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain$SingleElementIntListIterator.hasPrevious()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain$SingleElementIntListIterator.next()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain$SingleElementIntListIterator.nextIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain$SingleElementIntListIterator.previous()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain$SingleElementIntListIterator.previousIndex()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain$SingleElementIntListIterator.remove()" access="pub" jdoc="">
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain$SingleElementIntListIterator.set(int)" access="pub" jdoc="">
				<param name="arg0"/>
			</mth>
			<mth name="/:org.axiondb.util.IntListIteratorChain$SingleElementIntListIterator.add(int)" access="pub" jdoc="">
				<param name="arg0"/>
			</mth>
		</class>
		</class>
		<class name="/:org.axiondb.util.ExceptionConverter" intfc="n" abs="n" inn="n" sloc="58" jdoc="Converts Axion-specific {@link Exception}s into {@link SQLException}s. &amp;lt;p &amp;gt; (This class should eventually handle converting various{@link AxionException}s in to the proper SQLException with vendor message and code.) @version $Revision: 1.7 $ $Date: 2003 05 26 18:11:56 $ @author Rodney Waldhoff @author Chuck Burdick">
			<const name="_log" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.util.ExceptionConverter.convert(AxionException)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.util.ExceptionConverter.convert(String, AxionException)" access="pub" jdoc="">
				<param name="msg"/>
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.util.ExceptionConverter.convert(RuntimeException)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.util.ExceptionConverter.convert(String, RuntimeException)" access="pub" jdoc="">
				<param name="message"/>
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.util.ExceptionConverter.convert(IOException)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.util.ExceptionConverter.convertToIllegalArgumentException(String, RuntimeException)" access="pub" jdoc="">
				<param name="message"/>
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.util.ExceptionConverter.convertToIOException(Exception)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.util.ExceptionConverter.convertToRuntimeException(Exception)" access="pub" jdoc="">
				<param name="e"/>
			</mth>
			<mth name="/:org.axiondb.util.ExceptionConverter.logConversion(String, String, Throwable)" access="priv" jdoc="">
				<param name="from"/>
				<param name="to"/>
				<param name="t"/>
			</mth>
		</class>
		<class name="/:org.axiondb.util.BufferedRandomAccessFile" intfc="n" abs="n" inn="n" sloc="77" jdoc="A buffered extension of {@link RandomAccessFile}. (A little buggy, so currently unused.) @version $Revision: 1.3 $ $Date: 2002 12 16 23:34:55 $ @author Rodney Waldhoff">
			<field name="_buffer" access="priv" jdoc=""/>
			<field name="_nextByte" access="priv" jdoc=""/>
			<field name="_maxBufferedByte" access="priv" jdoc=""/>
			<field name="_firstBufferPosition" access="priv" jdoc=""/>
			<mth name="/:org.axiondb.util.BufferedRandomAccessFile.BufferedRandomAccessFile(File, String)" access="pub" jdoc="@see RandomAccessFile#RandomAccessFile(java.io.File,java.lang.String)">
				<param name="file"/>
				<param name="mode"/>
			</mth>
			<mth name="/:org.axiondb.util.BufferedRandomAccessFile.BufferedRandomAccessFile(File, String, int)" access="pub" jdoc="@param size buffer size in bytes @see RandomAccessFile#RandomAccessFile(java.io.File,java.lang.String)">
				<param name="file"/>
				<param name="mode"/>
				<param name="size"/>
			</mth>
			<mth name="/:org.axiondb.util.BufferedRandomAccessFile.BufferedRandomAccessFile(String, String)" access="pub" jdoc="@see RandomAccessFile#RandomAccessFile(java.lang.String,java.lang.String)">
				<param name="filename"/>
				<param name="mode"/>
			</mth>
			<mth name="/:org.axiondb.util.BufferedRandomAccessFile.BufferedRandomAccessFile(String, String, int)" access="pub" jdoc="@param size buffer size in bytes @see RandomAccessFile#RandomAccessFile(java.lang.String,java.lang.String)">
				<param name="filename"/>
				<param name="mode"/>
				<param name="size"/>
			</mth>
			<mth name="/:org.axiondb.util.BufferedRandomAccessFile.read()" access="pub" jdoc="@see RandomAccessFile#read">
			</mth>
			<mth name="/:org.axiondb.util.BufferedRandomAccessFile.read(byte[], int, int)" access="pub" jdoc="@see RandomAccessFile#read(byte[],int,int)">
				<comm cntt="if(length &amp;gt; _maxBufferedByte - _nextByte)"/>
				<param name="bytes"/>
				<param name="offset"/>
				<param name="length"/>
			</mth>
			<mth name="/:org.axiondb.util.BufferedRandomAccessFile.seek(long)" access="pub" jdoc="@see RandomAccessFile#seek(long)">
				<comm cntt="if(pos &amp;lt; (_firstBufferPosition + (long)_maxBufferedByte)) { _nextByte = (int)(pos - _firstBufferPosition); if(_nextByte &amp;lt; 0) { clearBuffer(); } } else { clearBuffer(); }"/>
				<param name="pos"/>
			</mth>
			<mth name="/:org.axiondb.util.BufferedRandomAccessFile.fillBuffer()" access="priv" jdoc="Fill my buffer with bytes from the underlying file.">
			</mth>
			<mth name="/:org.axiondb.util.BufferedRandomAccessFile.clearBuffer()" access="priv" jdoc="Clear my buffer.">
			</mth>
		</class>
	</pkg>
</java-project>